//***********************************************************
//! @file
//! @brief		コマンドリスト実装(DirectX12)
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/RHI/CommandList.h>
#include <Framework/RHI/Types/CommandListDesc.h>
#include <Framework/RHI/Constants.h>
#include <Framework/RHI/FrameBuffer.h>
#include <Framework/Core/Utility/Swapper.h>
#include <Plugins/DirectX12RHI/Command/ResourceStateCache.h>

namespace ob::rhi::dx12 {

    //@―---------------------------------------------------------------------------
    //! @brief  コマンドリスト実装(DirectX12)
    //@―---------------------------------------------------------------------------
    class CommandListImpl:public CommandList {
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //@―---------------------------------------------------------------------------
        CommandListImpl(class DeviceImpl& device, const CommandListDesc& desc);


        //@―---------------------------------------------------------------------------
        //! @brief  妥当な状態か
        //@―---------------------------------------------------------------------------
        bool isValid()const override;


        //===============================================================
        // コマンド
        //===============================================================

#pragma region Command

        //@―---------------------------------------------------------------------------
        //! @brief      記録開始
        //@―---------------------------------------------------------------------------
         void begin() override;

         //@―---------------------------------------------------------------------------
         //! @brief      記録終了
         //@―---------------------------------------------------------------------------
         void end() override;

         //@―---------------------------------------------------------------------------
         //! @brief      記録終了
         //@―---------------------------------------------------------------------------
         void flush() override;

        //@―---------------------------------------------------------------------------
        //! @brief      レンダーパス開始
        //@―---------------------------------------------------------------------------
        void beginRenderPass(const Ref<FrameBuffer>& frameBuffer);

        //@―---------------------------------------------------------------------------
        //! @brief      次のサブパスに進める
        //@―---------------------------------------------------------------------------
        void nextSubpass();

        //@―---------------------------------------------------------------------------
        //! @brief      レンダーパス終了
        //@―---------------------------------------------------------------------------
        void endRenderPass();
        
        //@―---------------------------------------------------------------------------
        //! @brief      スワップチェーンにテクスチャを適用
        //@―---------------------------------------------------------------------------
        void applyDisplay(const Ref<Display>& display, const Ref<RenderTexture>& texture) override;

        //@―---------------------------------------------------------------------------
        //! @brief      シザー矩形を設定
        //@―---------------------------------------------------------------------------
        void setScissorRect(const IntRect* pRect, s32 num) override;

        //@―---------------------------------------------------------------------------
        //! @brief      ビューポートを設定
        //@―---------------------------------------------------------------------------
        void setViewport(const Viewport* pViewport, s32 num) override;

        //@―---------------------------------------------------------------------------
        //! @brief      レンダーターゲットの色をRenderTargetに設定した色でクリア
        //@―---------------------------------------------------------------------------
        void clearColors(u32 mask) override;

        //@―---------------------------------------------------------------------------
        //! @brief      レンダーターゲットのデプスとステンシルをクリア
        //@―---------------------------------------------------------------------------
        void clearDepthStencil();

        //@―---------------------------------------------------------------------------
        //! @brief      頂点バッファを設定
        //@―---------------------------------------------------------------------------
        void setVertexBuffers(Span<const Ref<Buffer>*>)override;

        //@―---------------------------------------------------------------------------
        //! @brief      インデックスバッファを設定
        //@―---------------------------------------------------------------------------
        void setIndexBuffer(const Ref<Buffer>&)override;

        //@―---------------------------------------------------------------------------
        //! @brief      ルートシグネチャを設定
        //@―---------------------------------------------------------------------------
        void setRootSignature(const Ref<RootSignature>&) override;

        //@―---------------------------------------------------------------------------
        //! @brief      パイプラインステートを設定
        //@―---------------------------------------------------------------------------
        void setPipelineState(const Ref<PipelineState>&) override;

        //@―---------------------------------------------------------------------------
        //! @brief      描画
        //@―---------------------------------------------------------------------------
        void draw(const DrawParam&)override;

        //@―---------------------------------------------------------------------------
        //! @brief      インデックス描画
        //@―---------------------------------------------------------------------------
        void drawIndexed(const DrawIndexedParam&)override;


        //@―---------------------------------------------------------------------------
        //! @brief      デスクリプタ・テーブルを設定
        //@―---------------------------------------------------------------------------
        void setRootDesciptorTable(const rhi::SetDescriptorTableParam*, s32 num) override;


        //@―---------------------------------------------------------------------------
        //! @brief      リソースバリアを挿入
        //@―---------------------------------------------------------------------------
        void insertResourceBarrier(const ResourceBarrier&) override;


#ifdef OB_DEBUG
        //@―---------------------------------------------------------------------------
        //! @brief      マーカーを挿入
        //@―---------------------------------------------------------------------------
        void pushMarker(const char* pName) override;

        //@―---------------------------------------------------------------------------
        //! @brief      マーカーを終了
        //@―---------------------------------------------------------------------------
        void popMarker() override;
#endif

#pragma endregion

    public:

        ID3D12GraphicsCommandList5* getNative()const { return m_cmdList.Get(); }

    private:

        void setSubpass();
        void clearDescriptorHandle();
        void onNameChanged()override;

    private:

        class DeviceImpl& m_device;
        const CommandListDesc m_desc;

        ComPtr<ID3D12CommandAllocator> m_cmdAllocator;
        ComPtr<ID3D12GraphicsCommandList6> m_cmdList;

        D3D12_CPU_DESCRIPTOR_HANDLE m_hRTV[RENDER_TARGET_MAX];  // 現在の描画ターゲット(クリア用)
        D3D12_CPU_DESCRIPTOR_HANDLE m_hDSV;                     // 現在の描画ターゲット(クリア用)

        Array<D3D12_RESOURCE_BARRIER> m_barriers;

        FrameBuffer* m_frameBuffer;
        s32         m_subpassIndex;

        ResourceStateCache m_cache;

    };

}// ob::rhi::dx12 