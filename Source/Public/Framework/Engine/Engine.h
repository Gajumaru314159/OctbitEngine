//***********************************************************
//! @file
//! @brief		ファイル説明
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Singleton/Singleton.h>

namespace ob {

    //@―---------------------------------------------------------------------------
    //! @brief  説明
    //@―---------------------------------------------------------------------------
    class Engine :public Singleton<Logger> {
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief  説明
        //@―---------------------------------------------------------------------------
        Engine();
        ~Engine();

    public:

        static bool IsActive()noexcept;

        template<class TComponent>
        static auto* Get()noexcept {
            assert(m_instance);
            return std::get<UPtr<TComponent>>(m_instance->m_components).get();
        }

    private:

        UPtr<class Logger> m_logger;

    };






    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond



    //! @endcond
}// namespcae ob