//***********************************************************
//! @file
//! @brief		ファイル説明
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Graphics/Render/RenderContext.h>
#include <Framework/RHI/Forward.h>

namespace ob::graphics {
        
    //@―---------------------------------------------------------------------------
    //! @brief  
    //! 
    //! @details    内部的にCommandBufferを持っています。独自の描画方法を使用する場合は
    //!             CommandBufferに直接コマンドを記録し、executeCommandBuffer()を記録してください。
    //!             RenderContextはRenderPassの構築を内部的に処理するために、すべての描画処理を
    //!             endRenderPassで行います。それ以前の描画コマンドはLinearAllocatorに追加していきます。
    //@―---------------------------------------------------------------------------
    class RenderContextImpl:public RenderContext{
    public:

        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ
        //@―---------------------------------------------------------------------------
        RenderContextImpl();

        //@―---------------------------------------------------------------------------
        //! @brief      RenderPass を開始
        //@―---------------------------------------------------------------------------
        void beginRenderPass(const Ref<rhi::FrameBuffer>&);

        //@―---------------------------------------------------------------------------
        //! @brief      RenderPass を終了
        //@―---------------------------------------------------------------------------
        void endRenderPass();

        //@―---------------------------------------------------------------------------
        //! @brief      次のサブパスを開始
        //@―---------------------------------------------------------------------------
        void nextSubpass();

        //@―---------------------------------------------------------------------------
        //! @brief      カスタムコマンドバッファーを記録
        //! 
        //! @details    この関数を呼び出すと、RenderContext内部のCommandBufferにカスタムCommandBufferの内容がコピーされます。
        //!             呼出し後にカスタムCommandBufferを再利用しない場合はCommandBufferをクリアしてください。
        //@―---------------------------------------------------------------------------
        void executeCustomCommand(const CommandBuffer&);
        // TODO ComputeAsync版


        //@―---------------------------------------------------------------------------
        //! @brief      カメラのプロパティをグローバル変数に書き込む
        //@―---------------------------------------------------------------------------
        void setCamera(const Camera& camera);

        //@―---------------------------------------------------------------------------
        //! @brief      特定の描画タグを持つ描画アイテムを描画する
        //@―---------------------------------------------------------------------------
        //RenderGroup getRendererGroup(Name renderTag) const;// Debug / Shadow / UI

        //@―---------------------------------------------------------------------------
        //! @brief      特定の描画タグを持つ描画アイテムを描画する
        //@―---------------------------------------------------------------------------
        void draw();

        //@―---------------------------------------------------------------------------
        //! @brief      記録された全てのコマンドを実行
        //! 
        //! @details    記録されているコマンドを即時実行し、実行が終わるまで待機します。
        //@―---------------------------------------------------------------------------
        void submit();

    private:

       Ref<rhi::CommandList> m_commandList;

    };

}