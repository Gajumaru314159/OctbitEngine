//***********************************************************
//! @file
//! @brief		
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Core/Misc/YesNo.h>
#include <Framework/RHI/Forward.h>

namespace ob::graphics {
    
    class CommandBuffer;
    class Camera;
    class IRenderer;

    class RenderGroup;

    //@―---------------------------------------------------------------------------
    //! @brief  
    //! 
    //! @details    内部的にCommandBufferを持っています。独自の描画方法を使用する場合は
    //! CommandBufferに直接コマンドを記録し、executeCommandBuffer()を記録してください。
    //@―---------------------------------------------------------------------------
    class RenderContext {
    public:

        //@―---------------------------------------------------------------------------
        //! @brief      RenderPass を開始
        //@―---------------------------------------------------------------------------
        virtual void beginRenderPass(const Ref<rhi::FrameBuffer>&) = 0;

        //@―---------------------------------------------------------------------------
        //! @brief      RenderPass を終了
        //@―---------------------------------------------------------------------------
        virtual void endRenderPass() = 0;

        //@―---------------------------------------------------------------------------
        //! @brief      次のサブパスを開始
        //@―---------------------------------------------------------------------------
        virtual void nextSubpass() = 0;

        //@―---------------------------------------------------------------------------
        //! @brief      カスタムコマンドバッファーを記録
        //! 
        //! @details    この関数を呼び出すと、RenderContext内部のCommandBufferにカスタムCommandBufferの内容がコピーされます。
        //!             呼出し後にカスタムCommandBufferを再利用しない場合はCommandBufferをクリアしてください。
        //@―---------------------------------------------------------------------------
        virtual void executeCustomCommand(const CommandBuffer&) = 0; 
        // TODO ComputeAsync版


        //@―---------------------------------------------------------------------------
        //! @brief      カメラのプロパティをグローバル変数に書き込む
        //@―---------------------------------------------------------------------------
        virtual void setCamera(const Camera& camera) = 0;

        //@―---------------------------------------------------------------------------
        //! @brief      特定の描画タグを持つ描画アイテムを描画する
        //@―---------------------------------------------------------------------------
        //virtual RenderGroup getRendererGroup(Name renderTag) const;// Debug / Shadow / UI

        //@―---------------------------------------------------------------------------
        //! @brief      特定の描画タグを持つ描画アイテムを描画する
        //@―---------------------------------------------------------------------------
        virtual void draw() = 0;// Debug / Shadow / UI

        //@―---------------------------------------------------------------------------
        //! @brief      記録された全てのコマンドを実行
        //! 
        //! @details    記録されているコマンドを即時実行し、実行が終わるまで待機します。
        //@―---------------------------------------------------------------------------
        virtual void submit() = 0;

    };

}