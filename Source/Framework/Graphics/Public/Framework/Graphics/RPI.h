//***********************************************************
//! @file
//! @brief		システム
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/RHI/Forward.h>
#include <Framework/Graphics/Forward.h>
#include <Framework/Core/Utility/Swapper.h>

namespace ob::graphics {

    struct RPIDesc {
        struct ImageSystemDesc {
            u64 streamingImagePoolSize = 128 * 1024 * 1024;
            u64 attachmentImagePoolSize = 512 * 1024 * 1024;
        } image;

        struct GPUQuerySystemDesc {
            u32 occlusionQueryCount;
        } gpuQuery;

        struct DynamicDrawSystemDesc {
            u32 dynamicBufferPoolSize = 3 * 16 * 1024 * 1024;
        } dynamicDraw;
    };

    //@―---------------------------------------------------------------------------
    //! @brief      RenderPipelineInterface
    //@―---------------------------------------------------------------------------
    class RPI :public Singleton<RPI> {
    public:

        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ
        //@―---------------------------------------------------------------------------
        RPI(rhi::RHI& rhi);

        //@―---------------------------------------------------------------------------
        //! @brief      デストラクタ
        //@―---------------------------------------------------------------------------
        ~RPI();

        //@―---------------------------------------------------------------------------
        //! @brief      シーンを登録
        //! @details    登録したシーンはRPIの更新対象に含まれるようになります。
        //@―---------------------------------------------------------------------------
        void addScene(const Ref<RenderScene>& scene);

        //@―---------------------------------------------------------------------------
        //! @brief      シーンの登録を解除
        //@―---------------------------------------------------------------------------
        void removeScene(const Ref<RenderScene>& scene);

        //@―---------------------------------------------------------------------------
        //! @brief      ゲームループごとの更新を実行する
        //@―---------------------------------------------------------------------------
        void update();

        void beginForParallel(s32 threadNum);
        void updateForParallel(s32 threadIndex);


        //@―---------------------------------------------------------------------------
        //! @brief      ネイティブの描画コマンドを発行して描画処理を開始する
        //@―---------------------------------------------------------------------------
        void execute();

        //@―---------------------------------------------------------------------------
        //! @brief      ネイティブの描画コマンドを発行して描画処理を開始する
        //@―---------------------------------------------------------------------------
        void wait();

    private:

        rhi::RHI& m_rhi;
        Array<Ref<RenderScene>> m_scenes;
        Swapper<UPtr<RenderFrameData>> m_frameDataList;

    };

}