//***********************************************************
//! @file
//! @brief		グラフィック・オブジェクト
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Core/Utility/Ref.h>

namespace ob::rhi {

	//@―---------------------------------------------------------------------------
	//! @brief      グラフィック・オブジェクト
	//! 
	//! @details    グラフィック・オブジェクトは描画時まで削除されない必要があります。
	//!             描画はフレーム内に収まらず数フレーム遅れる場合もあるため、
	//!             所有者の寿命で管理するのが難しくなします。
	//!             そこで、このクラスを継承するクラスは所有者のデストラクタで削除されずに
	//!             システムの遅延開放スタックに積まれます。
	//!             システムのスタックに積まれている間は破棄されていないことが保証できるため
	//!             GPUからのアクセスにも対応できます。
	//!```          
	//!             class ITexture:public GraphicObject{
	//!             }
	//! 
	//!             class Texture{
	//!             public:
	//!                 OB_DEFINE_GRAPHIC_OBJECT_HOLDER(Texture);
	//!             private:
	//!                 ITexture* m_pImpl;
	//!             }
	//! 
	//!             class System:public Singleton(System){
	//!             public:
	//!                 void stackDelayDelete(GraphicObject* pObject){
	//!                     m_delayDeleteStack.push_back(pObject);               
	//!                 }
	//!             }
	//! ```
	//@―---------------------------------------------------------------------------
	class GraphicObject : public RefObject {
	public:

		//===============================================================
		// コンストラクタ / デストラクタ
		//===============================================================

		//@―---------------------------------------------------------------------------
		//! @brief  デストラクタ
		//@―---------------------------------------------------------------------------
		virtual ~GraphicObject();


		//@―---------------------------------------------------------------------------
		//! @brief      名前を取得
		//@―---------------------------------------------------------------------------
		const Char* getName()const;


		//@―---------------------------------------------------------------------------
		//! @brief      名前を設定
		//@―---------------------------------------------------------------------------
		void setName(StringView);


		//@―---------------------------------------------------------------------------
		//! @brief      名前を設定
		//@―---------------------------------------------------------------------------
		virtual bool isValid() const = 0;


	protected:

		//@―---------------------------------------------------------------------------
		//! @brief  コンストラクタ
		//! 
		//! @param name オブジェクト名
		//@―---------------------------------------------------------------------------
		GraphicObject();

		virtual void onNameChanged() {}

	private:

		void finalize()override;

	private:

#ifdef OB_DEBUG
		Char      m_name[100];
#endif

	};

}// namespcae ob::rhi