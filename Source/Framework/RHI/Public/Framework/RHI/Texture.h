//***********************************************************
//! @file
//! @brief		テクスチャ
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/RHI/Forward.h>
#include <Framework/RHI/GraphicObject.h>
#include <Framework/RHI/Types/TextureDesc.h>
#include <Framework/Core/Graphic/Bitmap.h>

namespace ob::rhi {

    //@―---------------------------------------------------------------------------
    //! @brief      テクスチャイベント
    //@―---------------------------------------------------------------------------
    OB_EVENT_NOTIFIER(TextureEvent);

    //@―---------------------------------------------------------------------------
    //! @brief      テクスチャ
    //@―---------------------------------------------------------------------------
    class Texture :public GraphicObject {
    public:

        static Ref<Texture> White();    //!< 白テクスチャ
        static Ref<Texture> Gray();     //!< 灰テクスチャ
        static Ref<Texture> Black();    //!< 黒テクスチャ
        static Ref<Texture> Normal();   //!< 法線テクスチャ
        static Ref<Texture> Check();    //!< チェックテクスチャ

    public:

        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //! 
        //! @param desc テクスチャ定義
        //@―---------------------------------------------------------------------------
        static Ref<Texture> Create(const TextureDesc& desc);

        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //! 
        //! @param desc テクスチャ定義
        //@―---------------------------------------------------------------------------
        static Ref<Texture> Create(const Bitmap& bitmap);

        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //! 
        //! @param desc テクスチャ定義
        //@―---------------------------------------------------------------------------
        static Ref<Texture> Create(Size size,Span<IntColor> colors);

        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //! 
        //! @param desc テクスチャ定義
        //@―---------------------------------------------------------------------------
        static Ref<Texture> Create(BlobView blob,StringView name);

        //@―---------------------------------------------------------------------------
        //! @brief      パスからテクスチャを読み込み
        //! 
        //! @param path ファイルパス
        //@―---------------------------------------------------------------------------
        static Ref<Texture> Load(const Path& path);

    public:

        //@―---------------------------------------------------------------------------
        //! @brief      定義取得
        //@―---------------------------------------------------------------------------
        virtual const TextureDesc& desc()const = 0;

        //@―---------------------------------------------------------------------------
        //! @brief  サイズ
        //@―---------------------------------------------------------------------------
        Size size()const { return desc().size; }

        //@―---------------------------------------------------------------------------
        //! @brief      幅を取得
        //@―---------------------------------------------------------------------------
        s32 Texture::width()const { return size().width; }

        //@―---------------------------------------------------------------------------
        //! @brief      高さを取得
        //@―---------------------------------------------------------------------------
        s32 Texture::height()const { return size().height; }

        //@―---------------------------------------------------------------------------
        //! @brief      深さを取得
        //@―---------------------------------------------------------------------------
        s32 Texture::depth()const { return size().depth; }

        //@―---------------------------------------------------------------------------
        //! @brief      テクスチャ・フォーマットを取得
        //@―---------------------------------------------------------------------------
        TextureFormat format()const { return desc().format; }

        //@―---------------------------------------------------------------------------
        //! @brief      ミップレベルを取得
        //@―---------------------------------------------------------------------------
        s32 mipLevels()const { return desc().mipLevels; }

        //@―---------------------------------------------------------------------------
        //! @brief      イベントリスナ追加
        //@―---------------------------------------------------------------------------
        virtual void addEventListener(TextureEventHandle& handle, TextureEventDelegate func) = 0;

    };

}