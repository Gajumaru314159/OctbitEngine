//***********************************************************
//! @file
//! @brief		ボタン入力
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Input/InputType.h>


//@―---------------------------------------------------------------------------
//! @brief	ボタン定義マクロ
//@―---------------------------------------------------------------------------
#define OB_DECL_BUTTON(type,name) static constexpr Button name{ ID,type::name };

namespace ob::input {

	//@―---------------------------------------------------------------------------
	//! @brief		ボタン
	//! 
	//! @details	「キーボードのAボタン」や「マウスの左ボタン」など、トグル入力を扱います。
	//@―---------------------------------------------------------------------------
	class Button {
	public:

		//@―---------------------------------------------------------------------------
		//! @brief	デフォルトコンストラクタ
		//@―---------------------------------------------------------------------------
		Button() = default;

		//@―---------------------------------------------------------------------------
		//! @brief			コンストラクタ
		//! @param deviceID	デバイスタイプ
		//! @param code		コード
		//! @param user		ユーザ番号
		//@―---------------------------------------------------------------------------
		constexpr Button(DeviceID deviceID, u32 code, u32 user = 0) :m_deviceId(deviceID),m_code(code), m_user(user) {}

		//@―---------------------------------------------------------------------------
		//! @brief	コンストラクタ
		//@―---------------------------------------------------------------------------
		template<typename T>
		constexpr Button(DeviceID type, T code, u32 user = 0) : Button(type, enum_cast(code), user) {}

	public:

		//@―---------------------------------------------------------------------------
		//! @brief	状態が state か
		//@―---------------------------------------------------------------------------
		//StringView name()const;

		//@―---------------------------------------------------------------------------
		//! @brief	状態が state か
		//@―---------------------------------------------------------------------------
		//TimeSpan pressedTimeSpan()const;


		//@―---------------------------------------------------------------------------
		//! @brief	状態が state か
		//@―---------------------------------------------------------------------------
		bool is(ButtonState state)const;

		//@―---------------------------------------------------------------------------
		//! @brief	押された瞬間か
		//@―---------------------------------------------------------------------------
		bool down()const;

		//@―---------------------------------------------------------------------------
		//! @brief	離された瞬間か
		//@―---------------------------------------------------------------------------
		bool up()const;

		//@―---------------------------------------------------------------------------
		//! @brief	押されているか
		//@―---------------------------------------------------------------------------
		bool pressed()const;

		//@―---------------------------------------------------------------------------
		//! @brief	離されているか
		//@―---------------------------------------------------------------------------
		bool released()const;

	public:

		//@―---------------------------------------------------------------------------
		//! @brief	バインド
		//! 
		//! @param handle	イベントハンドル
		//! @param func		コールバック
		//@―---------------------------------------------------------------------------
		bool bindDown(ButtonHandle& handle, const ButtonDelegate& func)const;
		bool bindUp(ButtonHandle& handle, const ButtonDelegate& func)const;
		bool bindPressed(ButtonHandle& handle, const ButtonDelegate& func)const;
		bool bindReleased(ButtonHandle& handle, const ButtonDelegate& func)const;

	private:

		bool bind(ButtonState state, ButtonHandle& handle, const ButtonDelegate& func)const;

	private:
		DeviceID m_deviceId;
		u32 m_user;
		u32 m_code;
	};

}