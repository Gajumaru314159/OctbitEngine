//***********************************************************
//! @file
//! @brief		設定コンテキスト
//! @author		Gajumaru
//***********************************************************
#pragma once

namespace ob::engine {

    //@―---------------------------------------------------------------------------
    //! @brief  設定コンテキスト
    //@―---------------------------------------------------------------------------
    class InitContext {
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief  設定追加
        //@―---------------------------------------------------------------------------
        template<typename T>
        void set(const T& setting) {
            auto hash = typeid(T).hash_code();
            m_settings[hash] = setting;
        }

        //@―---------------------------------------------------------------------------
        //! @brief  設定取得
        //@―---------------------------------------------------------------------------
        template<typename T>
        T get() const{
            auto hash = typeid(T).hash_code();
            auto found = m_settings.find(hash);
            if (found == m_settings.end()) {
                return T{};
            }
            return std::any_cast<T>(found->second);
        }

    private:

        using TypeHash = size_t;
        HashMap<TypeHash, std::any> m_settings;

    };






    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond



    //! @endcond
}// namespcae ob