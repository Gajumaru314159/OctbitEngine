//***********************************************************
//! @file
//! @brief		コンポーネント
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Core/Reflection/TypeId.h>

namespace ob::engine {

	class Entity;

	//@―---------------------------------------------------------------------------
	//! @brief  コンポーネント
	//@―---------------------------------------------------------------------------
	class Component {
		friend class Entity;
	public:

		OB_RTTI();

		~Component();

		Entity& getEntity()const;

	protected:

		//@―---------------------------------------------------------------------------
		//! @brief		コンストラクタ
		//! @details	構築時は Entity の参照を持っていないため Entity や他の Compoent
		//!				にアクセスできません。依存がある初期設定は startup() を使用してください。
		//@―---------------------------------------------------------------------------
		Component();

		//@―---------------------------------------------------------------------------
		//! @brief		起動
		//! @details	この関数は Entity ツリーの構築後に一度だけ呼び出されます。
		//!				初期化に Entity や他の Componentを利用する場合に使用します。
		//!				イベントの購読処理などもここで行います。
		//@―---------------------------------------------------------------------------
		virtual void startup() {};

		//@―---------------------------------------------------------------------------
		//! @brief		アクティブ化
		//! @details	所有している Entity がアクティブ化されるときに呼び出されます。
		//!				依存する Component がある場合、依存 Componet がアクティブ化されたあとに呼び出されます。
		//!				アクティブ状態の Entity に追加された場合は startup() 後に呼び出されます。
		//@―---------------------------------------------------------------------------
		virtual void activate() {};

		//@―---------------------------------------------------------------------------
		//! @brief		非アクティブ化
		//! @details	所有している Entity が非アクティブ化されるときに呼び出されます。
		//!				非アクティブ化の順序はアクティブ化の逆順であるため、
		//!				コンポーネントは依存コンポーネントより前に非アクティブ化されます。
		//@―---------------------------------------------------------------------------
		virtual void deactivate() {};

		
	private:

		class Entity* m_entity;

	};

}// namespcae ob
