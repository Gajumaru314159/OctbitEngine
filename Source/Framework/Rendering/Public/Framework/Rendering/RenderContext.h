//***********************************************************
//! @file
//! @brief		ファイル説明
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Core/Misc/YesNo.h>

namespace ob::rendering {

    class CommandBuffer;
    class Camera;

    //@―---------------------------------------------------------------------------
    //! @brief  
    //! 
    //! @details    内部的にCommandBufferを持っています。独自の描画方法を使用する場合は
    //! CommandBufferに直接コマンドを記録し、executeCommandBuffer()を記録してください。
    //@―---------------------------------------------------------------------------
    class RenderContext {
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief      RenderPass を開始
        //@―---------------------------------------------------------------------------
        void beginRenderPass(s32 width,s32 height);

        //@―---------------------------------------------------------------------------
        //! @brief      サブパスを開始
        //@―---------------------------------------------------------------------------
        void beginSubPass(/*colors,inputs*/);


        //@―---------------------------------------------------------------------------
        //! @brief      カメラのプロパティをグローバル変数に書き込む
        //@―---------------------------------------------------------------------------
        void setupCameraProperties(Camera camera);

        //@―---------------------------------------------------------------------------
        //! @brief      特定の描画タグを持つ描画アイテムを描画する
        //@―---------------------------------------------------------------------------
        void draw(/*tag,sort,filter*/);// Debug / Shadow / UI

        //@―---------------------------------------------------------------------------
        //! @brief      カスタムコマンドバッファーを記録
        //! 
        //! @details    この関数を呼び出すと、RenderContext内部のCommandBufferにカスタムCommandBufferの内容がコピーされます。
        //!             呼出し後にカスタムCommandBufferを再利用しない場合はCommandBufferをクリアしてください。
        //@―---------------------------------------------------------------------------
        void executeCommandBuffer(const CommandBuffer&);

        //@―---------------------------------------------------------------------------
        //! @brief      
        //@―---------------------------------------------------------------------------
        //void invokeOnRenderObjectCallBack();


        //@―---------------------------------------------------------------------------
        //! @brief      サブパスを終了
        //@―---------------------------------------------------------------------------
        void endSubPass();

        //@―---------------------------------------------------------------------------
        //! @brief      RenderPass を終了
        //@―---------------------------------------------------------------------------
        void endRenderPass();

        //@―---------------------------------------------------------------------------
        //! @brief      記録された全てのコマンドを実行
        //! 
        //! @details    記録されているコマンドを即時実行し、実行が終わるまで待機します。
        //@―---------------------------------------------------------------------------
        void submit();       


    private:

        RenderContext(class RenderContextInternal&);

    private:

        class RenderContextInternal& m_context;

    };






    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond



    //! @endcond
}// namespcae ob