//***********************************************************
//! @file
//! @brief		アサーション定義
//! @author		Gajumaru
//! 
//! @details    OB_ASSERT や OB_ABORT はリリース版でプログラムに含まれません。
//!             アサーションは主にプログラムの前提条件を表すために使用されます。
//!             エラー処理には適切に対処してエラーログを出力するか、例外を発生させてください。
//***********************************************************
#pragma once
#include <Framework/Core/Log/LogMacro.h>


//============================================
// アサーションマクロ
//============================================

//@―---------------------------------------------------------------------------
//! @brief      アサーションの基底マクロ
//@―---------------------------------------------------------------------------
#define _internal_OB_ASSERT_BASE(expr,format,...)                                       \
if(UNLIKELY(!(expr))){                                                                  \
    _internal_OB_LOG_BASE(ob::core::LogLevel::Fatal,"Assertion",format,__VA_ARGS__);    \
}

//@―---------------------------------------------------------------------------
//! @brief      プログラムの前提条件を定義する
//! 
//! @details    式がfalseである場合エラーログを出力しプログラムを停止する。
//! @note       アサートは内部ロジックの前提条件を定義するために使用します。
//!             APIの使用者の入力が誤っている場合はエラーログや例外出力によって
//!             回復可能なエラーハンドリングをしてください。
//! @param expr 式
//! @param format ログフォーマット
//@―---------------------------------------------------------------------------
#define OB_ASSERT(expr,format,...)			_internal_OB_ASSERT_BASE(expr,format,__VA_ARGS__)
//! @copydoc OB_ABORT
#define OB_ASSERT_EXPR(expr)				OB_ASSERT(expr,#expr)

//@―---------------------------------------------------------------------------
//! @brief      プログラムを中断する。
//! 
//! @details    エラーログを出力しプログラムを停止する。
//! @param format ログフォーマット
//@―---------------------------------------------------------------------------
#define OB_ABORT(format,...)				OB_ASSERT(false,format,__VA_ARGS__)


//============================================
// 典型アサーション
//============================================

//@―---------------------------------------------------------------------------
//! @brief      OutOfRangeの検出マクロ
//! 
//! @details    min<=value<=max でない場合エラーログを出力しプログラムを停止する。
//@―---------------------------------------------------------------------------
#define OB_ASSERT_RANGE(value, minVal, maxVal)		            OB_ASSERT(minVal <= value && value <= maxVal,"範囲外アクセス[{},{}) value = {}]",minVal,maxVal,value)


//@―---------------------------------------------------------------------------
//! @brief      到達不能コードをマークするためのマクロ
//!
//! @details    式が呼び出された場合、エラーログを出力しプログラムを停止する。
//@―---------------------------------------------------------------------------
#define OB_UNREACHABLE()                                        OB_ABORT("到達不能コード")


//@―---------------------------------------------------------------------------
//! @brief      未実装の機能をマークする
//! 
//! @details    式が呼び出された場合、Warningログを出力する。
//@―---------------------------------------------------------------------------
#define OB_NOTIMPLEMENTED()                                     OB_ABORT("未実装の機能")


//============================================
// 無効化
//============================================
//! @cond
#ifndef OB_ENABLE_REQUIRE
#undef OB_ASSERT_EXPR
#define OB_ASSERT_EXPR(expr,format,...) /* space */
#endif // OB_DISABLE_REQUIRE

#ifndef OB_ENABLE_ENSURE
#undef OB_ASSERT_EXPR
#define OB_ASSERT_EXPR(expr,format,...)  /* space */
#endif // OB_DISABLE_ENSURE
//! @endcond