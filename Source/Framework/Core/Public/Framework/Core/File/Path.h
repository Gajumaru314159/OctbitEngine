//***********************************************************
//! @file
//! @brief		ファイル説明
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <filesystem>
#include <Framework/Core/String/String.h>
#include <Framework/Core/String/Format.h>
#include <Framework/Core/Misc/YesNo.h>

namespace ob::core {
	
	DEFINE_YES_NO(WithDot);

	//@―---------------------------------------------------------------------------
	//! @brief		ファイルシステムのパスを表すクラス
	//! @details	このクラス自体はファイルシステムを操作しません。
	//!				操作する場合は File や Directory を使用してください。
	//!				このクラス内では暗黙的に以下の処理が行われます。
	//!				* ディレクトリ区切り文字を/に統一
	//@―---------------------------------------------------------------------------
	class Path {
	public:

		//@―---------------------------------------------------------------------------
		//! @brief		複数の文字列を結合してPath文字列に変換する。
		//@―---------------------------------------------------------------------------
		template<class... TArgs>
		static Path Combine(TArgs&&... args) {
			return CombineImpl(Path(args)...);
		}

		//@―---------------------------------------------------------------------------
		//! @brief		カレントディレクトリの絶対パスを取得
		//@―---------------------------------------------------------------------------
		static Path Curren();

		//@―---------------------------------------------------------------------------
		//! @brief		区切り文字を取得
		//@―---------------------------------------------------------------------------
		static Char Separator();

	public:

		//@―---------------------------------------------------------------------------
		//! @brief		空パスを生成
		//@―---------------------------------------------------------------------------
		Path() = default;

		//@―---------------------------------------------------------------------------
		//! @brief		コピーコンストラクタ
		//@―---------------------------------------------------------------------------
		Path(const Path& rhs) = default;

		//@―---------------------------------------------------------------------------
		//! @brief		String初期化可能な型から初期化
		//@―---------------------------------------------------------------------------
		template <class Source>
		Path(const Source& source) { m_string = source; validate(); }

		//@―---------------------------------------------------------------------------
		//! @brief		コピー代入
		//@―---------------------------------------------------------------------------
		Path& operator = (const Path& rhs);

		//@―---------------------------------------------------------------------------
		//! @brief		パス要素を追加
		//! @details	追加するパスが絶対パスの場合追加ではなく置換されます。
		//!				結合時に必要であれば区切り文字を追加/削除します。
		//@―---------------------------------------------------------------------------
		Path& operator /= (const Path& rhs);

		//@―---------------------------------------------------------------------------
		//! @brief		パス要素を追加
		//! @details	追加するパスが絶対パスの場合追加ではなく置換されます。
		//!				結合時に必要であれば区切り文字を追加/削除します。
		//@―---------------------------------------------------------------------------
		Path operator / (const Path& rhs)const;

		//@―---------------------------------------------------------------------------
		//! @brief		クリア
		//@―---------------------------------------------------------------------------
		void clear();

		//@―---------------------------------------------------------------------------
		//! @brief		拡張子を変更
		//! @details	Path("sample.txt").replaceExtension("md");	// sample.md
		//!				Path("sample.txt").replaceExtension(".md"); // sample.md
		//!				空文字列を渡した場合removeExtension()と同じ動作をします。
		//@―---------------------------------------------------------------------------
		Path& replaceExtension(StringView extension);

		//@―---------------------------------------------------------------------------
		//! @brief		ステムを変更
		//! @details	Path("sample.txt").replaceStem("replaced"); // replaced.txt
		//@―---------------------------------------------------------------------------
		Path& replaceStem(StringView stem);

		//@―---------------------------------------------------------------------------
		//! @brief		ファイル名を変更
		//! @details	Path("sample.txt").replaceBaseName("replaced.md"); // replaced.md
		//!				空文字列を渡した場合removeFileName()と同じ動作をします。
		//@―---------------------------------------------------------------------------
		Path& replaceFileName(StringView fileName);

		//@―---------------------------------------------------------------------------
		//! @brief		拡張子を削除
		//! @details	Path("sample.txt").removeExtension();		// sample
		//!				Path("sample.txt.zip").removeExtension();	// sample.txt
		//@―---------------------------------------------------------------------------
		Path& removeExtension();

		//@―---------------------------------------------------------------------------
		//! @brief		ファイル名を削除
		//! @details	Path("dir/sample.txt").removeFileName();// dir/
		//!				Path("dir/sample").removeFileName();	// dir/
		//!				Path("dir/sub/").removeFileName();		// dir/sub
		//@―---------------------------------------------------------------------------
		Path& removeFileName();

		//@―---------------------------------------------------------------------------
		//! @brief		内部文字列にアクセス
		//! @details	内部文字列はパスとして使用できる状態を保証するために読み取り専用です。
		//@―---------------------------------------------------------------------------
		const String& string()const;

		//@―---------------------------------------------------------------------------
		//! @brief		空パスか
		//@―---------------------------------------------------------------------------
		bool empty()const;

		//@―---------------------------------------------------------------------------
		//! @brief		パスが絶対パスか
		//! @details	Windowsの場合、ドライブ名か//から始まる場合trueを返します。
		//!				UNIX系の場合、/から始まる場合trueを返します。
		//@―---------------------------------------------------------------------------
		bool isAbsolute()const;

		//@―---------------------------------------------------------------------------
		//! @brief		パスが相対パスか
		//! @details	絶対パスではない場合trueを返します。
		//!				Windowsの場合../や./から始まる場合、/から始まりUNCパスではない場合trueを返します。
		//!				UNIX系の場合/から始まらない場合trueを返します。
		//@―---------------------------------------------------------------------------
		bool isRelative()const;

		//@―---------------------------------------------------------------------------
		//! @brief		ルートディレクトリか
		//! @details	Windowsの場合ドライブ名か//から始まるコンピュータ名の場合trueを返します。
		//!				UNIX系の場合/の場合trueを返します。
		//@―---------------------------------------------------------------------------
		bool isRoot()const;

		//@―---------------------------------------------------------------------------
		//! @brief		Directoryか
		//! @details	パスが区切り文字で終わっているかルートの場合trueを返します。
		//@―---------------------------------------------------------------------------
		bool isDirectory()const;

		//@―---------------------------------------------------------------------------
		//! @brief		指定した拡張子を持つか
		//! @details	extに拡張子を指定した場合は対象の拡張子を持つか判定します。
		//!				.は省略可能です。
		//@―---------------------------------------------------------------------------
		bool hasExtension(StringView ext = "")const;

		//@―---------------------------------------------------------------------------
		//! @brief		ファイル名を取得します。
		//! @details	Path("dir/sample.txt").fileName();	// sample.txt
		//!				Path("dir/sample").fileName();		// sample
		//!				Path("dir/sub/").fileName();		// 
		//!				Path("C:").fileName();				// 
		//@―---------------------------------------------------------------------------
		StringView fileName()const;

		//@―---------------------------------------------------------------------------
		//! @brief		拡張子を除いたファイル名を取得します。
		//! @details	Path("C:/dir/sample.txt").stem();	// sample
		//@―---------------------------------------------------------------------------
		StringView stem()const;

		//@―---------------------------------------------------------------------------
		//! @brief		拡張子を取得します。
		//! @details	Path("dir/sample.txt").extension();				// txt
		//!				Path("dir/sample.txt").extension(WithDot::Yes);	// .txt
		//!				Path("dir/sample").extension();					//
		//@―---------------------------------------------------------------------------
		StringView extension(WithDot withDot = WithDot::No)const;

		//@―---------------------------------------------------------------------------
		//! @brief		親ディレクトリまでのパスを取得します。
		//! @details	パスが相対パスの場合自身のコピーを返します。
		//!				Path("C:/dir/sample/").parent();	// C:/dir/
		//!				Path("C:/dir/sample").parent();		// C:/dir/
		//!				Path("dir/sample").parent();		// dir/sample.txt
		//@―---------------------------------------------------------------------------
		Path parent()const;

	private:
		
		void validate();

	private:

		template<class... TArgs>
		static Path CombineImpl(TArgs&&... args) {
			return args + ...;
		}

	private:

		String m_string;

	};

}


//===============================================================
// フォーマット
//===============================================================
//! @cond
template <> struct fmt::formatter<ob::core::Path, ob::core::Char> {
	template<typename ParseContext>
	constexpr auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {
		return ctx.end();
	}

	template<typename FormatContext>
	auto format(const ob::core::Path& path, FormatContext& ctx) -> decltype(ctx.out()) {
		return format_to(ctx.out(), TC("{}"), path.string());
	}
};
//! @endcond