//***********************************************************
//! @file
//! @brief		ヒープ基底クラス
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Core/Base/Fwd.hpp>

#include <Core/System/Thread/CriticalSection.hpp>

namespace ob
{

    //! @brief システムのデフォルトアライメント
#define DEFAULT_ALIGNMENT __STDCPP_DEFAULT_NEW_ALIGNMENT__


    //-----------------------------------------------------------
    //! @brief メモリアロケータの基底クラス
    //-----------------------------------------------------------
    class OB_API Heap
    {
    public:

        using HeapPtr = Heap*;

    protected:

        //-----------------------------------------------------------
        //! @brief アロケートされたメモリの情報
        //-----------------------------------------------------------
        struct Header
        {
            Heap* heap;	                //!< 確保元のメモリアロケータ
            Size size;				    //!< 割り当てサイズ
            Size adjustment;			//!< アラインメント調整量
            u32 signature;			    //!< シグネチャ(メモリ破壊チェック用)

            void Set(Heap* heap, Size size, Size adjustment);   //!< 構造体のセット

        };

    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================
        Heap();				                                                //!< コンストラクタ
        virtual	~Heap() {}				                                    //!< デストラクタ


        //===============================================================
        //  メモリ確保 /解放
        //===============================================================
        void* Allocate(Size size, Size alignment = DEFAULT_ALIGNMENT);      // メモリ確保
        void Deallocate(void* ptr);                                         // メモリ開放


        //===============================================================
        //  ゲッター / セッター
        //===============================================================
        void            SetName(const Char* pName);                         // 名前を設定
        const Char* GetName()const;                      	                // 名前を取得

        HeapPtr         GetParentHeap()const;                               // 確保元の親ヒープ取得

        //===============================================================
        //  仮想関数
        //===============================================================
        virtual void	Clear() = 0;                                        // 内部アロケート情報のクリア
        virtual void	Destroy() = 0;                                      // アロケータの破棄

        virtual Size	GetHeapSize()		const = 0;                      // アロケータのヒープサイズを取得
        virtual Size	GetFreeHeapSize()	const = 0;                      // アロケータの使用可能なヒープサイズを取得
        virtual b32		IsValid()const = 0;                                 // 利用可能な状態かどうか

    protected:

        virtual void* AllocateImpl(Size size) = 0;                          // 内部メモリ確保
        virtual void	DeallocateImpl(void* ptr) = 0;                      // 内部メモリ開放

    private:

        void SetSignature(void* ptr);                                       // チェック用署名の書き込み
        b32 CheckSignature(void* ptr)const;                                 // 署名が正しいかチェック

    protected:

        CriticalSection	m_criticalSection;      //!< クリティカルセクション
        Heap* m_parentHeap;                     //!< 確保元の親ヒープ
        const Char* m_pName;                    //!< ヒープ名のポインタ

        OB_DISALLOW_COPY(Heap);
    };






    //===============================================================
    // インライン関数
    //===============================================================

    //-----------------------------------------------------------
    // @brief デフォルトコンストラクタ
    //-----------------------------------------------------------
    inline Heap::Heap()
        : m_criticalSection()
        , m_parentHeap(nullptr)
        , m_pName(nullptr)
    {}


    //-----------------------------------------------------------
    //! @brief 名前を設定
    //-----------------------------------------------------------
    inline void  Heap::SetName(const Char* pName) {
        m_pName = pName;
    }
    //-----------------------------------------------------------
    //! @brief 名前を取得
    //-----------------------------------------------------------
    inline const Char* Heap::GetName()const {
        return m_pName;
    }


    //-----------------------------------------------------------
    //! @brief 確保元の親ヒープ取得
    //-----------------------------------------------------------
    inline Heap* Heap::GetParentHeap()const {
        return m_parentHeap;
    }



    //-----------------------------------------------------------
    //! @brief          内部メモリ確保
    //! 
    //! @param size     確保するメモリ容量
    //! @return         割り当てられたメモリのポインタ
    //-----------------------------------------------------------


    //-----------------------------------------------------------
    //! @brief          内部メモリ開放
    //! 
    //! @param ptr      解放するポインタ
    //-----------------------------------------------------------

}// namespace ob