//***********************************************************
//! @file
//! @brief		カラー(R8G8B8A8)
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Core/Base/Fwd.hpp>
#include <Core/Graphic/Color.hpp>

namespace ob
{

    //-----------------------------------------------------------
    //! @brief		32ビット形式でRGBAカラーを表現するクラス
    //! 
    //! @details	各色要素は、0〜255の範囲の u8 型で表現されます。アルファ(a)は透過度を表し、0で完全な透明、255で完全な不透明を表します。
    //-----------------------------------------------------------
    struct OB_API Color32
    {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================
        Color32();                                              // 白で初期化
        Color32(s32 r_, s32 g_, s32 b_, s32 a_ = 255);          // 各要素を指定して初期化
        Color32(s32 grey_, s32 a_ = 255);                       // 輝度とアルファ値を指定して初期化
        explicit Color32(const Color& another);                 // ColorU8 を変換して初期化
        explicit Color32(const Vec3& another);                  // Vec3 を変換して初期化(アルファは1.0に設定)
        explicit Color32(const Vec4& another);                  // Vec4 を変換して初期化


        //===============================================================
        //  オペレータ
        //===============================================================
        Color32 operator + (const Color32& another) const;      // 加算
        Color32 operator - (const Color32& another) const;      // 減算
        Color32& operator += (const Color32& another);          // 加算代入
        Color32& operator -= (const Color32& another);          // 減算代入


        //===============================================================
        //  セッター
        //===============================================================
        void Set(s32 r_, s32 g_, s32 b_, s32 a_ = 255);         // 色成分を指定
        void Set(s32 grey_, s32 a_ = 255);                      // 色成分を輝度で指定


        //===============================================================
        //  ゲッター
        //===============================================================
        u8 GetMin()const;
        u8 GetMax()const;


        //===============================================================
        //  変換
        //===============================================================
        u32 ToCode(ColorCodeFormat format= ColorCodeFormat::DEFAULT)const;    //色をカラーコードに変換

    public:

        static const Color32 black;		//!< Color(0,0,0,255)
        static const Color32 blue;		//!< Color(0,0,255,255)
        static const Color32 clear;		//!< Color(0,0,0,0)
        static const Color32 cyan;		//!< Color(0,255,255,255)
        static const Color32 green;		//!< Color(0,255,0,255)
        static const Color32 grey;		//!< Color(0.5,0.5,0.5,255)
        static const Color32 magenta;	//!< Color(255,0,255,255)
        static const Color32 red;		//!< Color(255,0,0,255)
        static const Color32 white;		//!< Color(255,255,255,255)
        static const Color32 yellow;	//!< Color(255,235,4,255)

    public:

        union
        {
            struct
            {
                u8 r;       //!< 赤成分
                u8 g;       //!< 緑成分
                u8 b;       //!< 青成分
                u8 a;       //!< アルファ成分
            };
            u8 data[4];     //!< 色成分
            u32 code;       //!< カラーコード
        };

    };






    //=======================================================================
    // インライン
    //=======================================================================

    //-----------------------------------------------------------
    //! @brief			コンストラクタ
    //! @details		色を白(255,255,255,255)で初期化します。
    //-----------------------------------------------------------
    inline Color32::Color32()
    {
        Set(1, 1, 1, 1);
    }


    //-----------------------------------------------------------
    //! @brief			コンストラクタ
    //! @details		各色成分を指定して初期化します。
    //! @param r_		赤成分
    //! @param g_		緑成分
    //! @param b_		青成分
    //! @param a_		アルファ
    //-----------------------------------------------------------
    inline Color32::Color32(s32 r_, s32 g_, s32 b_, s32 a_)
    {
        Set(r_, g_, b_, a_);
    }


    //-----------------------------------------------------------
    //! @brief			コンストラクタ
    //! @details		色成分を輝度で指定します。
    //! @param grey_	輝度
    //! @param a_		アルファ
    //-----------------------------------------------------------
    inline Color32::Color32(s32 grey_, s32 a_)
    {
        Set(grey_, grey_, grey_, a_);
    }


    //-----------------------------------------------------------
    //! @brief			加算演算子
    //-----------------------------------------------------------
    inline Color32 Color32::operator + (const Color32& another) const
    {
        return Color32(*this)+=another;
    }


    //-----------------------------------------------------------
    //! @brief			減算演算子
    //-----------------------------------------------------------
    inline Color32 Color32::operator - (const Color32& another) const
    {
        return Color32(*this) -= another;
    }


    //-----------------------------------------------------------
    //! @brief			加算代入演算子
    //-----------------------------------------------------------
    inline Color32& Color32::operator += (const Color32& another)
    {
        Set(r + another.r, g + another.g, b + another.b,a);
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief			減算代入演算子
    //-----------------------------------------------------------
    inline Color32& Color32::operator -= (const Color32& another)
    {
        Set(r - another.r, g - another.g, b - another.b, a);
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief		色成分を指定
    //! @param r_	赤成分
    //! @param g_	緑成分
    //! @param b_	青成分
    //! @param a_	アルファ
    //-----------------------------------------------------------
    inline void Color32::Set(s32 r_, s32 g_, s32 b_, s32 a_)
    {
        r = (u8)OB_CLAMP(r_,0,255);
        g = (u8)OB_CLAMP(g_,0, 255);
        b = (u8)OB_CLAMP(b_,0, 255);
        a = (u8)OB_CLAMP(a_,0, 255);
    }


    //-----------------------------------------------------------
    //! @brief			色成分を輝度で指定
    //! @param grey_	輝度
    //! @param a_		アルファ
    //-----------------------------------------------------------
    inline void Color32::Set(s32 grey_, s32 a_)
    {
        Set(grey_, grey_, grey_, a_);
    }


    //-----------------------------------------------------------
    // @brief      RGBのうち最小の値を取得
    //-----------------------------------------------------------
    inline u8 Color32::GetMin()const
    {
        return OB_MIN(OB_MIN(r, g), b);
    }


    //-----------------------------------------------------------
    // @brief      RGBのうち最大の値を取得
    //-----------------------------------------------------------
    inline u8 Color32::GetMax()const
    {
        return OB_MAX(OB_MAX(r, g), b);
    }

}// namespcae ob