//***********************************************************
//! @file
//! @brief		ボックス構造体
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Core/Base/Fwd.hpp>

#include <Core/Math/Vector/include.hpp>

namespace ob
{

    //-----------------------------------------------------------
    //! @brief      ボックス構造体(Axis-Alined Box)
    //! 
    //! @details    ボックスは内部的に中心座標とサイズで管理される。
    //-----------------------------------------------------------
    struct OB_API Box
    {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================
        Box();                                                      // デフォルトコンストラクタ
        Box(const Vec3& center, const Vec3& size = Vec3::zero);     // コンストラクタ(引数指定)
        Box(const Vec3* points, Size count);                        // コンストラクタ(点群指定)


        //===============================================================
        //  オペレータ
        //===============================================================
        bool operator==(const Box& other)const;                     // 比較演算子
        Box  operator+(const Vec3& point)const;                     // 加算演算子(合成)
        Box& operator+=(const Vec3& point);                         // 加算代入演算子(合成)


        //===============================================================
        //  セッター
        //===============================================================
        void Reset();                                               // 構造体の初期化
        void SetStartEnd(const Vec3& start, const Vec3& end);       // 2点を指定して Box を設定


        //===============================================================
        //  ゲッター
        //===============================================================
        Vec3 GetStart()const;                                       // ボックスの起点となる頂点を取得
        Vec3 GetEnd()const;                                         // GetStart() と対角となる頂点を取得


        //===============================================================
        //  判定
        //===============================================================
        b32 IsEmpty()const;                                              // サイズが0以下であるか

    public:


    public:

        Vec3    center;     //!< ボックスの中心座標
        Vec3    size;       //!< ボックスのサイズ

    };






    //===============================================================
    // インライン関数
    //===============================================================

    //-----------------------------------------------------------
    //! @brief      デフォルトコンストラクタ
    //-----------------------------------------------------------
    inline Box::Box()
    {
        Reset();
    }


    //-----------------------------------------------------------
    //! @brief      コンストラクタ(引数指定)
    //-----------------------------------------------------------
    inline Box::Box(const Vec3& size, const Vec3& center)
        : center(center)
        , size(Vec3::Abs(size))
    {}


    //-----------------------------------------------------------
    //! @brief      比較演算子
    //-----------------------------------------------------------
    bool Box::operator==(const Box& other)const
    {
        return (center == other.center) && (size == other.size);
    }


    //-----------------------------------------------------------
    //! @brief          加算演算子
    //! 
    //! @details        ポイントを含むようにボックスを拡大する
    //! @param point    ポイント
    //-----------------------------------------------------------
    inline Box Box::operator+(const Vec3& point)const
    {
        return Box(*this) += point;
    }


    //-----------------------------------------------------------
    //! @brief          加算演算子
    //! 
    //! @details        ポイントを含むようにボックスを拡大する
    //! @param point    ポイント
    //-----------------------------------------------------------
    inline Box& Box::operator+=(const Vec3& point)
    {
        Vec3 min = center - size * 0.5f;
        Vec3 max = center + size * 0.5f;

        min = Vec3::Min(min, point);
        max = Vec3::Min(max, point);

        center = (min + max) * 0.5f;
        size = max - min;

        return *this;
    }


    //-----------------------------------------------------------
    //! @brief      構造体の初期化
    //! 
    //! @detail     center と size を0に初期化する
    //-----------------------------------------------------------
    void Box::Reset()
    {
        center.SetZero();
        size.SetZero();
    }


    //-----------------------------------------------------------
    //! @brief      2点を指定して Box を設定
    //-----------------------------------------------------------
    inline void Box::SetStartEnd(const Vec3& start, const Vec3& end)
    {
        center = (start + end) * 0.5f;
        size = Vec3::Abs(start - end);
    }


    //-----------------------------------------------------------
    //! @brief      ボックスの起点となる頂点を取得
    //! 
    //! @see        GetEnd()
    //-----------------------------------------------------------
    inline Vec3 Box::GetStart()const
    {
        return size + center * 0.5f;
    }


    //-----------------------------------------------------------
    //! @brief      GetStart() と対角となる頂点を取得
    //! 
    //! @see        GetStart()
    //-----------------------------------------------------------
    inline Vec3 Box::GetEnd()const
    {
        return size - center * 0.5f;
    }


    //-----------------------------------------------------------
    //! @brief      サイズが0以下であるか
    //-----------------------------------------------------------
    inline b32 Box::IsEmpty()const
    {
        return size.IsZero();
    }

}// namespcae ob