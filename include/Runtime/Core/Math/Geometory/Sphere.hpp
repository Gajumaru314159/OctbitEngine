//***********************************************************
//! @file
//! @brief		スフィア構造体
//! @author		Gajumaru
//***********************************************************
#pragma once

#include <Core/Math/Vector/include.hpp>

namespace ob
{

    //-----------------------------------------------------------
    //! @brief スフィア構造体
    //-----------------------------------------------------------
    struct Sphere
    {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================
        Sphere();                                       // デフォルトコンストラクタ
        Sphere(const Vec3& center, f32 radius);         // コンストラクタ(引数指定)


        //===============================================================
        //  オペレータ
        //===============================================================
        bool operator==(const Sphere& other)const;      // 等価演算子
        bool operator!=(const Sphere& other)const;      // 否等価演算子
        Sphere  operator+(const Vec3& point)const;      // 加算演算子(合成)
        Sphere& operator+=(const Vec3& point);          // 加算代入演算子(合成)


        //===============================================================
        //  セッター
        //===============================================================
        void Reset();                                   // 構造体の初期化


    public:

        Vec3    center;
        f32     radius;

    };






    //===============================================================
    // インライン関数
    //===============================================================

    //-----------------------------------------------------------
    //! @brief デフォルトコンストラクタ
    //-----------------------------------------------------------
    inline Sphere::Sphere()
    {
        Reset();
    }


    //-----------------------------------------------------------
    //! @brief コンストラクタ(引数指定)
    //-----------------------------------------------------------
    inline Sphere::Sphere(const Vec3& center, f32 radius):center(center),radius(radius){}


    //-----------------------------------------------------------
    //! @brief 等価演算子
    //-----------------------------------------------------------
    inline bool Sphere::operator==(const Sphere& other)const
    {
        return center == other.center && Mathf::Approximately(radius, other.radius);
    }


    //-----------------------------------------------------------
    //! @brief 否等価演算子
    //-----------------------------------------------------------
    inline bool Sphere::operator!=(const Sphere& other)const
    {
        return  !(operator==(other));
    }


    //-----------------------------------------------------------
    //! @brief 構造体の初期化
    //-----------------------------------------------------------
    inline void Sphere::Reset()
    {
        center.SetZero();
        radius = 0.5f;
    }

}// namespcae ob