//***********************************************************
//! @file
//! @brief 整数四次元ベクトル
//! @author Gajumaru
//***********************************************************
#pragma once
#include <Core/Base/Fwd.hpp>

#include <Core/Math/Mathf.hpp>


/*
namespace ob
{

    struct Vec4;

    //-----------------------------------------------------------
    //! @brief 二次元ベクトル
    //-----------------------------------------------------------
    struct OB_API Vec4Int
    {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================
        Vec4Int();
        Vec4Int(s32 scalar);
        Vec4Int(s32 _x, s32 _y, s32 _z, s32 _w);


        //===============================================================
        //  オペレータ
        //===============================================================
        Vec4Int& operator = (const Vec4Int& v);
        bool operator == (const Vec4Int& v) const;
        bool operator != (const Vec4Int& v) const;
        Vec4Int operator + (const Vec4Int& v) const;
        Vec4Int operator - (const Vec4Int& v) const;
        Vec4Int operator * (s32 scalar) const;
        Vec4Int operator * (const Vec4Int& v) const;
        Vec4Int operator / (s32 scalar) const;
        Vec4Int operator / (const Vec4Int& v) const;
        Vec4Int operator - () const;
        friend Vec4Int operator * (s32 scalar, const Vec4Int& v);
        friend Vec4Int operator / (s32 scalar, const Vec4Int& v);
        Vec4Int& operator += (const Vec4Int& v);
        Vec4Int& operator -= (const Vec4Int& v);
        Vec4Int& operator *= (s32 f);
        Vec4Int& operator /= (s32 f);
        operator Vec4 ()const;


        //===============================================================
        //  セッター
        //===============================================================
        void Set(s32 x, s32 y, s32 z, s32 w);
        void Set(const Vec4Int& v);
        void SetAll(s32 scalar);
        void SetZero();


        //===============================================================
        //  判定
        //===============================================================
        B32 IsZero();

    public:

        union
        {
            struct
            {
                s32 x;      //!< ベクトルのx成分
                s32 y;      //!< ベクトルのy成分
                s32 z;      //!< ベクトルのz成分
                s32 w;      //!< ベクトルのw成分
            };
            s32 data[4];    //!< ベクトルの成分
        };

    };






    //===============================================================
    // インライン関数
    //===============================================================

    //-----------------------------------------------------------
    //! @brief デフォルトコンストラクタ
    //! @details 0ベクトルで初期化する。
    //-----------------------------------------------------------
    inline Vec4Int::Vec4Int()
    {
        SetZero();
    }


    //-----------------------------------------------------------
    //! @brief デフォルトコンストラクタ
    //! @details 0ベクトルで初期化する。
    //-----------------------------------------------------------
    inline Vec4Int::Vec4Int(s32 scalar)
    {
        SetAll(scalar);
    }


    //-----------------------------------------------------------
    //! @brief コンストラクタ
    //-----------------------------------------------------------
    inline Vec4Int::Vec4Int(s32 _x, s32 _y, s32 _z, s32 _w)
    {
        Set(_x, _y, _z, _w);
    }


    //-----------------------------------------------------------
    //! @brief 代入演算子
    //-----------------------------------------------------------
    inline Vec4Int& Vec4Int::operator = (const Vec4Int& v)
    {
        x = v.x;
        y = v.y;
        z = v.z;
        w = v.w;
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief 等価演算子 
    //-----------------------------------------------------------
    inline bool Vec4Int::operator == (const Vec4Int& v) const
    {
        return x == v.x && y == v.y && z == v.z && w == v.w;
    }


    //-----------------------------------------------------------
    //! @brief 否等価演算子
    //-----------------------------------------------------------
    inline bool Vec4Int::operator != (const Vec4Int& v) const
    {
        return !(operator==(v));
    }


    //-----------------------------------------------------------
    //! @brief 加算演算子
    //-----------------------------------------------------------
    inline Vec4Int Vec4Int::operator + (const Vec4Int& v) const
    {
        return Vec4Int(*this) += v;
    }


    //-----------------------------------------------------------
    //! @brief 減算演算子
    //-----------------------------------------------------------
    inline Vec4Int Vec4Int::operator - (const Vec4Int& v) const
    {
        return Vec4Int(*this) -= v;
    }


    //-----------------------------------------------------------
    //! @brief 乗算演算子
    //-----------------------------------------------------------
    inline Vec4Int Vec4Int::operator * (s32 scalar) const
    {
        return Vec4Int(*this) *= scalar;
    }


    //-----------------------------------------------------------
    //! @brief 乗算演算子
    //-----------------------------------------------------------
    inline Vec4Int Vec4Int::operator * (const Vec4Int& v) const
    {
        return Vec4Int(*this) * v;
    }


    //-----------------------------------------------------------
    //! @brief 除算演算子
    //-----------------------------------------------------------
    inline Vec4Int Vec4Int::operator / (s32 scalar) const
    {
        return Vec4Int(*this) / scalar;
    }


    //-----------------------------------------------------------
    //! @brief 除算演算子
    //-----------------------------------------------------------
    inline Vec4Int Vec4Int::operator / (const Vec4Int& v) const
    {
        return Vec4Int(*this) / v;
    }


    //-----------------------------------------------------------
    //! @brief 単項マイナス演算子
    //-----------------------------------------------------------
    inline Vec4Int Vec4Int::operator - () const
    {
        return Vec4Int(-x, -y, -z, -w);
    }


    //-----------------------------------------------------------
    //! @brief 加算代入演算子
    //-----------------------------------------------------------
    inline Vec4Int& Vec4Int::operator += (const Vec4Int& v)
    {
        x += v.x;
        y += v.y;
        z += v.z;
        w += v.w;
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief 減算代入演算子 
    //-----------------------------------------------------------
    inline Vec4Int& Vec4Int::operator -= (const Vec4Int& v)
    {
        x -= v.x;
        y -= v.y;
        z -= v.z;
        w -= v.w;
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief 乗算代入演算子 
    //-----------------------------------------------------------
    inline Vec4Int& Vec4Int::operator *= (s32 scalar)
    {
        x *= scalar;
        y *= scalar;
        z *= scalar;
        w *= scalar;
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief 除算代入演算子 
    //-----------------------------------------------------------
    inline Vec4Int& Vec4Int::operator /= (s32 scalar)
    {
        x /= scalar;
        y /= scalar;
        z /= scalar;
        w /= scalar;
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief 要素の設定
    //-----------------------------------------------------------
    inline void Vec4Int::Set(s32 x, s32 y, s32 z, s32 w)
    {
        this->x = x;
        this->y = y;
        this->z = z;
        this->w = w;
    }


    //-----------------------------------------------------------
    //! @brief 要素の設定
    //-----------------------------------------------------------
    inline void Vec4Int::Set(const Vec4Int& v)
    {
        Set(v.x, v.y, v.z, v.w);
    }


    //-----------------------------------------------------------
    //! @brief 全ての要素を同じ値で設定
    //-----------------------------------------------------------
    inline void Vec4Int::SetAll(s32 scalar)
    {
        Set(scalar, scalar, scalar, scalar);
    }


    //-----------------------------------------------------------
    //! @brief 要素をすべて0に設定
    //-----------------------------------------------------------
    inline void Vec4Int::SetZero()
    {
        SetAll(0);
    }


    //-----------------------------------------------------------
    //! @brief 要素をすべて0に設定
    //-----------------------------------------------------------
    inline B32 Vec4Int::IsZero()
    {
        return x == 0 && y == 0 && z == 0 && w == 0;
    }
}
*/