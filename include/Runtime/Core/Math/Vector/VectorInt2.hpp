//***********************************************************
//! @file
//! @brief 整数二次元ベクトル
//! @author Gajumaru
//***********************************************************
#pragma once
#include <Core/Base/Fwd.hpp>

#include <Core/Math/Mathf.hpp>

/*

namespace ob
{

    struct Vec2;

    //-----------------------------------------------------------
    //! @brief 二次元ベクトル
    //-----------------------------------------------------------
    struct OB_API Vec2Int
    {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================
        Vec2Int();                                              // コンストラクタ(ゼロ初期化)
        Vec2Int(s32 _x, s32 _y);                                // コンストラクタ(要素指定)


        //===============================================================
        //  オペレータ
        //===============================================================
        bool operator == (const Vec2Int& v) const;              // 等価演算子
        bool operator != (const Vec2Int& v) const;              // 否等価演算子
        Vec2Int operator + (const Vec2Int& v) const;            // 加算演算子
        Vec2Int operator - (const Vec2Int& v) const;            
        Vec2Int operator * (s32 f) const;
        Vec2Int operator * (const Vec2Int& v) const;
        Vec2Int operator / (s32 f) const;
        Vec2Int operator / (const Vec2Int& v) const;
        Vec2Int operator - () const;
        friend Vec2Int operator * (s32 scalar, const Vec2Int& v);
        friend Vec2Int operator / (s32 scalar, const Vec2Int& v);
        Vec2Int& operator += (const Vec2Int& v);
        Vec2Int& operator += (s32 scalar);
        Vec2Int& operator -= (const Vec2Int& v);
        Vec2Int& operator -= (s32 scalar);
        Vec2Int& operator *= (const Vec2Int& v);
        Vec2Int& operator *= (s32 scalar);
        Vec2Int& operator /= (const Vec2Int& v);
        Vec2Int& operator /= (s32 scalar);
        operator Vec2 ()const;


        //===============================================================
        //  セッター
        //===============================================================
        void Set(s32 x, s32 y);
        void SetZero();


        //===============================================================
        //  判定
        //===============================================================
        B32 IsZero();

    public:

        union
        {
            struct
            {
                s32 x;      //!< ベクトルのx成分
                s32 y;      //!< ベクトルのy成分
            };
            s32 data[2];    //!< ベクトルの成分
        };

    };






    //===============================================================
    // インライン関数
    //===============================================================

    //-----------------------------------------------------------
    //! @brief デフォルトコンストラクタ
    //! @details 0ベクトルで初期化する。
    //-----------------------------------------------------------
    inline Vec2Int::Vec2Int() :Vec2Int(0, 0) {}


    //-----------------------------------------------------------
    //! @brief コンストラクタ
    //-----------------------------------------------------------
    inline Vec2Int::Vec2Int(s32 _x, s32 _y) : x(_x), y(_y) {}


    //-----------------------------------------------------------
    //! @brief 等価演算子 
    //-----------------------------------------------------------
    inline bool Vec2Int::operator == (const Vec2Int& v) const
    {
        return x == v.x && y == v.y;
    }


    //-----------------------------------------------------------
    //! @brief 否等価演算子
    //-----------------------------------------------------------
    inline bool Vec2Int::operator != (const Vec2Int& v) const
    {
        return !(operator==(v));
    }


    //-----------------------------------------------------------
    //! @brief 加算演算子
    //-----------------------------------------------------------
    inline Vec2Int Vec2Int::operator + (const Vec2Int& v) const
    {
        return Vec2Int(*this) += v;
    }


    //-----------------------------------------------------------
    //! @brief 減算演算子
    //-----------------------------------------------------------
    inline Vec2Int Vec2Int::operator - (const Vec2Int& v) const
    {
        return Vec2Int(*this) -= v;
    }


    //-----------------------------------------------------------
    //! @brief 乗算演算子
    //-----------------------------------------------------------
    inline Vec2Int Vec2Int::operator * (s32 f) const
    {
        return Vec2Int(*this) *= f;
    }


    //-----------------------------------------------------------
    //! @brief 乗算演算子
    //-----------------------------------------------------------
    inline Vec2Int Vec2Int::operator * (const Vec2Int& v) const
    {
        return Vec2Int(*this) *= v;
    }


    //-----------------------------------------------------------
    //! @brief 除算演算子
    //-----------------------------------------------------------
    inline Vec2Int Vec2Int::operator / (s32 f) const
    {
        return Vec2Int(*this) /= f;
    }


    //-----------------------------------------------------------
    //! @brief 除算演算子
    //-----------------------------------------------------------
    inline Vec2Int Vec2Int::operator / (const Vec2Int& v) const
    {
        return Vec2Int(*this) /= v;
    }


    //-----------------------------------------------------------
    //! @brief 加算代入演算子
    //-----------------------------------------------------------
    inline Vec2Int& Vec2Int::operator += (const Vec2Int& v)
    {
        x += v.x;
        y += v.y;
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief 加算代入演算子(スカラー)
    //-----------------------------------------------------------
    inline Vec2Int& Vec2Int::operator += (s32 scalar)
    {
        x += scalar;
        y += scalar;
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief 減算代入演算子 
    //-----------------------------------------------------------
    inline Vec2Int& Vec2Int::operator -= (const Vec2Int& v)
    {
        x -= v.x;
        y -= v.y;
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief 減算代入演算子(スカラー)
    //-----------------------------------------------------------
    inline Vec2Int& Vec2Int::operator -= (s32 scalar)
    {
        x -= scalar;
        y -= scalar;
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief 乗算代入演算子 
    //-----------------------------------------------------------
    inline Vec2Int& Vec2Int::operator *= (const Vec2Int& v)
    {
        x *=v.x;
        y *= v.x;
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief 乗算代入演算子(スカラー)
    //-----------------------------------------------------------
    inline Vec2Int& Vec2Int::operator *= (s32 f)
    {
        x *= f;
        y *= f;
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief 除算代入演算子 
    //-----------------------------------------------------------
    inline Vec2Int& Vec2Int::operator /= (const Vec2Int& v)
    {
        x /= v.x;
        y /= v.x;
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief 除算代入演算子(スカラー)
    //-----------------------------------------------------------
    inline Vec2Int& Vec2Int::operator /= (s32 f)
    {
        x /= f;
        y /= f;
        return *this;
    }


    //-----------------------------------------------------------
    //! @brief 単項マイナス演算子
    //-----------------------------------------------------------
    inline Vec2Int Vec2Int::operator - () const
    {
        return Vec2Int(-x, -y);
    }


    //-----------------------------------------------------------
    //! @brief 要素の設定
    //-----------------------------------------------------------
    inline void Vec2Int::Set(s32 x, s32 y)
    {
        this->x = x;
        this->y = y;
    }


    //-----------------------------------------------------------
    //! @brief 要素をすべて0に設定
    //-----------------------------------------------------------
    inline void Vec2Int::SetZero()
    {
        Set(0, 0);
    }


    //-----------------------------------------------------------
    //! @brief 要素をすべて0に設定
    //-----------------------------------------------------------
    inline B32 Vec2Int::IsZero()
    {
        return x == 0 && y == 0;
    }
}
*/