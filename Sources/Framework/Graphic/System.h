//***********************************************************
//! @file
//! @brief		グラフィック・システム
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Graphic/Type/GraphicAPI.h>
#include <Framework/Graphic/Device.h>

namespace ob::graphic {

    //@―---------------------------------------------------------------------------
    //! @brief  説明
    //@―---------------------------------------------------------------------------
    class System :public Singleton<System> {
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ
        //! 
        //! @details    プラットフォームにより使用できないAPIがあります。
        //!             使用できるプラットフォームは GraphicAPI を参照してください。
        //! @param api  使用するグラフィックAPIタイプ
        //@―---------------------------------------------------------------------------
        System(GraphicAPI api);

        //@―---------------------------------------------------------------------------
        //! @brief      デストラクタ
        //@―---------------------------------------------------------------------------
        ~System();

        //@―---------------------------------------------------------------------------
        //! @brief  スワップチェーンの生成
        //@―---------------------------------------------------------------------------
        Ref<Swapchain> createSwapchain(const SwapchainDesc& desc);

        //@―---------------------------------------------------------------------------
        //! @brief  コマンドリストの生成
        //@―---------------------------------------------------------------------------
        Ref<CommandList> createCommandList(CommandListType type);

    protected:

        // SwapChain
        // CommandList
        // RenderPass
        // Pipeline
        // VertexLayout
        // Buffer
        // VertexBuffer
        // IndexBuffer
        // Texture2D
        // Texture3D
        // RenderTexture
        // DepthBuffer
        // SamplerState
        // ShaderPss

        // onFlushCommandList

    private:

        std::unique_ptr<Device> m_device;

    };

}// namespcae ob::graphic