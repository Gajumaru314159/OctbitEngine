//***********************************************************
//! @file
//! @brief		シェーダ
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Graphic/Utility/GraphicObjectHolder.h>
#include <Framework/Graphic/Types/ShaderStage.h>

//===============================================================
// クラス定義
//===============================================================
namespace ob::core{
    class Blob;
}

//===============================================================
// クラス定義
//===============================================================
namespace ob::graphic {

    //@―---------------------------------------------------------------------------
    //! @brief      シェーダ
    //@―---------------------------------------------------------------------------
    class Shader {
        friend class Device;
    public:

        //@―---------------------------------------------------------------------------
        //! @brief      シェーダのエントリ関数名を取得
        //! 
        //! @details    取得できる関数名は以下の通りです。
        //!             | ステージ     | エントリ名 |
        //!             |--------------|------------|
        //!             | Vertex       | VS_Main    |
        //!             | Hull         | HS_Main    |
        //!             | Domain       | DS_Main    |
        //!             | Geometry     | GS_Main    |
        //!             | Pixel        | PS_Main    |
        //!             | Compute      | CS_Main    |
        //!             | Task         | TS_Main    |
        //!             | Mesh         | MS_Main    |
        //!             | RayGen       | RGS_Main   |
        //!             | AnyHit       | AHS_Main   |
        //!             | ClosestHit   | CHS_Main   |
        //!             | Miss         | MS_Main    |
        //!             | Intersection | IS_Main    |
        //!             | Callable     | CS_Main    |
        //!             | Amplification| AS_Main    |
        //!             | 無効値       | 空白文字列 |
        //@―---------------------------------------------------------------------------
        static const char* getEntryName(ShaderStage stage);

    protected:

        Shader() = default;

    protected:

        class IShader* m_pImpl=nullptr;
    };

    //@―---------------------------------------------------------------------------
    //! @brief      頂点シェーダ
    //@―---------------------------------------------------------------------------
    class VertexShader:public Shader {
        OB_DEFINE_GRAPHIC_OBJECT_HOLDER_OVERRIDE(VertexShader);
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //@―---------------------------------------------------------------------------
        VertexShader();


        //@―---------------------------------------------------------------------------
        //! @brief          コンストラクタ
        //! 
        //! @param code     シェーダコード
        //! @param name     オブジェクト名
        //@―---------------------------------------------------------------------------
        VertexShader(const String& code, StringView name = TC("VertexShader"));


        //@―---------------------------------------------------------------------------
        //! @brief          コンストラクタ
        //! 
        //! @param binary   シェーダ・バイナリ
        //! @param name     オブジェクト名
        //@―---------------------------------------------------------------------------
        VertexShader(const Blob& binary, StringView name = TC("VertexShader"));

    };


    //@―---------------------------------------------------------------------------
    //! @brief      シェーダ
    //@―---------------------------------------------------------------------------
    class PixelShader :public Shader {
        OB_DEFINE_GRAPHIC_OBJECT_HOLDER_OVERRIDE(PixelShader);
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //@―---------------------------------------------------------------------------
        PixelShader();


        //@―---------------------------------------------------------------------------
        //! @brief          コンストラクタ
        //! 
        //! @param code     シェーダコード
        //! @param name     オブジェクト名
        //@―---------------------------------------------------------------------------
        PixelShader(const String& code, StringView name = TC("PixelShader"));


        //@―---------------------------------------------------------------------------
        //! @brief          コンストラクタ
        //! 
        //! @param binary   シェーダ・バイナリ
        //! @param name     オブジェクト名
        //@―---------------------------------------------------------------------------
        PixelShader(const Blob& binary, StringView name = TC("PixelShader"));

    };


    //@―---------------------------------------------------------------------------
    //! @brief      ジオメトリ・シェーダ
    //@―---------------------------------------------------------------------------
    class GeometryShader :public Shader {
        OB_DEFINE_GRAPHIC_OBJECT_HOLDER_OVERRIDE(GeometryShader);
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //@―---------------------------------------------------------------------------
        GeometryShader();


        //@―---------------------------------------------------------------------------
        //! @brief          コンストラクタ
        //! 
        //! @param code     シェーダコード
        //! @param name     オブジェクト名
        //@―---------------------------------------------------------------------------
        GeometryShader(const String& code, StringView name = TC("GeometryShader"));


        //@―---------------------------------------------------------------------------
        //! @brief          コンストラクタ
        //! 
        //! @param binary   シェーダ・バイナリ
        //! @param name     オブジェクト名
        //@―---------------------------------------------------------------------------
        GeometryShader(const Blob& binary, StringView name = TC("GeometryShader"));

    };


    //@―---------------------------------------------------------------------------
    //! @brief      ハル・シェーダ
    //@―---------------------------------------------------------------------------
    class HullShader :public Shader {
        OB_DEFINE_GRAPHIC_OBJECT_HOLDER_OVERRIDE(HullShader);
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //@―---------------------------------------------------------------------------
        HullShader();


        //@―---------------------------------------------------------------------------
        //! @brief          コンストラクタ
        //! 
        //! @param code     シェーダコード
        //! @param name     オブジェクト名
        //@―---------------------------------------------------------------------------
        HullShader(const String& code, StringView name = TC("HullShader"));


        //@―---------------------------------------------------------------------------
        //! @brief          コンストラクタ
        //! 
        //! @param binary   シェーダ・バイナリ
        //! @param name     オブジェクト名
        //@―---------------------------------------------------------------------------
        HullShader(const Blob& binary, StringView name = TC("HullShader"));

    };


    //@―---------------------------------------------------------------------------
    //! @brief      ドメイン・シェーダ
    //@―---------------------------------------------------------------------------
    class DomainShader :public Shader {
        OB_DEFINE_GRAPHIC_OBJECT_HOLDER_OVERRIDE(DomainShader);
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //@―---------------------------------------------------------------------------
        DomainShader();


        //@―---------------------------------------------------------------------------
        //! @brief          コンストラクタ
        //! 
        //! @param code     シェーダコード
        //! @param name     オブジェクト名
        //@―---------------------------------------------------------------------------
        DomainShader(const String& code, StringView name = TC("DomainShader"));


        //@―---------------------------------------------------------------------------
        //! @brief          コンストラクタ
        //! 
        //! @param binary   シェーダ・バイナリ
        //! @param name     オブジェクト名
        //@―---------------------------------------------------------------------------
        DomainShader(const Blob& binary, StringView name = TC("DomainShader"));

    };


}// namespace pb::graphic