//***********************************************************
//! @file
//! @brief		グラフィック・オブジェクト・マネージャ
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Graphic/Interface/GraphicObject.h>

namespace ob::graphic {

    //@―---------------------------------------------------------------------------
    //! @brief  グラフィック・オブジェクト・マネージャ
    //@―---------------------------------------------------------------------------
    class GraphicObjectManager {
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //! 
        //! @param frameCount   削除命令後、何フレーム削除を遅らせるか。
        //@―---------------------------------------------------------------------------
        GraphicObjectManager(s32 frameCount);


        //@―---------------------------------------------------------------------------
        //! @brief  デストラクタ
        //@―---------------------------------------------------------------------------
        ~GraphicObjectManager();


        //@―---------------------------------------------------------------------------
        //! @brief  更新
        //@―---------------------------------------------------------------------------
        void update();


        //@―---------------------------------------------------------------------------
        //! @brief  登録
        //@―---------------------------------------------------------------------------
        void registerObject(GraphicObject&);


        //@―---------------------------------------------------------------------------
        //! @brief      解放予約
        //! 
        //! @details    指定フレーム更新後に削除するよう予約します。
        //@―---------------------------------------------------------------------------
        void requestRelease(GraphicObject&);

    private:

        list<GraphicObject*> m_objects;

        using ObjectStack = stack<GraphicObject*>;
        std::vector<ObjectStack>    m_deleteStackList;

        s32 m_index;

    };






    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond



    //! @endcond
}// namespcae ob::graphic