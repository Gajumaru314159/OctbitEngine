//***********************************************************
//! @file
//! @brief		グラフィックパイプライン・インターフェイス
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Graphic/Interface/GraphicObject.h>
#include <Framework/Graphic/Types/GraphicPipelineDesc.h>

//===============================================================
// 前方宣言
//===============================================================
namespace ob::graphic {
}

//===============================================================
// クラス宣言
//===============================================================
namespace ob::graphic {

    //@―---------------------------------------------------------------------------
    //! @brief      グラフィックパイプライン・インターフェイス
    //@―---------------------------------------------------------------------------
    class IGraphicPipeline :public GraphicObject {
    public:

		//@―---------------------------------------------------------------------------
		//! @brief		指定したスロットの定数バッファのサイズを取得
		//! 
		//! @param slot スロット番号
		//! @return		バッファのサイズ
		//@―---------------------------------------------------------------------------
		virtual s32 getConstantBufferSize(const s32 slot)const;


		//@―---------------------------------------------------------------------------
		//! @brief		指定したレジスタのテクスチャの枚数を取得
		//! 
		//! @param slot	スロット番号
		//! @return		枚数
		//@―---------------------------------------------------------------------------
		virtual s32 getTextureNum(const s32 slot)const;


		//@―---------------------------------------------------------------------------
		//! @brief		指定した定数バッファのレジスタがディスクリプタヒープの何番目に割り当てられているかを取得
		//! 
		//! @param slot スロット番号
		//! @return		インデックス
		//! @retval	-1	指定したレジスタがマテリアルに含まれていない
		//@―---------------------------------------------------------------------------
		virtual s32 getConstantBufferIndex(const s32 slot)const;
		

		//@―---------------------------------------------------------------------------
		//! @brief		指定したテクスチャのレジスタがディスクリプタヒープの何番目に割り当てられているかを取得
		//! 
		//! @param slot スロット番号
		//! @return		インデックス
		//! @retval	-1	指定したレジスタがマテリアルに含まれていない
		//@―---------------------------------------------------------------------------
		virtual s32 getTextureIndex(const s32 slot)const;


		//@―---------------------------------------------------------------------------
		//! @brief		シェーダー変数の情報を変数名から取得する
		//! 
		//! @param name	変数名
		//! @return		変数が存在する場合は変数情報を返す。存在しない場合は変数情報のレジスタ番号が-1となる。
		//@―---------------------------------------------------------------------------
		virtual ShaderVariableDesc GetVariableData(const String& name)const;


		//@―---------------------------------------------------------------------------
		//! @brief		シェーダー変数の情報を変数名から取得する
		//! 
		//! @param name	変数名
		//! @return		変数が存在する場合は変数情報を返す。存在しない場合は変数情報のレジスタ番号が-1となる。
		//@―---------------------------------------------------------------------------
		virtual ShaderTextureDesc GetTextureData(const String& name)const;


		/// <summary>
		/// シェーダーに含まれる変数の一覧を取得する
		/// </summary>
		/// <param name="dest">変数データの出力先のリスト</param>
		/// <returns>　０：取得成功\n－１：取得失敗</returns>
		virtual const HashMap<String, ShaderVariableDesc>& GetShaderParamList()const;


		/// <summary>
		/// インスタンスの生成に成功しているか
		/// </summary>
		/// <returns></returns>
		virtual bool IsValid()const { return m_pipelineState != nullptr; }

    
    };

}// namespace pb::graphic