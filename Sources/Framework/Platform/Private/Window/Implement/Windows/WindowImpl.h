//***********************************************************
//! @file
//! @brief		ウィンドウ(Windows)
//! @author		Gajumaru
//***********************************************************
#pragma once
#ifdef OS_WINDOWS
#include "../IWindowImpl.h"

#include <Framework/Foundation/Template/atomic.h>
#include <Framework/Foundation/Template/Event/event_notifier.h>

namespace ob::platform {

    //@―---------------------------------------------------------------------------
    //! @brief  ウィンドウ
    //@―---------------------------------------------------------------------------
    class WindowImpl : public IWindowImpl {
    public:

        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ
        //! 
        //! @details    生成情報を指定してウィンドウを生成する。
        //@―---------------------------------------------------------------------------
        WindowImpl(const WindowCreationDesc& params);
        ~WindowImpl()override;

        //@―---------------------------------------------------------------------------
        //! @brief  ウィンドウを表示する
        //@―---------------------------------------------------------------------------
        void Show() override;


        //@―---------------------------------------------------------------------------
        //! @brief  ウィンドウを閉じる
        //@―---------------------------------------------------------------------------
        void Close() override;


        //@―---------------------------------------------------------------------------
        //! @brief      ウィンドウ・イベントのリスナを追加する
        //@―---------------------------------------------------------------------------
        void AddEventListener(WindowEventType type, const WindowEvent& event)override;


        //@―---------------------------------------------------------------------------
        //! @brief  ウィンドウのタイトルを設定する
        //@―---------------------------------------------------------------------------
        void SetWindowTitle(const String& title) override;


        //@―---------------------------------------------------------------------------
        //! @brief  ウィンドウサイズの取得
        //@―---------------------------------------------------------------------------
        Size GetSize() override;


        //@―---------------------------------------------------------------------------
        //! @brief              スクリーン座標の取得
        //! 
        //! @details            クライアント座標をスクリーン座標に変換して取得する。
        //! @patam clientPoint  クライアント座標
        //! @return             スクリーン座標
        //@―---------------------------------------------------------------------------
        Point GetScreenPoint(const Point& clientPoint)const override;


        //@―---------------------------------------------------------------------------
        //! @brief              クライアント座標の取得
        //! 
        //! @details            スクリーン座標をクライアント座標に変換して取得する。
        //! @patam screenPoint  スクリーン座標  
        //! @return             クライアント座標
        //@―---------------------------------------------------------------------------
        Point GetClientPoint(const Point& screenPoint)const override;


        //@―---------------------------------------------------------------------------
        //! @brief              妥当な状態か
        //! 
        //! @details            システムからウィンドウのクローズ処理が呼ばれた場合false
        //!                     を返すようになります。
        //@―---------------------------------------------------------------------------
        bool IsValid()const noexcept;


    public:

        //@―---------------------------------------------------------------------------
        //! @brief              HWNDの取得
        //@―---------------------------------------------------------------------------
        HWND GetHWND() { return m_hWnd; }

    private:

        //@―---------------------------------------------------------------------------
        //! @brief              ウィンドウごとの Window Proceduer
        //@―---------------------------------------------------------------------------
        LRESULT wndProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam);

        //@―---------------------------------------------------------------------------
        //! @brief              ウィンドウ位置を画面の中央にする
        //@―---------------------------------------------------------------------------
        void abjustLocationCentering();


    public:

        //@―---------------------------------------------------------------------------
        //! @brief              ウィンドウ位置を画面の中央にする
        //@―---------------------------------------------------------------------------
        static LRESULT CALLBACK staticWndProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam);


    private:

        static const TCHAR* WINDOW_CLASS_NAME;      //!< WNDCLASSEXに登録するウィンドウクラス名
        static const TCHAR* PROPERTY_NAME;          //!< HWNDに結びつけるプロパティ名

        static atomic<s32> m_windowNum;             //!< 生成されたウィンドウの数

        HWND    m_hWnd;                             //!< ウィンドウハンドル
        const StringBase<TCHAR> m_className;        //!< ウィンドウクラス名
        s32     m_windowID;                         //!< ウィンドウごとに割り当てられるID

        bool    m_isActive;
        bool    m_isMinimized;


    };

}// namespace ob::platform
#endif // OS_WINDOWS