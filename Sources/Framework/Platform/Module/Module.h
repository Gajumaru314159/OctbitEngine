//***********************************************************
//! @file
//! @brief		モジュール
//! @author		Gajumaru
//***********************************************************
#pragma once
#include "Implement/IModuleLoader.h"

namespace ob::platform {

    //@―---------------------------------------------------------------------------
    //! @brief      モジュール
    //! 
    //! @details    モジュールから生成されたインスタンスはモジュールが解放されるまで
    //!             に解放される必要があります。そのため通常はこのクラスを直接使用せ
    //!             ず ModuleManager から間接的に使用します。
    //!             |Windows    |Linux      |MacOS      |
    //!             |-----------|-----------|-----------|
    //!             |.dll       |.so        |.dylib     |
    //@―---------------------------------------------------------------------------
    class Module {
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief          コンストラクタ
        //! 
        //! @details        動的ライブラリからIModuleを継承するインターフェイスを生成/取得する。
        //!                 動的ライブラリはプラットフォームごとに拡張子が異なるので拡張子は
        //!                 記述しません。
        //! @param filePath 動的ライブラリのファイル名
        //@―---------------------------------------------------------------------------
        Module(const String& filePath);


        //@―---------------------------------------------------------------------------
        //! @brief          インターフェイスを取得
        //@―---------------------------------------------------------------------------
        template<class T>
        auto get()->enable_if_t<is_base_of_v<IModule, T>, T*> {
            if (auto pLoader = m_loader.get()) {
                return static_cast<T*>(pLoader->findModule());
            }
            return nullptr;
        }

    private:

        std::unique_ptr<IModuleLoader>   m_loader;

    };

}// namespace ob::platform