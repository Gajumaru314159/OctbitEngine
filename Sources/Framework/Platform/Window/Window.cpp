//***********************************************************
//! @file
//! @brief		ウィンドウ
//! @author		Gajumaru
//***********************************************************
#pragma once
#include "Window.h"
#include <Framework/Platform/Window/Implement/Windows/WindowImpl.h>
#include <Framework/Platform/Window/Implement/Linux/WindowImpl.h>

namespace ob::platform {

    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ
    //! 
    //! @details    生成情報を指定してウィンドウを生成する。
    //@―---------------------------------------------------------------------------
    Window::Window(const WindowCreationDesc& desc) {
        m_impl = std::make_shared<WindowImpl>(desc);
    }


    //@―---------------------------------------------------------------------------
    //! @brief      でストラクタ
    //! 
    //! @details    生成情報を指定してウィンドウを生成する。
    //@―---------------------------------------------------------------------------
    Window::~Window() {
    }


    //@―---------------------------------------------------------------------------
    //! @brief  ウィンドウを表示する
    //@―---------------------------------------------------------------------------
    void Window::show() {
        OB_REQUIRE(m_impl);
        m_impl->show();
    }


    //@―---------------------------------------------------------------------------
    //! @brief  ウィンドウを閉じる
    //@―---------------------------------------------------------------------------
    void Window::close() {
        OB_REQUIRE(m_impl);
        m_impl->close();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウ・イベントのリスナを追加する
    //@―---------------------------------------------------------------------------
    void Window::addEventListener(WindowEventType type, const WindowEvent& event) {
        OB_REQUIRE(m_impl);
        m_impl->addEventListener(type, event);
    }


    //@―---------------------------------------------------------------------------
    //! @brief  ウィンドウのタイトルを設定する
    //@―---------------------------------------------------------------------------
    void Window::setTitle(StringView title) {
        OB_REQUIRE(m_impl);
        m_impl->setTitle(title);
    }


    //@―---------------------------------------------------------------------------
    //! @brief  ウィンドウのタイトルを設定する
    //@―---------------------------------------------------------------------------
    const String& Window::title()const {
        OB_REQUIRE(m_impl);
        return m_impl->title();
    }
    /*

    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウの状態を取得する
    //@―---------------------------------------------------------------------------
    const WindowState& Window::GetState()const {
        OB_REQUIRE(m_impl);
        return m_impl->GetState();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウの状態を取得する
    //@―---------------------------------------------------------------------------
    const WindowState& Window::GetStyle()const {
        OB_REQUIRE(m_impl);
        return m_impl->GetStyle();
    }
    */

    //@―---------------------------------------------------------------------------
    //! @brief  ウィンドウサイズを取得
    //@―---------------------------------------------------------------------------
    Size Window::size()const {
        OB_REQUIRE(m_impl);
        return m_impl->size();
    }
    

    //@―---------------------------------------------------------------------------
    //! @brief              スクリーン座標を取得
    //! 
    //! @details            クライアント座標をスクリーン座標に変換して取得する。
    //! @patam clientPoint  クライアント座標
    //! @return             スクリーン座標
    //@―---------------------------------------------------------------------------
    Point Window::getScreenPoint(const Point& clientPoint)const {
        OB_REQUIRE(m_impl);
        return m_impl->getScreenPoint(clientPoint);
    }


    //@―---------------------------------------------------------------------------
    //! @brief              クライアント座標を取得
    //! 
    //! @details            スクリーン座標をクライアント座標に変換して取得する。
    //! @patam screenPoint  スクリーン座標  
    //! @return             クライアント座標
    //@―---------------------------------------------------------------------------
    Point Window::getClientPoint(const Point& screenPoint)const {
        OB_REQUIRE(m_impl);
        return m_impl->getClientPoint(screenPoint);
    }


    //@―---------------------------------------------------------------------------
    //! @brief              妥当な状態か
    //@―---------------------------------------------------------------------------
    bool Window::isValid()const noexcept {
        return static_cast<bool>(m_impl);
    }

}// namespace ob::platform