//***********************************************************
//! @file
//! @brief		ウィンドウ
//! @author		Gajumaru
//***********************************************************
#pragma once
#include "Window.h"
#include <Framework/Platform/Window/Implement/Windows/WindowImpl.h>
#include <Framework/Platform/Window/Implement/Linux/WindowImpl.h>

namespace ob::platform {

    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ
    //! 
    //! @details    生成情報を指定してウィンドウを生成する。
    //@―---------------------------------------------------------------------------
    Window::Window(const WindowCreationDesc& desc) {
        m_impl = std::make_shared<WindowImpl>(desc);
    }


    //@―---------------------------------------------------------------------------
    //! @brief      デストラクタ
    //! 
    //! @details    生成情報を指定してウィンドウを生成する。
    //@―---------------------------------------------------------------------------
    Window::~Window() {
    }


    //@―---------------------------------------------------------------------------
    //! @brief  ウィンドウを表示する
    //@―---------------------------------------------------------------------------
    void Window::show() {
        if (!m_impl)return;
        m_impl->show();
    }


    //@―---------------------------------------------------------------------------
    //! @brief  ウィンドウを閉じる
    //@―---------------------------------------------------------------------------
    void Window::close() {
        if (!m_impl)return;
        m_impl->close();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウを現在のモニタの中央に移動する
    //@―---------------------------------------------------------------------------
    void Window::moveToCenter() {
        if (!m_impl)return;
        m_impl->close();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウを最大化する
    //@―---------------------------------------------------------------------------
    void Window::maximize() {
        if (!m_impl)return;
        m_impl->maximize();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウを最小化する
    //@―---------------------------------------------------------------------------
    void Window::minimize() {
        if (!m_impl)return;
        m_impl->minimize();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウサイズを元のサイズに戻す
    //@―---------------------------------------------------------------------------
    void Window::restoreSize() {
        if (!m_impl)return;
        m_impl->restoreSize();
    }


    //@―---------------------------------------------------------------------------
    //! @brief              妥当な状態か
    //@―---------------------------------------------------------------------------
    bool Window::isValid()const noexcept {
        return static_cast<bool>(m_impl);
    }


    //@―---------------------------------------------------------------------------
    //! @brief      メインウィンドウか
    //@―---------------------------------------------------------------------------
    bool Window::isMainWindow()const {
        if (!m_impl)return false;
        return m_impl->isMainWindow();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウの状態を取得する
    //@―---------------------------------------------------------------------------
    WindowStates Window::getState()const {
        OB_CHECK_ASSERT_EXPR(m_impl);
        return m_impl->getState();
    }


    //@―---------------------------------------------------------------------------
    //! @brief              スクリーン座標を取得
    //! 
    //! @details            クライアント座標をスクリーン座標に変換して取得する。
    //! @patam clientPoint  クライアント座標
    //! @return             スクリーン座標
    //@―---------------------------------------------------------------------------
    Point Window::getScreenPoint(const Point& clientPoint)const {
        if (!m_impl)return { 0, 0 };
        return m_impl->getScreenPoint(clientPoint);
    }


    //@―---------------------------------------------------------------------------
    //! @brief              クライアント座標を取得
    //! 
    //! @details            スクリーン座標をクライアント座標に変換して取得する。
    //! @patam screenPoint  スクリーン座標  
    //! @return             クライアント座標
    //@―---------------------------------------------------------------------------
    Point Window::getClientPoint(const Point& screenPoint)const {
        if (!m_impl)return { 0, 0 };
        return m_impl->getClientPoint(screenPoint);
    }


    //@―---------------------------------------------------------------------------
    //! @brief  ウィンドウのタイトルを設定する
    //@―---------------------------------------------------------------------------
    void Window::setTitle(StringView title) {
        if (!m_impl)return;
        m_impl->setTitle(title);
    }


    //@―---------------------------------------------------------------------------
    //! @brief  ウィンドウのタイトルを設定する
    //@―---------------------------------------------------------------------------
    const String& Window::getTitle()const {
        OB_CHECK_ASSERT_EXPR(m_impl);
        return m_impl->getTitle();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウの位置を設定する
    //@―---------------------------------------------------------------------------
    void Window::setPosition(Point position) {
        if (!m_impl)return;
        m_impl->setPosition(position);
    }


    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウの位置を取得する
    //@―---------------------------------------------------------------------------
    Point Window::getPosition()const noexcept {
        if (!m_impl)return {0,0};
        return m_impl->getPosition();
    }

    //@―---------------------------------------------------------------------------
    //! @brief  ウィンドウサイズを取得
    //@―---------------------------------------------------------------------------
    Size Window::getSize()const {
        OB_CHECK_ASSERT_EXPR(m_impl);
        return m_impl->getSize();
    }

    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウ・モードを取得する
    //@―---------------------------------------------------------------------------
    WindowMode Window::getMode()const {
        OB_CHECK_ASSERT_EXPR(m_impl);
        return m_impl->getMode();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウ・モードを設定する
    //@―---------------------------------------------------------------------------
    void Window::setMode(WindowMode mode) {
        if (!m_impl)return ;
        return m_impl->setMode(mode);
    }


    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウのスタイルを取得する
    //@―---------------------------------------------------------------------------
    WindowStyle Window::getStyle()const {
        OB_CHECK_ASSERT_EXPR(m_impl);
        return m_impl->getStyle();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウのスタイルを設定する
    //@―---------------------------------------------------------------------------
    void Window::setStyle(WindowStyle style) {
        if (!m_impl)return;
        return m_impl->setStyle(style);
    }


    //@―---------------------------------------------------------------------------
    //! @brief      ウィンドウ・イベントのリスナを追加する
    //@―---------------------------------------------------------------------------
    void Window::addEventListener(WindowEventType type, const WindowEvent& e) {
        if (!m_impl)return;
        m_impl->addEventListener(type, e);
    }

}// namespace ob::platform