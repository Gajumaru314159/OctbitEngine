//***********************************************************
//! @file
//! @brief		矩形構造体
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Core/Math/Vector/include.h>

namespace ob {

    //@―---------------------------------------------------------------------------
    //! @brief      矩形構造体
    //! 
    //! @details    矩形は内部的に中心座標とサイズで管理されます。
    //! @note       size が負の数の時は未定義動作です。
    //@―---------------------------------------------------------------------------
    struct OB_API Rect {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief      デフォルトコンストラクタ(初期化なし)
        //@―---------------------------------------------------------------------------
        Rect() noexcept;
        

        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ( ゼロ初期化 )
        //@―---------------------------------------------------------------------------
        explicit Rect(EForceInit) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ(サイズ/中心指定)
        //@―---------------------------------------------------------------------------
        Rect(const Vec2& center, const Vec2& size = Vec2::zero) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ(点群指定)
        //! 
        //! @details    指定された点群をすべて含むボックスを構築する
        //@―---------------------------------------------------------------------------
        Rect(const gsl::span<Vec2>& points) noexcept;


        //===============================================================
        //  オペレータ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief      比較演算子
        //@―---------------------------------------------------------------------------
        bool operator==(const Rect& other)const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief          ポイントを含むように矩形を拡大する
        //! 
        //! @param point    ポイント
        //@―---------------------------------------------------------------------------
        Rect operator+(const Vec2& point)const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief          ポイントを含むように矩形を拡大する
        //! 
        //! @param point    ポイント
        //@―---------------------------------------------------------------------------
        Rect& operator+=(const Vec2& point) noexcept;


        //===============================================================
        //  セッター
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief      構造体の初期化
        //@―---------------------------------------------------------------------------
        void reset() noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      2点を指定して Rect を設定
        //@―---------------------------------------------------------------------------
        void setStartEnd(const Vec2& start, const Vec2& end) noexcept;


        //===============================================================
        //  ゲッター
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief      矩形の起点となる頂点を取得
        //! 
        //! @see        getEnd()
        //@―---------------------------------------------------------------------------
        Vec2 start()const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      getStart() と対角となる頂点を取得
        //! 
        //! @see        getStart()
        //@―---------------------------------------------------------------------------
        Vec2 end()const noexcept;


        //===============================================================
        //  判定
        //===============================================================
        
        //@―---------------------------------------------------------------------------
        //! @brief      サイズが0以下であるか
        //@―---------------------------------------------------------------------------
        bool isEmpty()const noexcept;


    public:

        //@―---------------------------------------------------------------------------
        //! @brief      2点を指定して Rect を作成する
        //@―---------------------------------------------------------------------------
        static Rect Create(const Vec2& start, const Vec2& end) noexcept;


    public:

        Vec2 center;        //!< 中心座標
        Vec2 size;          //!< 矩形サイズ

    };






    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond

    //@―---------------------------------------------------------------------------
    //! @brief      デフォルトコンストラクタ
    //@―---------------------------------------------------------------------------
    inline Rect::Rect() noexcept {
    }


    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ( ゼロ初期化 )
    //@―---------------------------------------------------------------------------
    inline Rect::Rect(EForceInit) noexcept{
        reset();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ(サイズ/中心指定)
    //@―---------------------------------------------------------------------------
    inline Rect::Rect(const Vec2& size, const Vec2& center) noexcept
        : center(center)
        , size(Vec2::Abs(size)) {
    }


    //@―---------------------------------------------------------------------------
    //! @brief      比較演算子
    //@―---------------------------------------------------------------------------
    inline bool Rect::operator==(const Rect& other)const noexcept {
        return (center == other.center) && (size == other.size);
    }


    //@―---------------------------------------------------------------------------
    //! @brief          ポイントを含むように矩形を拡大する
    //! 
    //! @param point    ポイント
    //@―---------------------------------------------------------------------------
    inline Rect Rect::operator+(const Vec2& point)const noexcept {
        return Rect(*this) += point;
    }


    //@―---------------------------------------------------------------------------
    //! @brief          ポイントを含むように矩形を拡大する
    //! 
    //! @param point    ポイント
    //@―---------------------------------------------------------------------------
    inline Rect& Rect::operator+=(const Vec2& point) noexcept {
        Vec2 min = center - size * 0.5f;
        Vec2 max = center + size * 0.5f;

        min = Vec2::Min(min, point);
        max = Vec2::Min(max, point);

        center = (min + max) * 0.5f;
        size = max - min;

        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief      構造体のゼロ初期化
    //@―---------------------------------------------------------------------------
    inline void Rect::reset() noexcept {
        center.setZero();
        size.setZero();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      2点を指定して Box を設定
    //@―---------------------------------------------------------------------------
    inline void Rect::setStartEnd(const Vec2& start, const Vec2& end) noexcept {
        center = (start + end) * 0.5f;
        size = Vec2::Abs(start - end);
    }


    //@―---------------------------------------------------------------------------
    //! @brief      矩形の起点となる頂点を取得
    //! 
    //! @see        GetEnd()
    //@―---------------------------------------------------------------------------
    inline Vec2 Rect::start()const noexcept {
        return size + center * 0.5f;
    }


    //@―---------------------------------------------------------------------------
    //! @brief      GetStart() と対角となる頂点を取得
    //! 
    //! @see        GetStart()
    //@―---------------------------------------------------------------------------
    inline Vec2 Rect::end()const noexcept {
        return size - center * 0.5f;
    }


    //@―---------------------------------------------------------------------------
    //! @brief      サイズが0以下であるか
    //@―---------------------------------------------------------------------------
    inline bool Rect::isEmpty()const noexcept {
        return size.isZero();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      2点を指定して Rect を作成する
    //@―---------------------------------------------------------------------------
    inline Rect Rect::Create(const Vec2& start, const Vec2& end) noexcept {
        return Rect(start - end, (start + end) * 0.5f);
    }


    //! @endcond
}// namespcae ob