//***********************************************************
//! @file
//! @brief		スフィア構造体
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Core/Math/Vector/include.h>

namespace ob {

    //@―---------------------------------------------------------------------------
    //! @brief  スフィア構造体
    //! 
    //! @note   radius が負の数の時は未定義動作です。
    //@―---------------------------------------------------------------------------
    struct OB_API Sphere {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief デフォルトコンストラクタ
        //@―---------------------------------------------------------------------------
        Sphere() noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief コンストラクタ(ゼロ初期化)
        //@―---------------------------------------------------------------------------
        explicit Sphere(EForceInit) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief コンストラクタ(中心/サイズ指定)
        //@―---------------------------------------------------------------------------
        Sphere(const Vec3& center, f32 radius) noexcept;


        //===============================================================
        //  オペレータ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief 等価演算子
        //@―---------------------------------------------------------------------------
        bool operator==(const Sphere& other)const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 否等価演算子
        //@―---------------------------------------------------------------------------
        bool operator!=(const Sphere& other)const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算演算子(合成)
        //@―---------------------------------------------------------------------------
        Sphere  operator+(const Vec3& point)const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算代入演算子(合成)
        //@―---------------------------------------------------------------------------
        Sphere& operator+=(const Vec3& point) noexcept;


        //===============================================================
        //  セッター
        //===============================================================
        
        //@―---------------------------------------------------------------------------
        //! @brief 構造体のゼロ初期化
        //@―---------------------------------------------------------------------------
        void Reset() noexcept;


    public:

        Vec3    center;     //!< 中心座標
        f32     radius;     //!< 半径

    };






    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond

    //@―---------------------------------------------------------------------------
    //! @brief デフォルトコンストラクタ(初期化なし)
    //@―---------------------------------------------------------------------------
    inline Sphere::Sphere() noexcept {}


    //@―---------------------------------------------------------------------------
    //! @brief コンストラクタ(ゼロ初期化)
    //@―---------------------------------------------------------------------------
    inline Sphere::Sphere(EForceInit) noexcept{
        Reset();
    }


    //@―---------------------------------------------------------------------------
    //! @brief コンストラクタ(中心/サイズ指定)
    //@―---------------------------------------------------------------------------
    inline Sphere::Sphere(const Vec3& center, f32 radius) noexcept :center(center), radius(radius) {}


    //@―---------------------------------------------------------------------------
    //! @brief 等価演算子
    //@―---------------------------------------------------------------------------
    inline bool Sphere::operator==(const Sphere& other)const noexcept {
        return center == other.center && Mathf::Approximately(radius, other.radius);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 否等価演算子
    //@―---------------------------------------------------------------------------
    inline bool Sphere::operator!=(const Sphere& other)const noexcept {
        return  !(operator==(other));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 構造体のゼロ初期化
    //@―---------------------------------------------------------------------------
    inline void Sphere::Reset() noexcept {
        center.SetZero();
        radius = 0.5f;
    }

    //! @endcond
}// namespcae ob