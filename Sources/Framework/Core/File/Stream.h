//***********************************************************
//! @file
//! @brief		ストリーム基底型
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Core/CorePrivate.h>
#include <Framework/Core/File/FileTypes.h>

namespace ob::core {

	//@―---------------------------------------------------------------------------
	//! @brief  ストリーム基底型
	//@―---------------------------------------------------------------------------
	class Stream {
	public:

		//@―---------------------------------------------------------------------------
		//! @brief  読み込み可能か
		//@―---------------------------------------------------------------------------
		virtual bool canRead()const = 0;


		//@―---------------------------------------------------------------------------
		//! @brief  書き込み可能か
		//@―---------------------------------------------------------------------------
		virtual bool canWrite()const = 0;


		//@―---------------------------------------------------------------------------
		//! @brief  サイズ取得
		//@―---------------------------------------------------------------------------
		virtual size_t size()const = 0;


		//@―---------------------------------------------------------------------------
		//! @brief  シーク位置取得
		//@―---------------------------------------------------------------------------
		virtual size_t position()const = 0;


		//@―---------------------------------------------------------------------------
		//! @brief  読み込み
		//! 
		//! @param buffer 　 読み込みデータ格納先のポインタ
		//! @param byteCount 読み込むバイト数
		//! @return 読み込んだデータ個数※エラー時やファイルの末端に達したときは byteCount 以下の値が返される
		//@―---------------------------------------------------------------------------
		virtual size_t read(void* buffer, size_t byteCount) = 0;


		//@―---------------------------------------------------------------------------
		//! @brief  書き込み
		//! 
		//! @param buffer 　 書き込むデータ格納先のポインタ
		//! @param byteCount 書き込むバイト数
		//! @return 読み込んだデータ個数※エラー時やファイルの末端に達したときは byteCount 以下の値が返される
		//@―---------------------------------------------------------------------------
		virtual size_t write(void* buffer, size_t byteCount) = 0;


		//@―---------------------------------------------------------------------------
		//! @brief  シーク
		//! 
		//! @param offset 　 基準からの移動量
		//! @param origin	 基準位置
		//! @return 0 のとき成功
		//@―---------------------------------------------------------------------------
		virtual size_t seek(offset_t offset, SeekOrigin origin) = 0;


		//@―---------------------------------------------------------------------------
		//! @brief  バッファのフラッシュ
		//! 
		//! @details 書き込み中のデータを即時反映させる。
		//@―---------------------------------------------------------------------------
		virtual void flush() = 0;

	protected:
		virtual ~Stream()=default;

	};






	//===============================================================
	// インライン関数
	//===============================================================
	//! @cond



	//! @endcond
}// namespcae ob