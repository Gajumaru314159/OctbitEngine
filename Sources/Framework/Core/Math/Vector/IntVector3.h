//***********************************************************
//! @file
//! @brief 整数三次元ベクトル
//! @author Gajumaru
//***********************************************************
#pragma once

namespace ob::core {

    struct Vec3;

    //@―---------------------------------------------------------------------------
    //! @brief 整数三次元ベクトル
    //@―---------------------------------------------------------------------------
    struct OB_API IntVec3 {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief      デフォルトコンストラクタ(初期化なし)
        //@―---------------------------------------------------------------------------
        IntVec3()noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ(ゼロ初期化)
        //@―---------------------------------------------------------------------------
        explicit IntVec3(EForceInit)noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ(すべての要素を同じ値で初期化)
        //@―---------------------------------------------------------------------------
        explicit IntVec3(s32 scalar)noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ(要素を指定して初期化)
        //@―---------------------------------------------------------------------------
        IntVec3(s32 x, s32 y, s32 z)noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ( Vec3 初期化)
        //@―---------------------------------------------------------------------------
        explicit IntVec3(const Vec3& vec)noexcept;


        //===============================================================
        //  オペレータ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief      等価演算子
        //@―---------------------------------------------------------------------------
        bool operator == (const IntVec3& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 否等価演算子
        //@―---------------------------------------------------------------------------
        bool operator != (const IntVec3& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算演算子
        //@―---------------------------------------------------------------------------
        IntVec3 operator + (const IntVec3& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec3 operator + (s32 scalar) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 減算演算子
        //@―---------------------------------------------------------------------------
        IntVec3 operator - (const IntVec3& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 減算演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec3 operator - (s32 scalar) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 乗算演算子
        //@―---------------------------------------------------------------------------
        IntVec3 operator * (const IntVec3& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 乗算演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec3 operator * (s32 scalar) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 除算演算子
        //@―---------------------------------------------------------------------------
        IntVec3 operator / (const IntVec3& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 除算演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec3 operator / (s32 scalar) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算代入演算子
        //@―---------------------------------------------------------------------------
        IntVec3& operator += (const IntVec3& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算代入演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec3& operator += (s32 scalar) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 減算代入演算子 
        //@―---------------------------------------------------------------------------
        IntVec3& operator -= (const IntVec3& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 減算代入演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec3& operator -= (s32 scalar) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 乗算代入演算子 
        //@―---------------------------------------------------------------------------
        IntVec3& operator *= (const IntVec3& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 乗算代入演算子 (スカラー)
        //@―---------------------------------------------------------------------------
        IntVec3& operator *= (s32 scalar) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 除算代入演算子 
        //@―---------------------------------------------------------------------------
        IntVec3& operator /= (const IntVec3& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 除算代入演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec3& operator /= (s32 scalar) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 単項マイナス演算子
        //@―---------------------------------------------------------------------------
        IntVec3 operator - () const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief s32*IntVec3演算子 
        //@―---------------------------------------------------------------------------
        friend IntVec3 operator * (s32 scalar, const IntVec3& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief s32/IntVec3演算子 
        //@―---------------------------------------------------------------------------
        friend IntVec3 operator / (s32 scalar, const IntVec3& v) noexcept;


        //===============================================================
        //  セッター
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief 要素の設定
        //@―---------------------------------------------------------------------------
        void    set(s32 x, s32 y, s32 z) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素の設定
        //@―---------------------------------------------------------------------------
        void    set(const IntVec3& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素を全て0に設定
        //@―---------------------------------------------------------------------------
        void    setZero() noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 全ての要素を同じ値で設定
        //@―---------------------------------------------------------------------------
        void    setAll(s32 scalar) noexcept;


        //===============================================================
        //  ゲッター
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief 要素の最大を取得
        //@―---------------------------------------------------------------------------
        s32     maxComponent() const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素の絶対値の最大を取得
        //@―---------------------------------------------------------------------------
        s32     maxAbsComponent() const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素の最小を取得
        //@―---------------------------------------------------------------------------
        s32     minComponent() const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief Vec3 で取得
        //@―---------------------------------------------------------------------------
        Vec3    toVec3() const noexcept;


        //===============================================================
        //  判定
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief すべての要素が同じ値か判定
        //@―---------------------------------------------------------------------------
        b32     allComponentsEqual()const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief ゼロベクトルか判定
        //@―---------------------------------------------------------------------------
        b32     isZero()const noexcept;


    public:

        //===============================================================
        //  スタティック関数
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief ベクトルの各要素の絶対値からベクトルを作成
        //@―---------------------------------------------------------------------------
        static IntVec3  Abs(const IntVec3& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 内積
        //@―---------------------------------------------------------------------------
        static s32      Dot(const IntVec3& a, const IntVec3& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 外積
        //@―---------------------------------------------------------------------------
        static IntVec3  Cross(const IntVec3& a, const IntVec3& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief  二つのベクトルのマンハッタン距離を計算
        //@―---------------------------------------------------------------------------
        static s32      MDist(const IntVec3& a, const IntVec3& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 二つのベクトルの各要素の大きいほうからベクトルを生成
        //@―---------------------------------------------------------------------------
        static IntVec3  Max(const IntVec3& a, const IntVec3& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 二つのベクトルの各要素の小さいほうからベクトルを生成
        //@―---------------------------------------------------------------------------
        static IntVec3  Min(const IntVec3& a, const IntVec3& b) noexcept;


    public:

        static const IntVec3 zero;    //!< ( 0, 0, 0)
        static const IntVec3 one;     //!< ( 1, 1, 1)

    public:

        s32 x;    //!< ベクトルのX成分
        s32 y;    //!< ベクトルのY成分
        s32 z;    //!< ベクトルのZ成分

    };






    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond

    //@―---------------------------------------------------------------------------
    //! @brief      デフォルトコンストラクタ(初期化なし)
    //@―---------------------------------------------------------------------------
    inline IntVec3::IntVec3() noexcept {
    }


    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ(ゼロ初期化)
    //@―---------------------------------------------------------------------------
    inline IntVec3::IntVec3(EForceInit)noexcept {
        setZero();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ(すべての要素を同じ値で初期化)
    //@―---------------------------------------------------------------------------
    inline IntVec3::IntVec3(s32 scalar) noexcept {
        set(scalar, scalar, scalar);
    }


    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ(要素を指定して初期化)
    //@―---------------------------------------------------------------------------
    inline IntVec3::IntVec3(s32 x, s32 y, s32 z) noexcept {
        set(x, y, z);
    }


    //===============================================================
    //  オペレータ
    //===============================================================


    //@―---------------------------------------------------------------------------
    //! @brief      等価演算子
    //@―---------------------------------------------------------------------------
    inline bool IntVec3::operator == (const IntVec3& v) const noexcept {
        return
            x == v.x &&
            y == v.y &&
            z == v.z;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 否等価演算子
    //@―---------------------------------------------------------------------------
    inline bool IntVec3::operator != (const IntVec3& v) const noexcept {
        return !(operator==(v));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator + (const IntVec3& v) const noexcept {
        return IntVec3(*this) += v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator + (s32 scalar) const noexcept {
        return IntVec3(*this) += scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator - (const IntVec3& v) const noexcept {
        return IntVec3(*this) -= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator - (s32 scalar) const noexcept {
        return IntVec3(*this) -= scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator * (const IntVec3& v) const noexcept {
        return IntVec3(*this) *= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator * (s32 scalar) const noexcept {
        return IntVec3(*this) *= scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator / (const IntVec3& v) const noexcept {
        return IntVec3(*this) /= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator / (s32 scalar) const noexcept {
        return IntVec3(*this) /= scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算代入演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3& IntVec3::operator += (const IntVec3& v) noexcept {
        x += v.x;
        y += v.y;
        z += v.z;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec3& IntVec3::operator += (s32 scalar) noexcept {
        x += scalar;
        y += scalar;
        z += scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算代入演算子 
    //@―---------------------------------------------------------------------------
    inline IntVec3& IntVec3::operator -= (const IntVec3& v) noexcept {
        x -= v.x;
        y -= v.y;
        z -= v.z;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec3& IntVec3::operator -= (s32 scalar) noexcept {
        x -= scalar;
        y -= scalar;
        z -= scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算代入演算子 
    //@―---------------------------------------------------------------------------
    inline IntVec3& IntVec3::operator *= (const IntVec3& v) noexcept {
        x *= v.x;
        y *= v.y;
        z *= v.z;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算代入演算子 (スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec3& IntVec3::operator *= (s32 scalar) noexcept {
        x *= scalar;
        y *= scalar;
        z *= scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算代入演算子 
    //@―---------------------------------------------------------------------------
    inline IntVec3& IntVec3::operator /= (const IntVec3& v) noexcept {
        x /= v.x;
        y /= v.y;
        z /= v.z;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec3& IntVec3::operator /= (s32 scalar) noexcept {
        x /= scalar;
        y /= scalar;
        z /= scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 単項マイナス演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator - () const noexcept {
        return IntVec3(-x, -y, -z);
    }


    //===============================================================
    //  セッター
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief 要素の設定
    //@―---------------------------------------------------------------------------
    inline void IntVec3::set(s32 x, s32 y, s32 z) noexcept {
        this->x = x;
        this->y = y;
        this->z = z;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の設定
    //@―---------------------------------------------------------------------------
    inline void IntVec3::set(const IntVec3& v) noexcept {
        set(v.x, v.y, v.z);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素を全て0に設定
    //@―---------------------------------------------------------------------------
    inline void IntVec3::setZero() noexcept {
        set(0, 0, 0);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 全ての要素を同じ値で設定
    //@―---------------------------------------------------------------------------
    inline void IntVec3::setAll(s32 scalar) noexcept {
        set(scalar, scalar, scalar);
    }


    //===============================================================
    //  ゲッター
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief 要素の最大を取得
    //@―---------------------------------------------------------------------------
    inline s32 IntVec3::maxComponent() const noexcept {
        return  get_max(get_max(x, y), z);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の絶対値の最大を取得
    //@―---------------------------------------------------------------------------
    inline s32 IntVec3::maxAbsComponent() const noexcept {
        return get_max(get_max(abs(x), abs(y)), abs(z));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の最小を取得
    //@―---------------------------------------------------------------------------
    inline s32 IntVec3::minComponent() const noexcept {
        return get_min(get_min(abs(x), abs(y)), abs(z));
    }


    //===============================================================
    //  判定
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief すべての要素が同じ値か判定
    //@―---------------------------------------------------------------------------
    inline b32 IntVec3::allComponentsEqual()const noexcept {
        return x == y && y == z;
    }


    //@―---------------------------------------------------------------------------
    //! @brief ゼロベクトルか判定
    //@―---------------------------------------------------------------------------
    inline b32 IntVec3::isZero()const noexcept {
        return x == 0 && y == 0 && z == 0;
    }


    //===============================================================
    //  スタティック関数
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief ベクトルの各要素の絶対値からベクトルを作成
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::Abs(const IntVec3& v) noexcept {
        return IntVec3(abs(v.x), abs(v.y), abs(v.z));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 内積
    //@―---------------------------------------------------------------------------
    inline s32 IntVec3::Dot(const IntVec3& a, const IntVec3& b) noexcept {
        return a.x * b.x + a.y * b.y + a.z * b.z;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 外積
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::Cross(const IntVec3& a, const IntVec3& b) noexcept {
        return IntVec3(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);
    }


    //@―---------------------------------------------------------------------------
    //! @brief  二つのベクトルのマンハッタン距離を計算
    //@―---------------------------------------------------------------------------
    inline s32 IntVec3::MDist(const IntVec3& a, const IntVec3& b) noexcept {
        return
            abs(a.x - b.x) +
            abs(a.y - b.y) +
            abs(a.z - b.z);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 二つのベクトルの各要素の大きいほうからベクトルを生成
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::Max(const IntVec3& a, const IntVec3& b) noexcept {
        return IntVec3(get_max(a.x, b.x), get_max(a.y, b.y), get_max(a.z, b.z));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 二つのベクトルの各要素の小さいほうからベクトルを生成
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::Min(const IntVec3& a, const IntVec3& b) noexcept {
        return IntVec3(get_min(a.x, b.x), get_min(a.y, b.y), get_min(a.z, b.z));
    }

    //! @endcond
}// namespace ob::core
