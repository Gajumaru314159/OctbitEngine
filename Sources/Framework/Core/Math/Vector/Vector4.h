//***********************************************************
//! @file
//! @brief 四次元ベクトル
//! @author Gajumaru
//***********************************************************
#pragma once
#include <Framework/Core/Math/Mathf.h>

namespace ob::core {

    struct IntVec4;

    //@―---------------------------------------------------------------------------
    //! @brief 四次元ベクトル
    //@―---------------------------------------------------------------------------
    struct OB_API Vec4 {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief      デフォルトコンストラクタ(初期化なし)
        //@―---------------------------------------------------------------------------
        Vec4()noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ(ゼロ初期化)
        //@―---------------------------------------------------------------------------
        explicit Vec4(EForceInit)noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ(すべての要素を同じ値で初期化)
        //@―---------------------------------------------------------------------------
        explicit Vec4(f32 scalar)noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ(要素を指定して初期化)
        //@―---------------------------------------------------------------------------
        Vec4(f32 x, f32 y, f32 z, f32 w)noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ( IntVec4 初期化)
        //@―---------------------------------------------------------------------------
        explicit Vec4(const IntVec4& vec)noexcept;


        //===============================================================
        //  オペレータ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief      等価演算子 
        //! 
        //! @details    2つのベクトルの差が Mathf::TOLERANCE より小さい場合、2つのベクトルは等しいと
        //!             見なされます。
        //@―---------------------------------------------------------------------------
        bool operator == (const Vec4& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 否等価演算子
        //! 
        //! @details    2つのベクトルの差が Mathf::TOLERANCE より大きい場合、2つのベクトルは異なると
        //!             見なされます。
        //@―---------------------------------------------------------------------------
        bool operator != (const Vec4& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算演算子
        //@―---------------------------------------------------------------------------
        Vec4 operator + (const Vec4& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算演算子(スカラー)
        //@―---------------------------------------------------------------------------
        Vec4 operator + (f32 scalar) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 減算演算子
        //@―---------------------------------------------------------------------------
        Vec4 operator - (const Vec4& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 減算演算子(スカラー)
        //@―---------------------------------------------------------------------------
        Vec4 operator - (f32 scalar) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 乗算演算子
        //@―---------------------------------------------------------------------------
        Vec4 operator * (const Vec4& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 乗算演算子(スカラー)
        //@―---------------------------------------------------------------------------
        Vec4 operator * (f32 scalar) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 除算演算子
        //@―---------------------------------------------------------------------------
        Vec4 operator / (const Vec4& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 除算演算子(スカラー)
        //@―---------------------------------------------------------------------------
        Vec4 operator / (f32 scalar) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算代入演算子
        //@―---------------------------------------------------------------------------
        Vec4& operator += (const Vec4& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算代入演算子(スカラー)
        //@―---------------------------------------------------------------------------
        Vec4& operator += (f32 scalar) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 減算代入演算子 
        //@―---------------------------------------------------------------------------
        Vec4& operator -= (const Vec4& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 減算代入演算子(スカラー)
        //@―---------------------------------------------------------------------------
        Vec4& operator -= (f32 scalar) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 乗算代入演算子 
        //@―---------------------------------------------------------------------------
        Vec4& operator *= (const Vec4& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 乗算代入演算子 (スカラー)
        //@―---------------------------------------------------------------------------
        Vec4& operator *= (f32 scalar) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 除算代入演算子 
        //@―---------------------------------------------------------------------------
        Vec4& operator /= (const Vec4& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 除算代入演算子(スカラー)
        //@―---------------------------------------------------------------------------
        Vec4& operator /= (f32 scalar) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 単項マイナス演算子
        //@―---------------------------------------------------------------------------
        Vec4 operator - () const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief f32*Vec4演算子 
        //@―---------------------------------------------------------------------------
        friend Vec4 operator * (f32 scalar, const Vec4& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief f32/Vec4演算子 
        //@―---------------------------------------------------------------------------
        friend Vec4 operator / (f32 scalar, const Vec4& v) noexcept;


        //===============================================================
        //  セッター
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief 要素の設定
        //@―---------------------------------------------------------------------------
        void    set(f32 x, f32 y, f32 z, f32 w) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素の設定
        //@―---------------------------------------------------------------------------
        void    set(const Vec4& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素を全て0に設定
        //@―---------------------------------------------------------------------------
        void    setZero() noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 全ての要素を同じ値で設定
        //@―---------------------------------------------------------------------------
        void    setAll(f32 scalar) noexcept;


        //===============================================================
        //  ゲッター
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief 要素の最大を取得
        //@―---------------------------------------------------------------------------
        f32     maxComponent() const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素の絶対値の最大を取得
        //@―---------------------------------------------------------------------------
        f32     maxAbsComponent() const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素の最小を取得
        //@―---------------------------------------------------------------------------
        f32     minComponent() const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素の絶対値の最小を取得
        //@―---------------------------------------------------------------------------
        f32     minAbsComponent() const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief ベクトルの長さの取得
        //! 
        //! @details 二つのベクトルの長さを比較する場合はsqrMagのほうが高速です。
        //@―---------------------------------------------------------------------------
        f32     length() const;


        //@―---------------------------------------------------------------------------
        //! @brief ベクトルの長さの二乗を取得
        //@―---------------------------------------------------------------------------
        f32     sqrLength() const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief              単位ベクトルの取得
        //! 
        //! @details            0ベクトルの場合は0ベクトルを返す。
        //! @param tolerance    ゼロベクトル判定の誤差の許容誤差
        //@―---------------------------------------------------------------------------
        Vec4    unitVec(f32 tolerance = Mathf::TOLERANCE)const;


        //@―---------------------------------------------------------------------------
        //! @brief              単位ベクトルの取得(ゼロチェックなし)
        //@―---------------------------------------------------------------------------
        Vec4    getUnitVecUnsafe()const;


        //@―---------------------------------------------------------------------------
        //! @brief              方向ベクトルとベクトルの長さの取得
        //! 
        //! @param[out] outDir  方向ベクトルの出力
        //! @param[out] outLen  ベクトルの大きさ
        //@―---------------------------------------------------------------------------
        void    toDirectionAndLength(Vec4& outDir, f32& outLen)const;


        //===========================================================
        //  変換
        //===========================================================

        //@―---------------------------------------------------------------------------
        //! @brief              ベクトルの正規化
        //! 
        //! @details            0ベクトルの場合は何もしない。
        //! @param tolerance    ゼロベクトル判定の誤差の許容誤差
        //@―---------------------------------------------------------------------------
        Vec4& normalize(f32 tolerance = Mathf::TOLERANCE);


        //@―---------------------------------------------------------------------------
        //! @brief              ベクトルの正規化(ゼロチェックなし)
        //@―---------------------------------------------------------------------------
        Vec4& normalizeUnsafe();


        //===============================================================
        //  判定
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief 単位ベクトルか判定
        //@―---------------------------------------------------------------------------
        b32     isUnit(f32 tolerance = Mathf::TOLERANCE)const;


        //@―---------------------------------------------------------------------------
        //! @brief 等価判定(許容誤差指定)
        //! 
        //! @param v            比較対象
        //! @param tolerance    許容誤差
        //@―---------------------------------------------------------------------------
        b32     equals(const Vec4& v, f32 tolerance = Mathf::TOLERANCE)const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief すべての要素が同じ値か判定
        //! 
        //! @param tolerance    許容誤差
        //@―---------------------------------------------------------------------------
        b32     allComponentsEqual(f32 tolerance = Mathf::TOLERANCE)const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief ゼロベクトルか判定
        //@―---------------------------------------------------------------------------
        b32     isZero(f32 tolerance = Mathf::TOLERANCE)const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素にNaNを含むか判定
        //@―---------------------------------------------------------------------------
        b32     isNaN()const;


        //@―---------------------------------------------------------------------------
        //! @brief 要素にInfを含むか判定
        //@―---------------------------------------------------------------------------
        b32     isInf()const;


        //@―---------------------------------------------------------------------------
        //! @brief 要素にNaNまたはInfを含むか判定
        //@―---------------------------------------------------------------------------
        b32     isNaNOrInf()const;

    public:

        //===============================================================
        //  スタティック関数
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief ベクトルの各要素の絶対値からベクトルを作成
        //@―---------------------------------------------------------------------------
        static Vec4 Abs(const Vec4& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 内積
        //@―---------------------------------------------------------------------------
        static f32  Dot(const Vec4& a, const Vec4& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 外積
        //@―---------------------------------------------------------------------------
        static Vec4 Cross(const Vec4& a, const Vec4& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief  二つのベクトルの距離を計算
        //@―---------------------------------------------------------------------------
        static f32  Dist(const Vec4& a, const Vec4& b);


        //@―---------------------------------------------------------------------------
        //! @brief  二つのベクトルの距離の二乗を計算
        //@―---------------------------------------------------------------------------
        static f32  SqrDist(const Vec4& a, const Vec4& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief  二つのベクトルのマンハッタン距離を計算
        //@―---------------------------------------------------------------------------
        static f32  MDist(const Vec4& a, const Vec4& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 二つのベクトルの線形補間
        //! 
        //! @param a    開始ベクトル
        //! @param b    終了ベクトル
        //! @param t    補間係数
        //! @return     t=0のときa、t=1の時bを返す。
        //@―---------------------------------------------------------------------------
        static Vec4 Lerp(const Vec4& a, const Vec4& b, f32 t) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 二つのベクトルの球面補間
        //! 
        //! @param a    開始ベクトル
        //! @param b    終了ベクトル
        //! @param t    補間係数
        //! @return     t=0のときa、t=1の時bを返す。
        //@―---------------------------------------------------------------------------
        static Vec4 Slerp(const Vec4& a, const Vec4& b, f32 t);


        //@―---------------------------------------------------------------------------
        //! @brief 二つのベクトルの各要素の大きいほうからベクトルを生成
        //@―---------------------------------------------------------------------------
        static Vec4 Max(const Vec4& a, const Vec4& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 二つのベクトルの各要素の小さいほうからベクトルを生成
        //@―---------------------------------------------------------------------------
        static Vec4 Min(const Vec4& a, const Vec4& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 二つのベクトルのなす角のコサインを取得
        //@―---------------------------------------------------------------------------
        static f32  CosAngle(const Vec4& a, const Vec4& b);


        //@―---------------------------------------------------------------------------
        //! @brief 二つのベクトルのなす角を取得
        //@―---------------------------------------------------------------------------
        static f32  Angle(const Vec4& a, const Vec4& b);


    public:

        static const Vec4 zero;    //!< ( 0.0f, 0.0f, 0.0f, 0.0f)
        static const Vec4 one;     //!< ( 1.0f, 1.0f, 1.0f, 1.0f)

    public:

        union {
            struct {
                f32 x;    //!< ベクトルのX成分
                f32 y;    //!< ベクトルのY成分
                f32 z;    //!< ベクトルのZ成分
                f32 w;    //!< ベクトルのW成分
            };
            f32 data[4];  //!< ベクトルの成分
        };

    };






    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond

    //@―---------------------------------------------------------------------------
    //! @brief      デフォルトコンストラクタ(初期化なし)
    //@―---------------------------------------------------------------------------
    inline Vec4::Vec4() noexcept {}


    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ(ゼロ初期化)
    //@―---------------------------------------------------------------------------
    inline Vec4::Vec4(EForceInit) noexcept {
        setZero();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ(すべての要素を同じ値で初期化)
    //@―---------------------------------------------------------------------------
    inline Vec4::Vec4(f32 scalar) noexcept {
        set(scalar, scalar, scalar, scalar);
    }


    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ(要素を指定して初期化)
    //@―---------------------------------------------------------------------------
    inline Vec4::Vec4(f32 x, f32 y, f32 z, f32 w) noexcept {
        set(x, y, z, w);
    }


    //===============================================================
    //  オペレータ
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief      等価演算子 
    //! 
    //! @details    2つのベクトルの差が Mathf::TOLERANCE より小さい場合、2つのベクトルは等しいと
    //!             見なされます。
    //@―---------------------------------------------------------------------------
    inline bool Vec4::operator == (const Vec4& v) const noexcept {
        return Mathf::IsNearEquals(x, v.x) &&
            Mathf::IsNearEquals(y, v.y) &&
            Mathf::IsNearEquals(z, v.z) &&
            Mathf::IsNearEquals(w, v.w);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 否等価演算子
    //! 
    //! @details    2つのベクトルの差が Mathf::TOLERANCE より大きい場合、2つのベクトルは異なると
    //!             見なされます。
    //@―---------------------------------------------------------------------------
    inline bool Vec4::operator != (const Vec4& v) const noexcept {
        return !(operator==(v));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算演算子
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::operator + (const Vec4& v) const noexcept {
        return Vec4(*this) += v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::operator + (f32 scalar) const noexcept {
        return Vec4(*this) += scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算演算子
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::operator - (const Vec4& v) const noexcept {
        return Vec4(*this) -= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::operator - (f32 scalar) const noexcept {
        return Vec4(*this) -= scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算演算子
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::operator * (const Vec4& v) const noexcept {
        return Vec4(*this) *= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::operator * (f32 scalar) const noexcept {
        return Vec4(*this) *= scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算演算子
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::operator / (const Vec4& v) const noexcept {
        return Vec4(*this) /= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::operator / (f32 scalar) const noexcept {
        return Vec4(*this) /= scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算代入演算子
    //@―---------------------------------------------------------------------------
    inline Vec4& Vec4::operator += (const Vec4& v) noexcept {
        x += v.x;
        y += v.y;
        z += v.z;
        w += v.w;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline Vec4& Vec4::operator += (f32 scalar) noexcept {
        x += scalar;
        y += scalar;
        z += scalar;
        w += scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算代入演算子 
    //@―---------------------------------------------------------------------------
    inline Vec4& Vec4::operator -= (const Vec4& v) noexcept {
        x -= v.x;
        y -= v.y;
        z -= v.z;
        w -= v.w;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline Vec4& Vec4::operator -= (f32 scalar) noexcept {
        x -= scalar;
        y -= scalar;
        z -= scalar;
        w -= scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算代入演算子 
    //@―---------------------------------------------------------------------------
    inline Vec4& Vec4::operator *= (const Vec4& v) noexcept {
        x *= v.x;
        y *= v.y;
        z *= v.z;
        w *= v.w;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算代入演算子 (スカラー)
    //@―---------------------------------------------------------------------------
    inline Vec4& Vec4::operator *= (f32 scalar) noexcept {
        x *= scalar;
        y *= scalar;
        z *= scalar;
        w *= scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算代入演算子 
    //@―---------------------------------------------------------------------------
    inline Vec4& Vec4::operator /= (const Vec4& v) noexcept {
        x /= v.x;
        y /= v.y;
        z /= v.z;
        w /= v.w;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline Vec4& Vec4::operator /= (f32 scalar) noexcept {
        x /= scalar;
        y /= scalar;
        z /= scalar;
        w /= scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 単項マイナス演算子
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::operator - () const noexcept {
        return Vec4(-x, -y, -z, -w);
    }


    //===============================================================
    //  セッター
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief 要素の設定
    //@―---------------------------------------------------------------------------
    inline void Vec4::set(f32 x, f32 y, f32 z, f32 w) noexcept {
        this->x = x;
        this->y = y;
        this->z = z;
        this->w = w;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の設定
    //@―---------------------------------------------------------------------------
    inline void Vec4::set(const Vec4& v) noexcept {
        set(v.x, v.y, v.z, v.w);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素を全て0に設定
    //@―---------------------------------------------------------------------------
    inline void Vec4::setZero() noexcept {
        set(0.0f, 0.0f, 0.0f, 0.0f);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 全ての要素を同じ値で設定
    //@―---------------------------------------------------------------------------
    inline void Vec4::setAll(f32 scalar) noexcept {
        set(scalar, scalar, scalar, scalar);
    }


    //===============================================================
    //  ゲッター
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief 要素の最大を取得
    //@―---------------------------------------------------------------------------
    inline f32 Vec4::maxComponent() const noexcept {
        return Mathf::Max(x, y, z, w);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の絶対値の最大を取得
    //@―---------------------------------------------------------------------------
    inline f32 Vec4::maxAbsComponent() const noexcept {
        return Mathf::Max(Mathf::Abs(x), Mathf::Abs(y), Mathf::Abs(z), Mathf::Abs(w));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の最小を取得
    //@―---------------------------------------------------------------------------
    inline f32 Vec4::minComponent() const noexcept {
        return Mathf::Min(x, y, z, w);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の絶対値の最小を取得
    //@―---------------------------------------------------------------------------
    inline f32 Vec4::minAbsComponent() const noexcept {
        return Mathf::Min(Mathf::Abs(x), Mathf::Abs(y), Mathf::Abs(z), Mathf::Abs(w));
    }


    //@―---------------------------------------------------------------------------
    //! @brief ベクトルの長さの取得
    //! 
    //! @details 二つのベクトルの長さを比較する場合はSqrMagのほうが高速です。
    //@―---------------------------------------------------------------------------
    inline f32 Vec4::length() const {
        return Mathf::Sqrt(sqrLength());
    }


    //@―---------------------------------------------------------------------------
    //! @brief ベクトルの長さの二乗を取得
    //@―---------------------------------------------------------------------------
    inline f32 Vec4::sqrLength() const noexcept {
        return x * x + y * y + z * z + w * w;
    }


    //@―---------------------------------------------------------------------------
    //! @brief              単位ベクトルの取得
    //! 
    //! @details            0ベクトルの場合は0ベクトルを返す。
    //! @param tolerance    ゼロベクトル判定の誤差の許容誤差
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::unitVec(f32 tolerance)const {
        Vec4 unitVec = *this;
        unitVec.normalize(tolerance);
        return unitVec;
    }


    //@―---------------------------------------------------------------------------
    //! @brief              単位ベクトルの取得(ゼロチェックなし)
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::getUnitVecUnsafe()const {
        Vec4 unitVec = *this;
        unitVec.normalizeUnsafe();
        return unitVec;
    }


    //@―---------------------------------------------------------------------------
    //! @brief              方向ベクトルとベクトルの長さの取得
    //! 
    //! @param[out] outDir  方向ベクトルの出力
    //! @param[out] outLen  ベクトルの大きさ
    //@―---------------------------------------------------------------------------
    inline void Vec4::toDirectionAndLength(Vec4& outDir, f32& outLen)const {
        if (isZero()) {
            outDir.setZero();
            outLen = 0.0f;
            return;
        }
        outLen = sqrLength();
        if (outLen < Mathf::TOLERANCE) {
            outDir = Vec4::zero;
        } else {
            outDir = (*this) / outLen;
        }
    }


    //===========================================================
    //  変換
    //===========================================================

    //@―---------------------------------------------------------------------------
    //! @brief              ベクトルの正規化
    //! 
    //! @details            0ベクトルの場合は何もしない。
    //! @param tolerance    ゼロベクトル判定の誤差の許容誤差
    //@―---------------------------------------------------------------------------
    inline Vec4& Vec4::normalize(f32 tolerance) {
        f32 f = length();
        // 0ベクトルの場合は何もしない
        if (f <= tolerance)return *this;
        this->operator/=(f);
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief              ベクトルの正規化(ゼロチェックなし)
    //@―---------------------------------------------------------------------------
    inline Vec4& Vec4::normalizeUnsafe() {
        f32 f = length();
        this->operator/=(f);
        return *this;
    }


    //===============================================================
    //  判定
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief 単位ベクトルか判定
    //@―---------------------------------------------------------------------------
    inline b32 Vec4::isUnit(f32 tolerance)const {
        const f32 length = sqrLength();
        return Mathf::Abs(length - 1.0f) < tolerance;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 等価判定(許容誤差指定)
    //! 
    //! @param tolerance    許容誤差
    //@―---------------------------------------------------------------------------
    inline b32 Vec4::equals(const Vec4& v, f32 tolerance)const noexcept {
        return
            Mathf::Abs(x - v.x) <= tolerance &&
            Mathf::Abs(y - v.y) <= tolerance &&
            Mathf::Abs(z - v.z) <= tolerance &&
            Mathf::Abs(w - v.w) <= tolerance;
    }


    //@―---------------------------------------------------------------------------
    //! @brief すべての要素が同じ値か判定
    //! 
    //! @param tolerance    許容誤差
    //@―---------------------------------------------------------------------------
    inline b32 Vec4::allComponentsEqual(f32 tolerance)const noexcept {
        if (tolerance < Mathf::Abs(x - y))return false;
        if (tolerance < Mathf::Abs(y - z))return false;
        if (tolerance < Mathf::Abs(z - w))return false;
        if (tolerance < Mathf::Abs(w - x))return false;
        if (tolerance < Mathf::Abs(x - z))return false;
        if (tolerance < Mathf::Abs(y - w))return false;
        return true;
    }


    //@―---------------------------------------------------------------------------
    //! @brief ゼロベクトルか判定
    //@―---------------------------------------------------------------------------
    inline b32 Vec4::isZero(f32 tolerance)const noexcept {
        if (tolerance < Mathf::Abs(x))return false;
        if (tolerance < Mathf::Abs(y))return false;
        if (tolerance < Mathf::Abs(z))return false;
        if (tolerance < Mathf::Abs(w))return false;
        return true;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素にNaNを含むか判定
    //@―---------------------------------------------------------------------------
    inline b32 Vec4::isNaN()const {
        if (Mathf::IsNaN(x))return true;
        if (Mathf::IsNaN(y))return true;
        if (Mathf::IsNaN(z))return true;
        if (Mathf::IsNaN(w))return true;
        return false;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素にInfを含むか判定
    //@―---------------------------------------------------------------------------
    inline b32 Vec4::isInf()const {
        if (Mathf::IsInf(x))return true;
        if (Mathf::IsInf(y))return true;
        if (Mathf::IsInf(z))return true;
        if (Mathf::IsInf(w))return true;
        return false;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素にNaNまたはInfを含むか判定
    //@―---------------------------------------------------------------------------
    inline b32 Vec4::isNaNOrInf()const {
        return isNaN() || isInf();
    }


    //===============================================================
    //  スタティック関数
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief ベクトルの各要素の絶対値からベクトルを作成
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::Abs(const Vec4& v) noexcept {
        return Vec4(Mathf::Abs(v.x), Mathf::Abs(v.y), Mathf::Abs(v.z), Mathf::Abs(v.w));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 内積
    //@―---------------------------------------------------------------------------
    inline f32 Vec4::Dot(const Vec4& a, const Vec4& b) noexcept {
        return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 外積
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::Cross(const Vec4& a, const Vec4& b) noexcept {
        return Vec4(a.y * b.z - a.z * b.y, a.z * b.w - a.w * b.z, a.w * b.x - a.x * b.w, a.x * b.y - a.y * b.x);
    }


    //@―---------------------------------------------------------------------------
    //! @brief  二つのベクトルの距離を計算
    //@―---------------------------------------------------------------------------
    inline f32 Vec4::Dist(const Vec4& a, const Vec4& b) {
        return (b - a).length();
    }


    //@―---------------------------------------------------------------------------
    //! @brief  二つのベクトルの距離の二乗を計算
    //@―---------------------------------------------------------------------------
    inline f32 Vec4::SqrDist(const Vec4& a, const Vec4& b) noexcept {
        return (b - a).sqrLength();
    }


    //@―---------------------------------------------------------------------------
    //! @brief  二つのベクトルのマンハッタン距離を計算
    //@―---------------------------------------------------------------------------
    inline f32 Vec4::MDist(const Vec4& a, const Vec4& b) noexcept {
        return Mathf::Abs(a.x - b.x) + Mathf::Abs(a.y - b.y) + Mathf::Abs(a.z - b.z) + Mathf::Abs(a.w - b.w);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 二つのベクトルの線形補間
    //! 
    //! @param a    開始ベクトル
    //! @param b    終了ベクトル
    //! @param t    補間係数
    //! @return     t=0のときa、t=1の時bを返す。
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::Lerp(const Vec4& a, const Vec4& b, f32 t) noexcept {
        return Vec4(
            a.x + (b.x - a.x) * t,
            a.y + (b.y - a.y) * t,
            a.z + (b.z - a.z) * t,
            a.w + (b.w - a.w) * t
        );
    }


    //@―---------------------------------------------------------------------------
    //! @brief 二つのベクトルの球面補間
    //! 
    //! @param a    開始ベクトル
    //! @param b    終了ベクトル
    //! @param t    補間係数
    //! @return     t=0のときa、t=1の時bを返す。
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::Slerp(const Vec4& a, const Vec4& b, f32 t) {
        f32 al, bl;
        Vec4 an, bn;
        a.toDirectionAndLength(an, al);
        b.toDirectionAndLength(bn, bl);
        f32 angle = Mathf::Acos(Dot(an, bn));
        f32 sinTh = Mathf::Sin(angle);
        f32 ps = Mathf::Sin(angle * (1.0f - t)) * Mathf::Lerp(al, bl, t);
        f32 pe = Mathf::Sin(angle * t) * Mathf::Lerp(al, bl, t);

        return Vec4(
            an.x * ps + bn.x * pe,
            an.y * ps + bn.y * pe,
            an.z * ps + bn.z * pe,
            an.w * ps + bn.w * pe
        );
    }


    //@―---------------------------------------------------------------------------
    //! @brief 二つのベクトルの各要素の大きいほうからベクトルを生成
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::Max(const Vec4& a, const Vec4& b) noexcept {
        return Vec4(Mathf::Max(a.x, b.x), Mathf::Max(a.y, b.y), Mathf::Max(a.z, b.z), Mathf::Max(a.w, b.w));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 二つのベクトルの各要素の小さいほうからベクトルを生成
    //@―---------------------------------------------------------------------------
    inline Vec4 Vec4::Min(const Vec4& a, const Vec4& b) noexcept {
        return Vec4(Mathf::Min(a.x, b.x), Mathf::Min(a.y, b.y), Mathf::Min(a.z, b.z), Mathf::Min(a.w, b.w));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 二つのベクトルのなす角のコサインを取得
    //@―---------------------------------------------------------------------------
    inline f32 Vec4::CosAngle(const Vec4& a, const Vec4& b) {
        return Dot(a.unitVec(), b.unitVec());
    }


    //@―---------------------------------------------------------------------------
    //! @brief 二つのベクトルのなす角を取得
    //@―---------------------------------------------------------------------------
    inline f32 Vec4::Angle(const Vec4& a, const Vec4& b) {
        return Mathf::AcosD(CosAngle(a, b));
    }

    //! @endcond
}// namespace ob::core
