//***********************************************************
//! @file
//! @brief		Pimplユーティリティ
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Core/Template/include.h>

namespace ob::core {

    //@―---------------------------------------------------------------------------
    //! @brief      Pimplユーティリティ
    //! 
    //! @details    unique_ptrからデフォルトコンストラクタ/reset()/release()を削除することでRAIIに対応したPimplを実現する。
    //@―---------------------------------------------------------------------------
    template<class T>
    class Pimpl {
    public:

        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //@―---------------------------------------------------------------------------
        template<typename ...Args>
        Pimpl(Args&&... args) 
            : m_impl(std::make_unique<T>(std::forward<Args>(args)...))
        {}

        //@―---------------------------------------------------------------------------
        //! @brief  ムーブコンストラクタ
        //@―---------------------------------------------------------------------------
        Pimpl(Pimpl && rhs)
            : m_impl(std::move(rhs.m_impl))
        {}

        //@―---------------------------------------------------------------------------
        //! @brief  ムーブ代入演算子
        //@―---------------------------------------------------------------------------
        Pimpl& operator =(Pimpl && rhs){
            m_impl = std::move(rhs.m_impl);
            return *this;
        }

        //@―---------------------------------------------------------------------------
        //! @brief  ポインタアクセス
        //@―---------------------------------------------------------------------------
        T* operator ->() noexcept {
            return m_impl.get();
        }

        //@―---------------------------------------------------------------------------
        //! @brief  ポインタアクセス(const)
        //@―---------------------------------------------------------------------------
        const T* operator ->()const noexcept {
            return m_impl.get();
        }

        //@―---------------------------------------------------------------------------
        //! @brief  ポインタアクセス
        //@―---------------------------------------------------------------------------
        T* get() noexcept {
            return m_impl.get();
        }

        //@―---------------------------------------------------------------------------
        //! @brief  ポインタアクセス(const)
        //@―---------------------------------------------------------------------------
        const T* get()const noexcept {
            return m_impl.get();
        }

    private:

        std::unique_ptr<T> m_impl;

    };

}// namespcae ob