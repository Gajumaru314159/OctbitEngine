//***********************************************************
//! @file
//! @brief		メモリ・アロケータ基底クラス
//! @author		Gajumaru
//***********************************************************
#pragma once

namespace ob {

    //@―---------------------------------------------------------------------------
    //! @brief システムのデフォルトアライメント
    //@―---------------------------------------------------------------------------
#define DEFAULT_ALIGNMENT __STDCPP_DEFAULT_NEW_ALIGNMENT__


    //@―---------------------------------------------------------------------------
    //! @brief      メモリ・アロケータ・インターフェース
    //! 
    //! @details    このインターフェースを経由してメモリの割り当てを行う。@n
    //!             割り当てアルゴリズムは継承クラスを参照してください。
    //@―---------------------------------------------------------------------------
    class OB_API Allocator {
    protected:

        //@―---------------------------------------------------------------------------
        //!< 署名(メモリ破壊チェック用)
        //@―---------------------------------------------------------------------------
        enum {
            MEMORY_SIGNATURE = 0xDEADC0DE,
        };


        //@―---------------------------------------------------------------------------
        //! @brief      ブロック・ヘッダ
        //! 
        //! @details    Allocator から割り当てられたメモリブロックの直前に書き込まれる構造体。
        //@―---------------------------------------------------------------------------
        struct BlockHeader {
            Allocator* pHeap;       //!< 確保元のヒープ
            void* pRaw;             //!< 実際に確保されたポインタ

#if defined(OB_DEBUG)
            s32 timeStamp;
            u32 signature = MEMORY_SIGNATURE;
#endif
        };

    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief                  デストラクタ
        //@―---------------------------------------------------------------------------
        virtual ~Allocator() = default;

        //@―---------------------------------------------------------------------------
        //! @brief                  内部アロケート情報のクリア
        //@―---------------------------------------------------------------------------
        virtual void release() = 0;


        //===============================================================
        //  メモリ確保 /解放
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief	                メモリの確保
        //! 
        //! @param[in] size         確保サイズ
        //! @param[in] alignment    アライメント
        //! @param[in] zeroClear    確保したバッファをゼロで初期化するか
        //@―---------------------------------------------------------------------------
        virtual void* allocate(size_t size, u32 alignment = DEFAULT_ALIGNMENT, bool zeroClear = false) = 0;


        //@―---------------------------------------------------------------------------
        //! @brief	                メモリの開放
        //@―---------------------------------------------------------------------------
        virtual void deallocate(void* pBuffer) = 0;


        //===============================================================
        //  取得
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief	                ヒープ名の取得
        //@―---------------------------------------------------------------------------
        virtual const Char* name()const = 0;


        //@―---------------------------------------------------------------------------
        //! @brief	                アロケータのヒープサイズを取得
        //@―---------------------------------------------------------------------------
        virtual size_t heapSize()const = 0;


        //@―---------------------------------------------------------------------------
        //! @brief	                アロケータの使用可能なヒープサイズを取得
        //@―---------------------------------------------------------------------------
        virtual size_t freeHeapSize()const = 0;


        //@―---------------------------------------------------------------------------
        //! @brief	                利用可能な状態かどうか
        //@―---------------------------------------------------------------------------
        virtual bool isValid()const = 0;


    public:

        //@―---------------------------------------------------------------------------
        //! @brief                  メモリの開放
        //! 
        //! @param pBuffer          解放先ポインタ
        //@―---------------------------------------------------------------------------
        static void Free(void* pBuffer);

    };


}// namespace ob