//***********************************************************
//! @file
//! @brief		デバイス実装(DirectX12)
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Graphic/Interface/IDevice.h>

//===============================================================
// クラス定義
//===============================================================
namespace ob::graphic::dx12 {

    class DeviceImpl :public IDevice {
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================
        
        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //@―---------------------------------------------------------------------------
        DeviceImpl(FeatureLevel featureLevel);


        //===============================================================
        // 更新
        //===============================================================
        void update()override;


        //===============================================================
        // 生成
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief  スワップ・チェーンを生成
        //@―---------------------------------------------------------------------------
        ob::graphic::ISwapChain* createSwapChain(const SwapchainDesc& desc, StringView name)override;


        //@―---------------------------------------------------------------------------
        //! @brief  テクスチャを生成
        //@―---------------------------------------------------------------------------
        ob::graphic::ITexture* createTexture(const TextureDesc& desc, StringView name)override;


        //@―---------------------------------------------------------------------------
        //! @brief  レンダーテクスチャを生成
        //@―---------------------------------------------------------------------------
        ob::graphic::IRenderTexture* createRenderTexture(const gsl::span<TextureDesc> targets, const TextureDesc& depth, StringView name)override;


        //@―---------------------------------------------------------------------------
        //! @brief  シェーダを生成
        //@―---------------------------------------------------------------------------
        ob::graphic::IShader* createShader(const String&,ShaderType, StringView name) override;


        //@―---------------------------------------------------------------------------
        //! @brief  シェーダを生成
        //@―---------------------------------------------------------------------------
        ob::graphic::IShader* createShader(const Blob&, ShaderType, StringView name) override;


        //===============================================================
        // ゲッター
        //===============================================================
        
        //@―---------------------------------------------------------------------------
        //! @brief  ネイティブ・デバイスを取得
        //@―---------------------------------------------------------------------------
        ComPtr<ID3D12Device>& getNativeDevice();

        //@―---------------------------------------------------------------------------
        //! @brief  ファクトリを取得
        //@―---------------------------------------------------------------------------
        ComPtr<IDXGIFactory4>& getFactory();

        //@―---------------------------------------------------------------------------
        //! @brief  システム・コマンド・キューを取得
        //@―---------------------------------------------------------------------------
        ComPtr<ID3D12CommandQueue>& getCommandQueue();

        //@―---------------------------------------------------------------------------
        //! @brief  システム・コマンド・リストを取得
        //@―---------------------------------------------------------------------------
        ComPtr<ID3D12GraphicsCommandList>& getSystemCommandList();


    private:

        void initialize();

        void initializeDXGIDevice();
        void initializeCommand();
        void initializeVideoCardInfo();

    private:

        FeatureLevel                        m_featureLevel;             // フィーチャーレベル
        ComPtr<ID3D12Device>                m_device;                   // D3D12のデバイス本体
        ComPtr<IDXGIFactory4>               m_dxgiFactory;              // DXGIインターフェイス
        ComPtr<ID3D12CommandAllocator>      m_commandAllocator;         // コマンドアロケータ
        ComPtr<ID3D12CommandQueue>          m_commandQueue;             // コマンドキュー
        ComPtr<ID3D12GraphicsCommandList>   m_systemCmdList;            // システムコマンドリスト

    };
}// namespace ob::graphic::dx12






//===============================================================
// インライン
//===============================================================
namespace ob::graphic::dx12 {

    //@―---------------------------------------------------------------------------
    //! @brief  ネイティブ・デバイスを取得
    //@―---------------------------------------------------------------------------
    inline ComPtr<ID3D12Device>& DeviceImpl::getNativeDevice() {
        return m_device;
    }


    //@―---------------------------------------------------------------------------
    //! @brief  ファクトリを取得
    //@―---------------------------------------------------------------------------
    inline ComPtr<IDXGIFactory4>& DeviceImpl::getFactory() {
        return m_dxgiFactory;
    }


    //@―---------------------------------------------------------------------------
    //! @brief  システム・コマンド・キューを取得
    //@―---------------------------------------------------------------------------
    inline ComPtr<ID3D12CommandQueue>& DeviceImpl::getCommandQueue() {
        return m_commandQueue;
    }


    //@―---------------------------------------------------------------------------
    //! @brief  システム・コマンド・リストを取得
    //@―---------------------------------------------------------------------------
    inline ComPtr<ID3D12GraphicsCommandList>& DeviceImpl::getSystemCommandList() {
        return m_systemCmdList;
    }

}// namespace ob::graphic::dx12