//***********************************************************
//! @file
//! @brief		ファイル説明
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Graphic/Interface/IShader.h>

//===============================================================
// 前方宣言
//===============================================================
namespace ob::graphic::dx12 {
    class DeviceImpl;
    class ITexture;
}


//===============================================================
// クラス定義
//===============================================================
namespace ob::graphic::dx12 {

    //@―---------------------------------------------------------------------------
    //! @brief  シェーダ
    //@―---------------------------------------------------------------------------
    class ShaderImpl :public IShader {
    public:

        //===============================================================
        //	コンストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief				シェーダーコードからシェーダーオブジェクトを生成
        //!
        //! @param src			シェーダコード
        //! @param stage		シェーダステージ
        //! @param errorDest	エラー出力先文字列
        //@―---------------------------------------------------------------------------
        ShaderImpl(const String& code, const ShaderStage stage);


        //@―---------------------------------------------------------------------------
        //! @brief				バイナリからシェーダーオブジェクトを生成
        //!
        //! @param src			バイナリ
        //! @param stage		シェーダステージ
        //! @param errorDest	エラー出力先文字列
        //@―---------------------------------------------------------------------------
        ShaderImpl(const Blob& blob, const ShaderStage stage);


        //@―---------------------------------------------------------------------------
        //! @brief				シェーダーオブジェクトを取得
        //@―---------------------------------------------------------------------------
        const ComPtr<ID3DBlob>& getShaderBolb() { return m_shaderBolb; }


        //@―---------------------------------------------------------------------------
        //! @brief				シェーダーオブジェクトが有効な状態かどうか
        //!
        //! @details			シェーダーの生成を行った場合はこの関数を用いて生成に成功したかを判定できる。
        //! @retval true		使用可能
        //! @retval false		使用不可
        //@―---------------------------------------------------------------------------
        bool isValid()const { return m_shaderBolb; };


    public:

        //@―---------------------------------------------------------------------------
        //! @brief				シェーダーで使用される変数の型ごとの使用メモリサイズを調べる
        //!
        //! @param type			シェーダー変数の型
        //! @return				使用メモリサイズ
        //@―---------------------------------------------------------------------------
        //static s32 GetShaderDataSize(const ShaderParamType type);

    private:

        void initialize(const Blob& blob, const ShaderStage stage);


    private:

        ComPtr<ID3DBlob> m_shaderBolb;						//!< シェーダ・バイナリ

        vector<D3D12_INPUT_ELEMENT_DESC> m_inputLayoutDesc;	//!< 入力レイアウト
        vector<D3D12_INPUT_ELEMENT_DESC> m_textureDesc;		//!< 入力レイアウト(テクスチャ)

    };





    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond



    //! @endcond
}// namespcae ob::graphic::dx12