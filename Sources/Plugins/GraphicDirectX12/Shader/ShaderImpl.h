//***********************************************************
//! @file
//! @brief		ファイル説明
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Framework/Graphic/Interface/IShader.h>
#include <Framework/Core/Misc/Blob.h>

//===============================================================
// 前方宣言
//===============================================================
namespace ob::graphic::dx12 {
	class DeviceImpl;
	class ITexture;
}


namespace ob::graphic::dx12 {

    //@―---------------------------------------------------------------------------
    //! @brief  シェーダ
    //@―---------------------------------------------------------------------------
	class ShaderImpl :public IShader {
	public:

		//===============================================================
		//	コンストラクタ
		//===============================================================

		//@―---------------------------------------------------------------------------
		//! @brief				シェーダーコードからシェーダーオブジェクトを生成
		//!
		//! @details			コンパイルに失敗した場合はエラー出力先文字列にエラーログが格納される。
		//! @param src			シェーダ文字列
		//! @param entry		エントリ関数名
		//! @param type			シェーダタイプ
		//! @param errorDest	エラー出力先文字列
		//@―---------------------------------------------------------------------------
		ShaderImpl(const StringView& src, const String& entry, const ShaderType type, String& errorDest);


		//@―---------------------------------------------------------------------------
		//! @brief				バイナリからシェーダーオブジェクトを生成
		//!
		//! @param src			バイナリ
		//! @param type			シェーダタイプ
		//! @param errorDest	エラー出力先文字列
		//@―---------------------------------------------------------------------------
		ShaderImpl(const Blob& src, const String& entry, const ShaderType type, String& errorDest);

	public:



		const ComPtr<ID3DBlob>& GetShaderBolb() { return m_shaderBolb; }


		//@―---------------------------------------------------------------------------
		//! @brief				シェーダーオブジェクトが有効な状態かどうか
		//!
		//! @details			シェーダーの生成を行った場合はこの関数を用いて生成に成功したかを判定できる。
		//! @retval true		使用可能
		//! @retval false		使用不可
		//@―---------------------------------------------------------------------------
		inline bool IsValid()const { return m_shaderBolb; };


	public:

		//@―---------------------------------------------------------------------------
		//! @brief				シェーダーで使用される変数の型ごとの使用メモリサイズを調べる
		//!
		//! @param type			シェーダー変数の型
		//! @return				使用メモリサイズ
		//@―---------------------------------------------------------------------------
		//static s32 GetShaderDataSize(const ShaderParamType type);


		//@―---------------------------------------------------------------------------
		//! @brief				対称のファイルがコンパイル済みシェーダーオブジェクトか判定する
		//!
		//! @param path			ファイルパス
		//@―---------------------------------------------------------------------------
		static bool IsCompiledShader(const String& path);


	private:

		ComPtr<ID3DBlob> m_shaderBolb;						//!< シェーダ・バイナリ

		vector<D3D12_INPUT_ELEMENT_DESC> m_inputLayoutDesc;	//!< 入力レイアウト
		vector<D3D12_INPUT_ELEMENT_DESC> m_textureDesc;		//!< 入力レイアウト(テクスチャ)

	};





    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond



    //! @endcond
}// namespcae ob::graphic::dx12