//***********************************************************
//! @file
//! @brief		クリティカルセクション
//! @author		Gajumaru
//***********************************************************
#pragma once
#include "Platform/CriticalSectionObjectPlatform.h"

namespace ob
{
    //@―---------------------------------------------------------------------------
    //! @brief      クリティカルセクション
    //! 
    //! @details    マルチスレッドでの排他的処理を Begin() End() 間で実現する。
    //@―---------------------------------------------------------------------------
    class CriticalSection
    {
    public:

        //@―---------------------------------------------------------------------------
        //! @brief          デフォルトコンストラクタ
        //@―---------------------------------------------------------------------------
        CriticalSection();

        //@―---------------------------------------------------------------------------
        //! @brief          デストラクタ
        //@―---------------------------------------------------------------------------
        ~CriticalSection();

        //@―---------------------------------------------------------------------------
        //! @brief          オブジェクトの初期化
        //! 
        //! @retval true    成功
        //! @retval false   失敗
        //@―---------------------------------------------------------------------------
        bool     Startup();

        //@―---------------------------------------------------------------------------
        //! @brief          オブジェクトの終了
        //@―---------------------------------------------------------------------------
        void    Cleanup();

        //@―---------------------------------------------------------------------------
        //! @brief          クリティカルセクションの開始
        //! 
        //! @details        End() が呼び出されるまで他のスレッドを停止し、他のスレッドからの同時書き込みを防ぐ。
        //@―---------------------------------------------------------------------------
        void    Begin();

        //@―---------------------------------------------------------------------------
        //! @brief          クリティカルセクションの終了
        //@―---------------------------------------------------------------------------
        void    End();

        //@―---------------------------------------------------------------------------
        //! @brief          有効なオブジェクトか判定
        //! 
        //! @retval true    有効
        //! @retval false   無効
        //@―---------------------------------------------------------------------------
        bool     IsValid()const;

    private:

        CriticalSectionObject   m_object;
        bool m_isStartuped;

    };

    

    //@―--------------------------------------------------------------------------
    //! @brief      スコープ付きクリティカルセクション
    //! 
    //! @details    クリティカルセクションの開始と終了をコンストラクタ/デストラクタで自動的に行う。
    //@―--------------------------------------------------------------------------
    class ScopedCriticalSection:private Noncopyable,private Nonmovable
    {
    public:
        //! @cond 
        ScopedCriticalSection(CriticalSection& cs) :m_cs(cs) { m_cs.Begin(); }  // コンストラクタ
        ~ScopedCriticalSection(){ m_cs.End(); }                                 // デストラクタ

        ScopedCriticalSection() = delete;
    private:
        
        CriticalSection& m_cs;  //!< クリティカルセクション

        //! @endcond
    };






    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond
    
    //@―--------------------------------------------------------------------------
    //! @brief デフォルトコンストラクタ
    //@―--------------------------------------------------------------------------
    inline CriticalSection::CriticalSection()
        :m_isStartuped(FALSE)
        , m_object()
    {}


    //@―--------------------------------------------------------------------------
    //! @brief デストラクタ
    //@―--------------------------------------------------------------------------
    inline CriticalSection::~CriticalSection()
    {
        Cleanup();
    }


    //@―--------------------------------------------------------------------------
    //! @brief      クリティカルセクションの開始
    //! 
    //! @details    End() が呼び出されるまで他のスレッドを停止し、他のスレッドからの同時書き込みを防ぐ。
    //@―--------------------------------------------------------------------------
    inline void CriticalSection::Begin()
    {
        m_object.Begin();
    }


    //@―--------------------------------------------------------------------------
    //! @brief クリティカルセクションの終了
    //@―--------------------------------------------------------------------------
    inline void CriticalSection::End()
    {
        m_object.End();
    }


    //@―--------------------------------------------------------------------------
    //! @brief          有効なオブジェクトか判定
    //! 
    //! @retval true    有効
    //! @retval false   無効
    //@―--------------------------------------------------------------------------
    inline bool CriticalSection::IsValid()const
    {
        return m_isStartuped;
    }

    //@endcond
}// namespace ob