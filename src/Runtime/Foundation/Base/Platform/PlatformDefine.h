//***********************************************************
//! @file
//! @brief		各プラットフォームのコンフィグ
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Foundation/Base/Platform.h>

#if defined(OS_WINDOWS)
#include "Windows/Define.h"

#elif defined(OS_ANDROID)
#include "Android/Define.h"

#else
#pragma error(OS_NAME"ではDefineの定義がありません")
#endif



//-----------------------------------------------------------------------------
//! @def		PLATFORM_NAME
//! @brief		プロットフォーム名
//-----------------------------------------------------------------------------
//! @def		ENTRY_POINT
//! @brief		エントリーポイント
//-----------------------------------------------------------------------------
//! @def		ALIGN_DECL
//! @brief		アライン付き宣言
//-----------------------------------------------------------------------------
//! @def		ALIGN_VAR
//! @brief		アライン付き変数宣言
//-----------------------------------------------------------------------------
//! @def		INLINE
//! @brief		強制inline修飾子
//-----------------------------------------------------------------------------
//! @def		RESTRICT
//! @brief		restrict型修飾子
//! @details    RESTRICT で修飾されたポインターによっ てアドレス指定されたメモリーが変更された場合、
//!             他のポインターはそのメモリーをアクセスしないことをコンパイラーに伝える。
//!             最適化の機能のため、上記の制約を守らない場合プログラマの責任となる。
//!             ```
//!             void foo(s32 n, s32 * RESTRICT a, s32 * RESTRICT b, s32 * RESTRICT c){
//!                 int i;
//!                 for (i = 0; i < n; ++i)
//!                     a[i] = b[i] + c[i];
//!             }
//!             ```
//-----------------------------------------------------------------------------
//! @def		DIRECTORY_CHAR
//! @brief		ディレクトリ文字
//-----------------------------------------------------------------------------
//! @def		DIRECTORY_STR
//! @brief		ディレクトリ文字列
//-----------------------------------------------------------------------------



//-----------------------------------------------------------------------------
//! @def		LIKELY
//! @brief		コンパイラ最適化オプション
//! @details    式が真であることが多い場合コンパイルが最適化される。
//-----------------------------------------------------------------------------
//! @def		UNLIKELY
//! @brief		コンパイラ最適化オプション
//! @details	式が偽であることが多い場合コンパイルが最適化される 。
//-----------------------------------------------------------------------------



//-----------------------------------------------------------------------------
//! @def		OUTPUT_DEBUG_LOG
//! @brief		デバッグウィンドウにログを出力する
//-----------------------------------------------------------------------------
//! @def		CALL_BREAK_POINT
//! @brief		特定のコード行にブレークポイントを設定する
//-----------------------------------------------------------------------------