//***********************************************************
//! @file
//! @brief		シングルトン・パターン
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <cassert>
#include <Foundation/Base/Fwd.h>

namespace ob
{


    //-----------------------------------------------------------------------------
    //! @brief          シングルトン・パターン
    //! 
    //! @details        インスタンスを2つ以上つくるとassertを発生させる。
    //!                 インスタンスの生成と破壊はコンストラクタとデストラクタで行われる。
    //-----------------------------------------------------------------------------
    template<class T>
    class singleton:private Noncopyable,private Nonmovable
    {
    public:

        static constexpr T& Get()noexcept;              // インスタンスの取得
        static constexpr T* GetPtr()noexcept;           // ポインタの取得

    protected:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================
        constexpr singleton()noexcept;                  // コンストラクタ
        ~singleton()noexcept;                           // デストラクタ


        //===============================================================
        // コピー / ムーブ の禁止
        //===============================================================

    private:

        static T* s_pInstance;  //!< インスタンスのポインタ

    };






    //===============================================================
    // インライン関数
    //===============================================================

    //-----------------------------------------------------------------------------

    template<class T>
    T* singleton<T>::s_pInstance = nullptr;

    //-----------------------------------------------------------------------------
    //! @brief      コンストラクタ
    //-----------------------------------------------------------------------------
    template<class T>
    constexpr singleton<T>::singleton()noexcept
    {
        assert(s_pInstance == nullptr);
        s_pInstance = static_cast<T*>(this);
    }


    //-----------------------------------------------------------------------------
    //! @brief      デストラクタ
    //-----------------------------------------------------------------------------
    template<class T>
    singleton<T>::~singleton()noexcept
    {
        assert(s_pInstance != nullptr);
        s_pInstance = nullptr;
    }


    //-----------------------------------------------------------------------------
    //! @brief      インスタンスの取得
    //-----------------------------------------------------------------------------
    template<class T>
    constexpr T& singleton<T>::Get()noexcept
    {
        assert(s_pInstance != nullptr);
        return *s_pInstance;
    }


    //-----------------------------------------------------------------------------
    //! @brief      インスタンスのポインタの取得
    //-----------------------------------------------------------------------------
    template<class T>
    constexpr T* singleton<T>::GetPtr()noexcept
    {
        assert(s_pInstance != nullptr);
        return s_pInstance;
    }


}// namespcae ob