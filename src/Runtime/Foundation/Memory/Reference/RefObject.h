//***********************************************************
//! @file
//! @brief		参照カウントオブジェクト
//! @author		Gajumaru
//***********************************************************
#pragma once
#include "IRefObject.h"

#include <Runtime/Foundation/Template/atomic.h>
#include <Runtime/Foundation/Template/Container/bitset.h>

namespace ob {

    //@―---------------------------------------------------------------------------
    //! @brief      参照カウントオブジェクト
    //! 
    //! @details    参照カウントによるメモリ管理をする場合はこのクラスを継承してくだ
    //!             さい。
    //!             一般的には RefObject 用のスマートポインタである Ref を使用して参
    //!             照を管理します。
    //@―---------------------------------------------------------------------------
    class OB_API RefObject:private Noncopyable,public IRefObject {
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief  コンストラクタ
        //@―---------------------------------------------------------------------------
        RefObject();


        //@―---------------------------------------------------------------------------
        //! @brief  デストラクタ
        //@―---------------------------------------------------------------------------
        ~RefObject() override;


    private:

        //@―---------------------------------------------------------------------------
        //! @brief  参照カウントが0になったときにデストラクタを呼ぶようにする
        //@―---------------------------------------------------------------------------
        void EnableDestruct()noexcept override;


        //@―---------------------------------------------------------------------------
        //! @brief  参照カウントの取得
        //@―---------------------------------------------------------------------------
        s32 GetReferenceCount()const noexcept override;


        //@―---------------------------------------------------------------------------
        //! @brief  参照の追加
        //@―---------------------------------------------------------------------------
        s32 Retain() override;


        //@―---------------------------------------------------------------------------
        //! @brief  参照の解放
        //@―---------------------------------------------------------------------------
        s32 Release() override;

    private:

        mutable atomic<s32> m_referenceCount;
        bitset<1> m_flags;

    };


    //@―---------------------------------------------------------------------------
    //! @brief  IRefObject の参照を直接操作するためのユーティリティ
    //! 
    //! @details    IRefObject を継承したクラスは通常 MakeRef 関数をによって生成され
    //!             Ref クラスを通して操作されるが、特殊な用途において直接操作したい
    //!             場合にこのクラスを用いる。
    //@―---------------------------------------------------------------------------
    class RefObjectHelper {
    public:

        //@―---------------------------------------------------------------------------
        //! @brief  参照カウントの取得
        //! 
        //! @param pObj 捜査対象の IRefObject
        //@―---------------------------------------------------------------------------
        static s32 GetReferenceCount(IRefObject* pObj);


        //@―---------------------------------------------------------------------------
        //! @brief  参照の追加
        //! 
        //! @param pObj 捜査対象の IRefObject
        //@―---------------------------------------------------------------------------
        static s32 Retain(IRefObject* pObj);


        //@―---------------------------------------------------------------------------
        //! @brief  参照の解放
        //! 
        //! @param pObj 捜査対象の IRefObject
        //@―---------------------------------------------------------------------------
        static s32 Release(IRefObject* pObj);


    };





    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond

    //@―---------------------------------------------------------------------------
    //! @brief  参照カウントが0になったときにデストラクタを呼ぶようにする
    //@―---------------------------------------------------------------------------
    inline void RefObject::EnableDestruct()noexcept {
        m_flags[0] = true;
    }


    //@―---------------------------------------------------------------------------
    //! @brief  参照カウントの取得
    //@―---------------------------------------------------------------------------
    inline s32 RefObject::GetReferenceCount()const noexcept {
        return m_referenceCount;
    }


    //@―---------------------------------------------------------------------------
    //! @brief  参照の追加
    //@―---------------------------------------------------------------------------
    inline s32 RefObject::Retain() {
        m_referenceCount++;
        return m_referenceCount;
    }


    //@―---------------------------------------------------------------------------
    //! @brief  参照の解放
    //@―---------------------------------------------------------------------------
    inline s32 RefObject::Release() {
        s32 count = (--m_referenceCount);
        if (count <= 0) {
            if (m_flags[0]) {
                delete this;
            }
        }
        return count;
    }

    //! @endcond
}// namespcae ob