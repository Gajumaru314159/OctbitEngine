//***********************************************************
//! @file
//! @brief		整数表現カラークラス
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Core/Graphic/Color.h>

namespace ob {

    //@―---------------------------------------------------------------------------
    //! @brief		整数表現カラークラス
    //! 
    //! @details	各色要素は、0〜255の範囲の u8 型で表現されます。アルファ(a)は透過度を表し、0で完全な透明、255で完全な不透明を表します。
    //@―---------------------------------------------------------------------------
    struct OB_API IntColor {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief			デフォルトコンストラクタ(初期化なし)
        //@―---------------------------------------------------------------------------
        IntColor() noexcept;

        
        //@―---------------------------------------------------------------------------
        //! @brief			コンストラクタ(白で初期化)
        //! 
        //! @details		色を白(255,255,255,255)で初期化します。
        //@―---------------------------------------------------------------------------
        IntColor() noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief			コンストラクタ(各要素を指定して初期化)
        //! 
        //! @details		各色成分を指定して初期化します。
        //! @param r		赤成分
        //! @param g		緑成分
        //! @param b		青成分
        //! @param a		アルファ
        //@―---------------------------------------------------------------------------
        IntColor(s32 r, s32 g, s32 b, s32 a = 255) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief          コンストラクタ(輝度とアルファ値を指定して初期化)
        //! 
        //! @details		色成分を輝度で指定します。
        //! @param grey	    輝度
        //! @param a		アルファ
        //@―---------------------------------------------------------------------------
        IntColor(s32 grey, s32 a = 255) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief          Color を変換して初期化
        //@―---------------------------------------------------------------------------
        explicit IntColor(const Color& another) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief          Vec3 を変換して初期化(アルファは1.0)
        //@―---------------------------------------------------------------------------
        explicit IntColor(const Vec3& another) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief          Vec4 を変換して初期化(アルファは1.0)
        //@―---------------------------------------------------------------------------
        explicit IntColor(const Vec4& another) noexcept;


        //===============================================================
        //  オペレータ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief			加算演算子
        //@―---------------------------------------------------------------------------
        IntColor operator + (const IntColor& another) const noexcept;

        //@―---------------------------------------------------------------------------
        //! @brief			減算演算子
        //@―---------------------------------------------------------------------------
        IntColor operator - (const IntColor& another) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief			加算代入演算子
        //@―---------------------------------------------------------------------------
        IntColor& operator += (const IntColor& another) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief			減算代入演算子
        //@―---------------------------------------------------------------------------
        IntColor& operator -= (const IntColor& another) noexcept;


        //===============================================================
        //  セッター
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief		    色成分を指定
        //! 
        //! @param r	    赤成分
        //! @param g	    緑成分
        //! @param b	    青成分
        //! @param a	    アルファ
        //@―---------------------------------------------------------------------------
        void Set(s32 r, s32 g, s32 b, s32 a = 255) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief		    色成分を輝度で指定
        //! 
        //! @param grey     輝度
        //! @param a	    アルファ
        //@―---------------------------------------------------------------------------
        void Set(s32 grey, s32 a = 255) noexcept;


        //===============================================================
        //  ゲッター
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief          RGBのうち最小の値を取得
        //@―---------------------------------------------------------------------------
        u8 GetMinComponent()const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief          RGBのうち最大の値を取得
        //@―---------------------------------------------------------------------------
        u8 GetMaxComponent()const noexcept;


        //===============================================================
        //  変換
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief          色をカラーコードに変換
        //! 
        //! @param          format  カラーフォーマット(色の並び)
        //@―---------------------------------------------------------------------------
        u32 ToCode(ColorCodeFormat format = ColorCodeFormat::DEFAULT)const noexcept;

    public:

        static const IntColor black;		//!< Color(0,0,0,255)
        static const IntColor blue;		    //!< Color(0,0,255,255)
        static const IntColor clear;		//!< Color(0,0,0,0)
        static const IntColor cyan;		    //!< Color(0,255,255,255)
        static const IntColor green;		//!< Color(0,255,0,255)
        static const IntColor grey;		    //!< Color(0.5,0.5,0.5,255)
        static const IntColor magenta;	    //!< Color(255,0,255,255)
        static const IntColor red;		    //!< Color(255,0,0,255)
        static const IntColor white;		//!< Color(255,255,255,255)
        static const IntColor yellow;	    //!< Color(255,235,4,255)

    public:

        union {
            struct {
                u8 r;       //!< 赤成分
                u8 g;       //!< 緑成分
                u8 b;       //!< 青成分
                u8 a;       //!< アルファ成分
            };
            u8 data[4];     //!< 色成分
            u32 code;       //!< カラーコード
        };

    };






    //=======================================================================
    // インライン
    //=======================================================================
    //! @cond

    //@―---------------------------------------------------------------------------
    //! @brief			コンストラクタ
    //! 
    //! @details		色を白(255,255,255,255)で初期化します。
    //@―---------------------------------------------------------------------------
    inline IntColor::IntColor() noexcept {
        Set(1, 1, 1, 1);
    }


    //@―---------------------------------------------------------------------------
    //! @brief			コンストラクタ
    //! 
    //! @details		各色成分を指定して初期化します。
    //! @param r		赤成分
    //! @param g		緑成分
    //! @param b		青成分
    //! @param a		アルファ
    //@―---------------------------------------------------------------------------
    inline IntColor::IntColor(s32 r, s32 g, s32 b, s32 a) noexcept {
        Set(r, g, b, a);
    }


    //@―---------------------------------------------------------------------------
    //! @brief			コンストラクタ
    //! 
    //! @details		色成分を輝度で指定します。
    //! @param grey	輝度
    //! @param a		アルファ
    //@―---------------------------------------------------------------------------
    inline IntColor::IntColor(s32 grey, s32 a) noexcept {
        Set(grey, grey, grey, a);
    }


    //@―---------------------------------------------------------------------------
    //! @brief			加算演算子
    //@―---------------------------------------------------------------------------
    inline IntColor IntColor::operator + (const IntColor& another) const noexcept {
        return IntColor(*this) += another;
    }


    //@―---------------------------------------------------------------------------
    //! @brief			減算演算子
    //@―---------------------------------------------------------------------------
    inline IntColor IntColor::operator - (const IntColor& another) const noexcept {
        return IntColor(*this) -= another;
    }


    //@―---------------------------------------------------------------------------
    //! @brief			加算代入演算子
    //@―---------------------------------------------------------------------------
    inline IntColor& IntColor::operator += (const IntColor& another) noexcept {
        Set(r + another.r, g + another.g, b + another.b, a);
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief			減算代入演算子
    //@―---------------------------------------------------------------------------
    inline IntColor& IntColor::operator -= (const IntColor& another) noexcept {
        Set(r - another.r, g - another.g, b - another.b, a);
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief		色成分を指定
    //! 
    //! @param r	赤成分
    //! @param g	緑成分
    //! @param b	青成分
    //! @param a	アルファ
    //@―---------------------------------------------------------------------------
    inline void IntColor::Set(s32 r, s32 g, s32 b, s32 a) noexcept {
        this->r = (u8)get_clamp(r, 0, 255);
        this->g = (u8)get_clamp(g, 0, 255);
        this->b = (u8)get_clamp(b, 0, 255);
        this->a = (u8)get_clamp(a, 0, 255);
    }


    //@―---------------------------------------------------------------------------
    //! @brief			色成分を輝度で指定
    //! 
    //! @param grey	輝度
    //! @param a		アルファ
    //@―---------------------------------------------------------------------------
    inline void IntColor::Set(s32 grey, s32 a) noexcept {
        Set(grey, grey, grey, a);
    }


    //@―---------------------------------------------------------------------------
    //! @brief      RGBのうち最小の値を取得
    //@―---------------------------------------------------------------------------
    inline u8 IntColor::GetMinComponent()const noexcept {
        return get_min(r, g, b);
    }


    //@―---------------------------------------------------------------------------
    //! @brief      RGBのうち最大の値を取得
    //@―---------------------------------------------------------------------------
    inline u8 IntColor::GetMaxComponent()const noexcept {
        return get_max(r, g, b);
    }

    //! @endcond
}// namespcae ob