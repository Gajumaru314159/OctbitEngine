//***********************************************************
//! @file
//! @brief		Mimallocヒープ
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Runtime/Foundation/Memory/Heap/Heap.h>
#include <Runtime/Foundation/Template/thread/mutex.h>


namespace ob
{

    //@―---------------------------------------------------------------------------
    //! @brief  Mimallocヒープ
    //! 
    //! @ref    https://github.com/microsoft/mimalloc
    //@―---------------------------------------------------------------------------
    class MimallocHeap final:public Heap
    {
        friend class Heap;
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief                  デストラクタ
        //@―---------------------------------------------------------------------------
        ~MimallocHeap() override;


        //@―---------------------------------------------------------------------------
        //! @brief                  内部アロケート情報のクリア
        //@―---------------------------------------------------------------------------
        void Release() override;


        //===============================================================
        //  メモリ確保 /解放
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief	                メモリの確保
        //! 
        //! @param[in] size         確保サイズ
        //! @param[in] alignment    アライメント
        //! @param[in] zeroClear    確保したバッファをゼロで初期化するか
        //@―---------------------------------------------------------------------------
        void* Allocate(size_t size, u32 alignment, bool zeroClear) override;


        //@―---------------------------------------------------------------------------
        //! @brief	                メモリの開放
        //@―---------------------------------------------------------------------------
        void Deallocate(void* pBuffer) override;


        //===============================================================
        //  取得
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief	                ヒープ名の取得
        //@―---------------------------------------------------------------------------
        Char* GetName() const override;


        //@―---------------------------------------------------------------------------
        //! @brief	                アロケータのヒープサイズを取得
        //@―---------------------------------------------------------------------------
        size_t GetHeapSize() const override;


        //@―---------------------------------------------------------------------------
        //! @brief	                アロケータの使用可能なヒープサイズを取得
        //@―---------------------------------------------------------------------------
        size_t GetFreeHeapSize() const override;


        //@―---------------------------------------------------------------------------
        //! @brief	                利用可能な状態かどうか
        //@―---------------------------------------------------------------------------
        bool IsValid()const override;

    protected:

        //@―---------------------------------------------------------------------------
        //! @brief	                コンストラクタ
        //@―---------------------------------------------------------------------------
        MimallocHeap(void* pBuffer, size_t size);       // コンストラクタ

    private:

        mutex m_mutex;

        Char* m_pName;


    };






    //===============================================================
    // インライン関数
    //===============================================================

    //@―---------------------------------------------------------------------------


}// namespcae ob