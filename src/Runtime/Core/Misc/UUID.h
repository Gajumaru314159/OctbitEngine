//***********************************************************
//! @file
//! @brief UUID
//! @author Gajumaru
//***********************************************************
#pragma once

namespace ob {

    //@―---------------------------------------------------------------------------
    //! @brief UUIDクラス
    //@―---------------------------------------------------------------------------
    class UUID {
    public:

        //===============================================================
        // コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief デフォルトコンストラクタ(初期化なし)
        //@―---------------------------------------------------------------------------
        UUID()noexcept =default;


        //@―---------------------------------------------------------------------------
        //! @brief コンストラクタ(ゼロ初期化)
        //@―---------------------------------------------------------------------------
        explicit UUID(EForceInit);


        //===============================================================
        // オペレータ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief 等価演算子
        //@―---------------------------------------------------------------------------
        bool operator==(const UUID& other)const;


        //@―---------------------------------------------------------------------------
        //! @brief 否等価演算子
        //@―---------------------------------------------------------------------------
        bool operator!=(const UUID& other)const;


        //@―---------------------------------------------------------------------------
        //! @brief 文字列表現で取得
        //! 
        //! @return XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXの形で表される文字列表現
        //@―---------------------------------------------------------------------------
        String  ToString()const;


        //@―---------------------------------------------------------------------------
        //! @brief 空のUUIDか判定
        //! 
        //! @retval true	空
        //! @retval false	空ではない
        //@―---------------------------------------------------------------------------
        bool     IsEmpty() const;


        //@―---------------------------------------------------------------------------
        //! @brief 内部表現をバイト列として取得
        //@―---------------------------------------------------------------------------
        const byte* data() const; 


    public:

        //@―---------------------------------------------------------------------------
        //! @brief 新しいUUIDを生成
        //@―---------------------------------------------------------------------------
        static UUID Generate();


        //@―---------------------------------------------------------------------------
        //! @brief			UUID文字列からUUIDオブジェクトを生成
        //! 
        //! @details		XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXの形で表される16進数の並び
        //! @param uuidText UUIDの文字列表現
        //@―---------------------------------------------------------------------------
        static UUID FromText(const StringView& uuidText);


        //@―---------------------------------------------------------------------------
        //! @brief			バイト列から固有のUUIDを生成
        //! 
        //! @param bytes	バイト列
        //@―---------------------------------------------------------------------------
        static UUID FromByte(const byte* bytes);


    private:

        byte m_data[16];//!< 内部データ

    };






    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond

    //@―---------------------------------------------------------------------------
    //! @brief 等価演算子
    //@―---------------------------------------------------------------------------
    inline bool UUID::operator==(const UUID& other) const {
        for (s32 i = 0; i < 16; i++)if (m_data[i] != other.m_data[i])return false;
        return true;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 否等価演算子
    //@―---------------------------------------------------------------------------
    inline bool UUID::operator!=(const UUID& other) const {
        return !(operator==(other));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 内部表現をバイト列として取得
    //@―---------------------------------------------------------------------------
    inline const byte* UUID::data() const {
        return m_data;
    }


    //! @endcond
}// namespace ob



 //==============================================================================



//! @cond
// for unordered_map key
//namespace eastl
//{
//    //! @brief ハッシュクラス
//    template <> struct hash<ob::UUID>
//    {
//        //! @brief UUIDをハッシュ値に変換
//        size_t operator()(const ob::UUID& p) const;
//    };
//}// namespace eastl
//! @endcond