//***********************************************************
//! @file
//! @brief		整数ベクトル
//! @author		Gajumaru
//***********************************************************

#include <Core/Math/Vector/VectorInt2.h>
#include <Core/Math/Vector/VectorInt3.h>
#include <Core/Math/Vector/VectorInt4.h>
#include <Core/Math/Vector/Vector2.h>
#include <Core/Math/Vector/Vector3.h>
#include <Core/Math/Vector/Vector4.h>
namespace ob {
    /*
    //===============================================================
    //  Vec2Int
    //===============================================================

    //-----------------------------------------------------------------------------
    //! @brief s32*Vec2Int演算子
    //-----------------------------------------------------------------------------
    Vec2Int operator * (s32 f, const Vec2Int& v)
    {
        return v * f;
    }


    //-----------------------------------------------------------------------------
    //! @brief s32/Vec2Int演算子
    //-----------------------------------------------------------------------------
    Vec2Int operator / (s32 f, const Vec2Int& v)
    {
        return Vec2Int(f, f) / v;
    }


    //-----------------------------------------------------------------------------
    //! @brief Vec2キャスト演算子
    //-----------------------------------------------------------------------------
    Vec2Int::operator Vec2 ()const
    {
        return Vec2((f32)(x), (f32)(y));
    }




    //===============================================================
    //  Vec3Int
    //===============================================================

    //-----------------------------------------------------------------------------
    //! @brief s32*Vec3Int演算子
    //-----------------------------------------------------------------------------
    Vec3Int operator * (s32 f, const Vec3Int& v)
    {
        return v * f;
    }


    //-----------------------------------------------------------------------------
    //! @brief s32/Vec3Int演算子
    //-----------------------------------------------------------------------------
    Vec3Int operator / (s32 f, const Vec3Int& v)
    {
        return Vec3Int(f, f, f) / v;
    }


    //-----------------------------------------------------------------------------
    //! @brief Vec3キャスト演算子
    //-----------------------------------------------------------------------------
    Vec3Int::operator Vec3 ()const
    {
        return Vec3((f32)(x), (f32)(y), (f32)(z));
    }
    */




    //===============================================================
    //  Vec4Int
    //===============================================================

    // コンストラクタ( Vec4 初期化)
    Vec4Int::Vec4Int(Vec4 vec)noexcept {
        x = static_cast<s32>(vec.x);
        y = static_cast<s32>(vec.y);
        z = static_cast<s32>(vec.z);
        w = static_cast<s32>(vec.w);
    }

    //-----------------------------------------------------------------------------
    //! @brief s32*Vec4Int演算子 
    //-----------------------------------------------------------------------------
    Vec4Int operator * (s32 f, const Vec4Int& v)noexcept {
        return v * f;
    }


    //-----------------------------------------------------------------------------
    //! @brief s32/Vec4Int演算子 
    //-----------------------------------------------------------------------------
    Vec4Int operator / (s32 f, const Vec4Int& v)noexcept {
        return Vec4Int(f, f, f, f) / v;
    }

}// namespace ob