//***********************************************************
//! @file
//! @brief 整数二次元ベクトル
//! @author Gajumaru
//***********************************************************
#pragma once
#include <Core/Math/Mathf.h>

/*

namespace ob
{

    struct Vec2;

    //@―---------------------------------------------------------------------------
    //! @brief 二次元ベクトル
    //@―---------------------------------------------------------------------------
    struct OB_API IntVec2
    {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================
        IntVec2();                                              // コンストラクタ(ゼロ初期化)
        IntVec2(s32 _x, s32 _y);                                // コンストラクタ(要素指定)


        //===============================================================
        //  オペレータ
        //===============================================================
        bool operator == (const IntVec2& v) const;              // 等価演算子
        bool operator != (const IntVec2& v) const;              // 否等価演算子
        IntVec2 operator + (const IntVec2& v) const;            // 加算演算子
        IntVec2 operator - (const IntVec2& v) const;
        IntVec2 operator * (s32 f) const;
        IntVec2 operator * (const IntVec2& v) const;
        IntVec2 operator / (s32 f) const;
        IntVec2 operator / (const IntVec2& v) const;
        IntVec2 operator - () const;
        friend IntVec2 operator * (s32 scalar, const IntVec2& v);
        friend IntVec2 operator / (s32 scalar, const IntVec2& v);
        IntVec2& operator += (const IntVec2& v);
        IntVec2& operator += (s32 scalar);
        IntVec2& operator -= (const IntVec2& v);
        IntVec2& operator -= (s32 scalar);
        IntVec2& operator *= (const IntVec2& v);
        IntVec2& operator *= (s32 scalar);
        IntVec2& operator /= (const IntVec2& v);
        IntVec2& operator /= (s32 scalar);
        operator Vec2 ()const;


        //===============================================================
        //  セッター
        //===============================================================
        void Set(s32 x, s32 y);
        void SetZero();


        //===============================================================
        //  判定
        //===============================================================
        B32 IsZero();

    public:

        union
        {
            struct
            {
                s32 x;      //!< ベクトルのx成分
                s32 y;      //!< ベクトルのy成分
            };
            s32 data[2];    //!< ベクトルの成分
        };

    };






    //===============================================================
    // インライン関数
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief デフォルトコンストラクタ
    //! @details 0ベクトルで初期化する。
    //@―---------------------------------------------------------------------------
    inline IntVec2::IntVec2() :IntVec2(0, 0) {}


    //@―---------------------------------------------------------------------------
    //! @brief コンストラクタ
    //@―---------------------------------------------------------------------------
    inline IntVec2::IntVec2(s32 _x, s32 _y) : x(_x), y(_y) {}


    //@―---------------------------------------------------------------------------
    //! @brief 等価演算子
    //@―---------------------------------------------------------------------------
    inline bool IntVec2::operator == (const IntVec2& v) const
    {
        return x == v.x && y == v.y;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 否等価演算子
    //@―---------------------------------------------------------------------------
    inline bool IntVec2::operator != (const IntVec2& v) const
    {
        return !(operator==(v));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator + (const IntVec2& v) const
    {
        return IntVec2(*this) += v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator - (const IntVec2& v) const
    {
        return IntVec2(*this) -= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator * (s32 f) const
    {
        return IntVec2(*this) *= f;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator * (const IntVec2& v) const
    {
        return IntVec2(*this) *= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator / (s32 f) const
    {
        return IntVec2(*this) /= f;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator / (const IntVec2& v) const
    {
        return IntVec2(*this) /= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算代入演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator += (const IntVec2& v)
    {
        x += v.x;
        y += v.y;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator += (s32 scalar)
    {
        x += scalar;
        y += scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算代入演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator -= (const IntVec2& v)
    {
        x -= v.x;
        y -= v.y;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator -= (s32 scalar)
    {
        x -= scalar;
        y -= scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算代入演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator *= (const IntVec2& v)
    {
        x *=v.x;
        y *= v.x;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator *= (s32 f)
    {
        x *= f;
        y *= f;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算代入演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator /= (const IntVec2& v)
    {
        x /= v.x;
        y /= v.x;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator /= (s32 f)
    {
        x /= f;
        y /= f;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 単項マイナス演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator - () const
    {
        return IntVec2(-x, -y);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の設定
    //@―---------------------------------------------------------------------------
    inline void IntVec2::Set(s32 x, s32 y)
    {
        this->x = x;
        this->y = y;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素をすべて0に設定
    //@―---------------------------------------------------------------------------
    inline void IntVec2::SetZero()
    {
        Set(0, 0);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素をすべて0に設定
    //@―---------------------------------------------------------------------------
    inline B32 IntVec2::IsZero()
    {
        return x == 0 && y == 0;
    }
}
*/