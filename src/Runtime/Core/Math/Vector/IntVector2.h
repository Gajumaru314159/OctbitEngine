//***********************************************************
//! @file
//! @brief 整数二次元ベクトル
//! @author Gajumaru
//***********************************************************
#pragma once

namespace ob {

    struct Vec2;

    //@―---------------------------------------------------------------------------
    //! @brief 整数二次元ベクトル
    //@―---------------------------------------------------------------------------
    struct OB_API IntVec2 {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief      デフォルトコンストラクタ(初期化なし)
        //@―---------------------------------------------------------------------------
        IntVec2()noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ(ゼロ初期化)
        //@―---------------------------------------------------------------------------
        explicit IntVec2(EForceInit)noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ(すべての要素を同じ値で初期化)
        //@―---------------------------------------------------------------------------
        explicit IntVec2(s32 scalar)noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ(要素を指定して初期化)
        //@―---------------------------------------------------------------------------
        IntVec2(s32 x, s32 y)noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief      コンストラクタ( Vec2 初期化)
        //@―---------------------------------------------------------------------------
        explicit IntVec2(Vec2 vec)noexcept;


        //===============================================================
        //  オペレータ
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief      等価演算子
        //@―---------------------------------------------------------------------------
        bool operator == (const IntVec2& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 否等価演算子
        //@―---------------------------------------------------------------------------
        bool operator != (const IntVec2& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算演算子
        //@―---------------------------------------------------------------------------
        IntVec2 operator + (const IntVec2& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec2 operator + (s32 scalar) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 減算演算子
        //@―---------------------------------------------------------------------------
        IntVec2 operator - (const IntVec2& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 減算演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec2 operator - (s32 scalar) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 乗算演算子
        //@―---------------------------------------------------------------------------
        IntVec2 operator * (const IntVec2& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 乗算演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec2 operator * (s32 scalar) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 除算演算子
        //@―---------------------------------------------------------------------------
        IntVec2 operator / (const IntVec2& v) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 除算演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec2 operator / (s32 scalar) const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算代入演算子
        //@―---------------------------------------------------------------------------
        IntVec2& operator += (const IntVec2& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 加算代入演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec2& operator += (s32 scalar) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 減算代入演算子 
        //@―---------------------------------------------------------------------------
        IntVec2& operator -= (const IntVec2& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 減算代入演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec2& operator -= (s32 scalar) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 乗算代入演算子 
        //@―---------------------------------------------------------------------------
        IntVec2& operator *= (const IntVec2& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 乗算代入演算子 (スカラー)
        //@―---------------------------------------------------------------------------
        IntVec2& operator *= (s32 scalar) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 除算代入演算子 
        //@―---------------------------------------------------------------------------
        IntVec2& operator /= (const IntVec2& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 除算代入演算子(スカラー)
        //@―---------------------------------------------------------------------------
        IntVec2& operator /= (s32 scalar) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 単項マイナス演算子
        //@―---------------------------------------------------------------------------
        IntVec2 operator - () const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief s32*IntVec2演算子 
        //@―---------------------------------------------------------------------------
        friend IntVec2 operator * (s32 scalar, const IntVec2& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief s32/IntVec2演算子 
        //@―---------------------------------------------------------------------------
        friend IntVec2 operator / (s32 scalar, const IntVec2& v) noexcept;


        //===============================================================
        //  セッター
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief 要素の設定
        //@―---------------------------------------------------------------------------
        void    Set(s32 x, s32 y) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素の設定
        //@―---------------------------------------------------------------------------
        void    Set(const IntVec2& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素を全て0に設定
        //@―---------------------------------------------------------------------------
        void    SetZero() noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 全ての要素を同じ値で設定
        //@―---------------------------------------------------------------------------
        void    SetAll(s32 scalar) noexcept;


        //===============================================================
        //  ゲッター
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief 要素の最大を取得
        //@―---------------------------------------------------------------------------
        s32     GetMaxComponent() const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素の絶対値の最大を取得
        //@―---------------------------------------------------------------------------
        s32     GetMaxAbsComponent() const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 要素の最小を取得
        //@―---------------------------------------------------------------------------
        s32     GetMinComponent() const noexcept;


        //===============================================================
        //  判定
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief すべての要素が同じ値か判定
        //@―---------------------------------------------------------------------------
        b32     AllComponentsEqual()const noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief ゼロベクトルか判定
        //@―---------------------------------------------------------------------------
        b32     IsZero()const noexcept;


    public:

        //===============================================================
        //  スタティック関数
        //===============================================================

        //@―---------------------------------------------------------------------------
        //! @brief ベクトルの各要素の絶対値からベクトルを作成
        //@―---------------------------------------------------------------------------
        static IntVec2  Abs(const IntVec2& v) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 内積
        //@―---------------------------------------------------------------------------
        static s32      Dot(const IntVec2& a, const IntVec2& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 外積
        //@―---------------------------------------------------------------------------
        static s32      Cross(const IntVec2& a, const IntVec2& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief  二つのベクトルのマンハッタン距離を計算
        //@―---------------------------------------------------------------------------
        static s32      MDist(const IntVec2& a, const IntVec2& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 二つのベクトルの各要素の大きいほうからベクトルを生成
        //@―---------------------------------------------------------------------------
        static IntVec2  Max(const IntVec2& a, const IntVec2& b) noexcept;


        //@―---------------------------------------------------------------------------
        //! @brief 二つのベクトルの各要素の小さいほうからベクトルを生成
        //@―---------------------------------------------------------------------------
        static IntVec2  Min(const IntVec2& a, const IntVec2& b) noexcept;


    public:

        static const IntVec2 zero;    //!< ( 0, 0)
        static const IntVec2 one;     //!< ( 1, 1)

    public:

        s32 x;    //!< ベクトルのX成分
        s32 y;    //!< ベクトルのY成分

    };






    //===============================================================
    // インライン関数
    //===============================================================
    //! @cond

    //@―---------------------------------------------------------------------------
    //! @brief      デフォルトコンストラクタ(初期化なし)
    //@―---------------------------------------------------------------------------
    inline IntVec2::IntVec2() noexcept {
    }


    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ(ゼロ初期化)
    //@―---------------------------------------------------------------------------
    inline IntVec2::IntVec2(EForceInit)noexcept {
        SetZero();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ(すべての要素を同じ値で初期化)
    //@―---------------------------------------------------------------------------
    inline IntVec2::IntVec2(s32 scalar) noexcept {
        Set(scalar, scalar);
    }


    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ(要素を指定して初期化)
    //@―---------------------------------------------------------------------------
    inline IntVec2::IntVec2(s32 x, s32 y) noexcept {
        Set(x, y);
    }


    //===============================================================
    //  オペレータ
    //===============================================================


    //@―---------------------------------------------------------------------------
    //! @brief      等価演算子
    //@―---------------------------------------------------------------------------
    inline bool IntVec2::operator == (const IntVec2& v) const noexcept {
        return
            x == v.x &&
            y == v.y;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 否等価演算子
    //@―---------------------------------------------------------------------------
    inline bool IntVec2::operator != (const IntVec2& v) const noexcept {
        return !(operator==(v));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator + (const IntVec2& v) const noexcept {
        return IntVec2(*this) += v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator + (s32 scalar) const noexcept {
        return IntVec2(*this) += scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator - (const IntVec2& v) const noexcept {
        return IntVec2(*this) -= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator - (s32 scalar) const noexcept {
        return IntVec2(*this) -= scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator * (const IntVec2& v) const noexcept {
        return IntVec2(*this) *= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator * (s32 scalar) const noexcept {
        return IntVec2(*this) *= scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator / (const IntVec2& v) const noexcept {
        return IntVec2(*this) /= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator / (s32 scalar) const noexcept {
        return IntVec2(*this) /= scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算代入演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator += (const IntVec2& v) noexcept {
        x += v.x;
        y += v.y;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator += (s32 scalar) noexcept {
        x += scalar;
        y += scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算代入演算子 
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator -= (const IntVec2& v) noexcept {
        x -= v.x;
        y -= v.y;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator -= (s32 scalar) noexcept {
        x -= scalar;
        y -= scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算代入演算子 
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator *= (const IntVec2& v) noexcept {
        x *= v.x;
        y *= v.y;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算代入演算子 (スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator *= (s32 scalar) noexcept {
        x *= scalar;
        y *= scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算代入演算子 
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator /= (const IntVec2& v) noexcept {
        x /= v.x;
        y /= v.y;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec2& IntVec2::operator /= (s32 scalar) noexcept {
        x /= scalar;
        y /= scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 単項マイナス演算子
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::operator - () const noexcept {
        return IntVec2(-x, -y);
    }


    //===============================================================
    //  セッター
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief 要素の設定
    //@―---------------------------------------------------------------------------
    inline void IntVec2::Set(s32 x, s32 y) noexcept {
        this->x = x;
        this->y = y;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の設定
    //@―---------------------------------------------------------------------------
    inline void IntVec2::Set(const IntVec2& v) noexcept {
        Set(v.x, v.y);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素を全て0に設定
    //@―---------------------------------------------------------------------------
    inline void IntVec2::SetZero() noexcept {
        Set(0, 0);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 全ての要素を同じ値で設定
    //@―---------------------------------------------------------------------------
    inline void IntVec2::SetAll(s32 scalar) noexcept {
        Set(scalar, scalar);
    }


    //===============================================================
    //  ゲッター
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief 要素の最大を取得
    //@―---------------------------------------------------------------------------
    inline s32 IntVec2::GetMaxComponent() const noexcept {
        return  get_max(x,y);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の絶対値の最大を取得
    //@―---------------------------------------------------------------------------
    inline s32 IntVec2::GetMaxAbsComponent() const noexcept {
        return get_max(abs(x), abs(y));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の最小を取得
    //@―---------------------------------------------------------------------------
    inline s32 IntVec2::GetMinComponent() const noexcept {
        return get_min(x,y);
    }


    //===============================================================
    //  判定
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief すべての要素が同じ値か判定
    //@―---------------------------------------------------------------------------
    inline b32 IntVec2::AllComponentsEqual()const noexcept {
        return x == y;
    }


    //@―---------------------------------------------------------------------------
    //! @brief ゼロベクトルか判定
    //@―---------------------------------------------------------------------------
    inline b32 IntVec2::IsZero()const noexcept {
        return x == 0 && y == 0 ;
    }


    //===============================================================
    //  スタティック関数
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief ベクトルの各要素の絶対値からベクトルを作成
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::Abs(const IntVec2& v) noexcept {
        return IntVec2(abs(v.x), abs(v.y));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 内積
    //@―---------------------------------------------------------------------------
    inline s32 IntVec2::Dot(const IntVec2& a, const IntVec2& b) noexcept {
        return a.x * b.x + a.y * b.y;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 外積
    //@―---------------------------------------------------------------------------
    inline s32 IntVec2::Cross(const IntVec2& a, const IntVec2& b) noexcept {
        return a.x * b.y - a.y * b.x;
    }


    //@―---------------------------------------------------------------------------
    //! @brief  二つのベクトルのマンハッタン距離を計算
    //@―---------------------------------------------------------------------------
    inline s32 IntVec2::MDist(const IntVec2& a, const IntVec2& b) noexcept {
        return
            abs(a.x - b.x) +
            abs(a.y - b.y);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 二つのベクトルの各要素の大きいほうからベクトルを生成
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::Max(const IntVec2& a, const IntVec2& b) noexcept {
        return IntVec2(get_max(a.x, b.x), get_max(a.y, b.y));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 二つのベクトルの各要素の小さいほうからベクトルを生成
    //@―---------------------------------------------------------------------------
    inline IntVec2 IntVec2::Min(const IntVec2& a, const IntVec2& b) noexcept {
        return IntVec2(get_min(a.x, b.x), get_min(a.y, b.y));
    }

    //! @endcond
}// namespace ob
