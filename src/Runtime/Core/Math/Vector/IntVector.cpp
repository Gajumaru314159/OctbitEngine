//***********************************************************
//! @file
//! @brief		整数ベクトル
//! @author		Gajumaru
//***********************************************************

#include <Runtime/Core/Math/Vector/IntVector2.h>
#include <Runtime/Core/Math/Vector/IntVector3.h>
#include <Runtime/Core/Math/Vector/IntVector4.h>
#include <Runtime/Core/Math/Vector/Vector2.h>
#include <Runtime/Core/Math/Vector/Vector3.h>
#include <Runtime/Core/Math/Vector/Vector4.h>
namespace ob {
    /*
    //===============================================================
    //  IntVec2
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief s32*IntVec2演算子
    //@―---------------------------------------------------------------------------
    IntVec2 operator * (s32 f, const IntVec2& v)
    {
        return v * f;
    }


    //@―---------------------------------------------------------------------------
    //! @brief s32/IntVec2演算子
    //@―---------------------------------------------------------------------------
    IntVec2 operator / (s32 f, const IntVec2& v)
    {
        return IntVec2(f, f) / v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief Vec2キャスト演算子
    //@―---------------------------------------------------------------------------
    IntVec2::operator Vec2 ()const
    {
        return Vec2((f32)(x), (f32)(y));
    }




    //===============================================================
    //  IntVec3
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief s32*IntVec3演算子
    //@―---------------------------------------------------------------------------
    IntVec3 operator * (s32 f, const IntVec3& v)
    {
        return v * f;
    }


    //@―---------------------------------------------------------------------------
    //! @brief s32/IntVec3演算子
    //@―---------------------------------------------------------------------------
    IntVec3 operator / (s32 f, const IntVec3& v)
    {
        return IntVec3(f, f, f) / v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief Vec3キャスト演算子
    //@―---------------------------------------------------------------------------
    IntVec3::operator Vec3 ()const
    {
        return Vec3((f32)(x), (f32)(y), (f32)(z));
    }
    */




    //===============================================================
    //  IntVec4
    //===============================================================

    //@―---------------------------------------------------------------------------
    // コンストラクタ( Vec4 初期化)
    //@―---------------------------------------------------------------------------
    IntVec4::IntVec4(Vec4 vec)noexcept {
        x = static_cast<s32>(vec.x);
        y = static_cast<s32>(vec.y);
        z = static_cast<s32>(vec.z);
        w = static_cast<s32>(vec.w);
    }


    //@―---------------------------------------------------------------------------
    //! @brief s32*IntVec4演算子 
    //@―---------------------------------------------------------------------------
    IntVec4 operator * (s32 f, const IntVec4& v)noexcept {
        return v * f;
    }


    //@―---------------------------------------------------------------------------
    //! @brief s32/IntVec4演算子 
    //@―---------------------------------------------------------------------------
    IntVec4 operator / (s32 f, const IntVec4& v)noexcept {
        return IntVec4(f, f, f, f) / v;
    }

}// namespace ob