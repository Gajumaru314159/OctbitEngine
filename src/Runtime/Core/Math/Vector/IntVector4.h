//***********************************************************
//! @file
//! @brief 整数四次元ベクトル
//! @author Gajumaru
//***********************************************************
#pragma once

namespace ob {

    struct Vec4;

    //@―---------------------------------------------------------------------------
    //! @brief 整数四次元ベクトル
    //@―---------------------------------------------------------------------------
    struct OB_API IntVec4 {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================
        IntVec4()noexcept;                                                  // コンストラクタ(ゼロ初期化)
        explicit IntVec4(s32 scalar)noexcept;                               // コンストラクタ(すべての要素を同じ値で初期化)
        IntVec4(s32 x, s32 y, s32 z, s32 w)noexcept;                        // コンストラクタ(要素を指定して初期化)
        explicit IntVec4(Vec4 vec)noexcept;                                 // コンストラクタ( Vec4 初期化)


        //===============================================================
        //  オペレータ
        //===============================================================
        bool operator == (const IntVec4& v) const noexcept;                 // 等価演算子
        bool operator != (const IntVec4& v) const noexcept;                 // 否等価演算子

        IntVec4 operator + (const IntVec4& v) const noexcept;               // 加算演算子
        IntVec4 operator + (s32 scalar) const noexcept;                     // 加算演算子(スカラー)
        IntVec4 operator - (const IntVec4& v) const noexcept;               // 減算演算子
        IntVec4 operator - (s32 scalar) const noexcept;                     // 減算演算子(スカラー)
        IntVec4 operator * (const IntVec4& v) const noexcept;               // 乗算演算子
        IntVec4 operator * (s32 scalar) const noexcept;                     // 乗算演算子(スカラー)
        friend IntVec4 operator * (s32 scalar, const IntVec4& v) noexcept;  // 乗算演算子(前方スカラー)
        IntVec4 operator / (const IntVec4& v) const noexcept;               // 除算演算子
        IntVec4 operator / (s32 scalar) const noexcept;                     // 除算演算子(スカラー)
        friend IntVec4 operator / (s32 scalar, const IntVec4& v) noexcept;  // 除算演算子(前方スカラー)

        IntVec4& operator += (const IntVec4& v) noexcept;                   // 加算代入演算子
        IntVec4& operator += (s32 scalar) noexcept;                         // 加算代入演算子(スカラー)
        IntVec4& operator -= (const IntVec4& v) noexcept;                   // 減算代入演算子
        IntVec4& operator -= (s32 scalar) noexcept;                         // 減算代入演算子(スカラー)
        IntVec4& operator *= (const IntVec4& v) noexcept;                   // 乗算代入演算子
        IntVec4& operator *= (s32 scalar) noexcept;                         // 乗算代入演算子(スカラー)
        IntVec4& operator /= (const IntVec4& v) noexcept;                   // 除算代入演算子
        IntVec4& operator /= (s32 scalar) noexcept;                         // 除算代入演算子(スカラー)

        IntVec4 operator - () const noexcept;                               // 単項マイナス演算子


        //===============================================================
        //  セッター
        //===============================================================;
        void    Set(s32 x, s32 y, s32 z, s32 w) noexcept;                   // 要素の設定
        void    Set(const IntVec4& v) noexcept;                             // 要素の設定
        void    SetZero() noexcept;                                         // 要素を全て0に設定
        void    SetAll(s32 scalar) noexcept;                                // 全ての要素を同じ値で設定


        //===============================================================
        //  ゲッター
        //===============================================================
        s32     GetMaxComponent() const noexcept;                           // 要素の最大を取得
        s32     GetMaxAbsComponent() const noexcept;                        // 要素の絶対値の最大を取得
        s32     GetMinComponent() const noexcept;                           // 要素の最小を取得


        //===============================================================
        //  判定
        //===============================================================
        b32     AllComponentsEqual()const noexcept;                         // すべての要素が同じ値か判定
        b32     IsZero()const noexcept;                                     // ゼロベクトルか判定

    public:

        //===============================================================
        //  スタティック関数
        //===============================================================
        static IntVec4  Abs(const IntVec4& v) noexcept;                     // ベクトルの各要素の絶対値からベクトルを作成
        static s32      Dot(const IntVec4& a, const IntVec4& b) noexcept;   // 内積
        static IntVec4  Cross(const IntVec4& a, const IntVec4& b) noexcept; // 外積
        static s32      MDist(const IntVec4& a, const IntVec4& b) noexcept; // 二つのベクトルのマンハッタン距離を計算
        static IntVec4  Max(const IntVec4& a, const IntVec4& b) noexcept;   // 二つのベクトルの各要素の大きいほうからベクトルを生成
        static IntVec4  Min(const IntVec4& a, const IntVec4& b) noexcept;   // 二つのベクトルの各要素の小さいほうからベクトルを生成


    public:

        static const IntVec4 zero;    //!< ( 0, 0, 0, 0)
        static const IntVec4 one;     //!< ( 1, 1, 1, 1)

    public:

        union {
            struct {
                s32 x;    //!< ベクトルのX成分
                s32 y;    //!< ベクトルのY成分
                s32 z;    //!< ベクトルのZ成分
                s32 w;    //!< ベクトルのW成分
            };
            s32 data[4];  //!< ベクトルの成分
        };

    };






    //===============================================================
    // インライン関数
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ(ゼロ初期化)
    //@―---------------------------------------------------------------------------
    inline IntVec4::IntVec4() noexcept {
        SetZero();
    }


    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ(すべての要素を同じ値で初期化)
    //@―---------------------------------------------------------------------------
    inline IntVec4::IntVec4(s32 scalar) noexcept {
        Set(scalar, scalar, scalar, scalar);
    }


    //@―---------------------------------------------------------------------------
    //! @brief      コンストラクタ(要素を指定して初期化)
    //@―---------------------------------------------------------------------------
    inline IntVec4::IntVec4(s32 x, s32 y, s32 z, s32 w) noexcept {
        Set(x, y, z, w);
    }


    //===============================================================
    //  オペレータ
    //===============================================================


    //@―---------------------------------------------------------------------------
    //! @brief      等価演算子 
    //! 
    //! @details    2つのベクトルの差が 1e-5 より小さい場合、2つのベクトルは等しいと見なされます。
    //@―---------------------------------------------------------------------------
    inline bool IntVec4::operator == (const IntVec4& v) const noexcept {
        return
            x == v.x &&
            y == v.y &&
            z == v.z &&
            w == v.w;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 否等価演算子
    //! 
    //! @details    2つのベクトルの差が 1e-5 より大きい場合、2つのベクトルは異なると見なされます。
    //@―---------------------------------------------------------------------------
    inline bool IntVec4::operator != (const IntVec4& v) const noexcept {
        return !(operator==(v));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec4 IntVec4::operator + (const IntVec4& v) const noexcept {
        return IntVec4(*this) += v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec4 IntVec4::operator + (s32 scalar) const noexcept {
        return IntVec4(*this) += scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec4 IntVec4::operator - (const IntVec4& v) const noexcept {
        return IntVec4(*this) -= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec4 IntVec4::operator - (s32 scalar) const noexcept {
        return IntVec4(*this) -= scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec4 IntVec4::operator * (const IntVec4& v) const noexcept {
        return IntVec4(*this) *= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec4 IntVec4::operator * (s32 scalar) const noexcept {
        return IntVec4(*this) *= scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec4 IntVec4::operator / (const IntVec4& v) const noexcept {
        return IntVec4(*this) /= v;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec4 IntVec4::operator / (s32 scalar) const noexcept {
        return IntVec4(*this) /= scalar;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算代入演算子
    //@―---------------------------------------------------------------------------
    inline IntVec4& IntVec4::operator += (const IntVec4& v) noexcept {
        x += v.x;
        y += v.y;
        z += v.z;
        w += v.w;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 加算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec4& IntVec4::operator += (s32 scalar) noexcept {
        x += scalar;
        y += scalar;
        z += scalar;
        w += scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算代入演算子 
    //@―---------------------------------------------------------------------------
    inline IntVec4& IntVec4::operator -= (const IntVec4& v) noexcept {
        x -= v.x;
        y -= v.y;
        z -= v.z;
        w -= v.w;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 減算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec4& IntVec4::operator -= (s32 scalar) noexcept {
        x -= scalar;
        y -= scalar;
        z -= scalar;
        w -= scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算代入演算子 
    //@―---------------------------------------------------------------------------
    inline IntVec4& IntVec4::operator *= (const IntVec4& v) noexcept {
        x *= v.x;
        y *= v.y;
        z *= v.z;
        w *= v.w;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 乗算代入演算子 (スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec4& IntVec4::operator *= (s32 scalar) noexcept {
        x *= scalar;
        y *= scalar;
        z *= scalar;
        w *= scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算代入演算子 
    //@―---------------------------------------------------------------------------
    inline IntVec4& IntVec4::operator /= (const IntVec4& v) noexcept {
        x /= v.x;
        y /= v.y;
        z /= v.z;
        w /= v.w;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 除算代入演算子(スカラー)
    //@―---------------------------------------------------------------------------
    inline IntVec4& IntVec4::operator /= (s32 scalar) noexcept {
        x /= scalar;
        y /= scalar;
        z /= scalar;
        w /= scalar;
        return *this;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 単項マイナス演算子
    //@―---------------------------------------------------------------------------
    inline IntVec4 IntVec4::operator - () const noexcept {
        return IntVec4(-x, -y, -z, -w);
    }


    //===============================================================
    //  セッター
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief 要素の設定
    //@―---------------------------------------------------------------------------
    inline void IntVec4::Set(s32 x, s32 y, s32 z, s32 w) noexcept {
        this->x = x;
        this->y = y;
        this->z = z;
        this->w = w;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の設定
    //@―---------------------------------------------------------------------------
    inline void IntVec4::Set(const IntVec4& v) noexcept {
        Set(v.x, v.y, v.z, v.w);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素を全て0に設定
    //@―---------------------------------------------------------------------------
    inline void IntVec4::SetZero() noexcept {
        Set(0, 0, 0, 0);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 全ての要素を同じ値で設定
    //@―---------------------------------------------------------------------------
    inline void IntVec4::SetAll(s32 scalar) noexcept {
        Set(scalar, scalar, scalar, scalar);
    }


    //===============================================================
    //  ゲッター
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief 要素の最大を取得
    //@―---------------------------------------------------------------------------
    inline s32 IntVec4::GetMaxComponent() const noexcept {
        return  get_max(get_max(x, y), get_max(z, w));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の絶対値の最大を取得
    //@―---------------------------------------------------------------------------
    inline s32 IntVec4::GetMaxAbsComponent() const noexcept {
        return get_max(get_max(abs(x), abs(y)), get_max(abs(z), abs(w)));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 要素の最小を取得
    //@―---------------------------------------------------------------------------
    inline s32 IntVec4::GetMinComponent() const noexcept {
        return get_min(get_min(x, y), get_min(z, w));
    }


    //===============================================================
    //  判定
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief すべての要素が同じ値か判定
    //@―---------------------------------------------------------------------------
    inline b32 IntVec4::AllComponentsEqual()const noexcept {
        return x == y && y == z && z == w;
    }


    //@―---------------------------------------------------------------------------
    //! @brief ゼロベクトルか判定
    //@―---------------------------------------------------------------------------
    inline b32 IntVec4::IsZero()const noexcept {
        return x == 0 && y == 0 && z == 0 && w == 0;
    }


    //===============================================================
    //  スタティック関数
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief ベクトルの各要素の絶対値からベクトルを作成
    //@―---------------------------------------------------------------------------
    inline IntVec4 IntVec4::Abs(const IntVec4& v) noexcept {
        return IntVec4(abs(v.x), abs(v.y), abs(v.z), abs(v.w));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 内積
    //@―---------------------------------------------------------------------------
    inline s32 IntVec4::Dot(const IntVec4& a, const IntVec4& b) noexcept {
        return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
    }


    //@―---------------------------------------------------------------------------
    //! @brief 外積
    //@―---------------------------------------------------------------------------
    inline IntVec4 IntVec4::Cross(const IntVec4& a, const IntVec4& b) noexcept {
        return IntVec4(a.y * b.z - a.z * b.y, a.z * b.w - a.w * b.z, a.w * b.x - a.x * b.w, a.x * b.y - a.y * b.x);
    }


    //@―---------------------------------------------------------------------------
    //! @brief  二つのベクトルのマンハッタン距離を計算
    //@―---------------------------------------------------------------------------
    inline s32 IntVec4::MDist(const IntVec4& a, const IntVec4& b) noexcept {
        return
            abs(a.x - b.x) +
            abs(a.y - b.y) +
            abs(a.z - b.z) +
            abs(a.w - b.w);
    }


    //@―---------------------------------------------------------------------------
    //! @brief 二つのベクトルの各要素の大きいほうからベクトルを生成
    //@―---------------------------------------------------------------------------
    inline IntVec4 IntVec4::Max(const IntVec4& a, const IntVec4& b) noexcept {
        return IntVec4(get_max(a.x, b.x), get_max(a.y, b.y), get_max(a.z, b.z), get_max(a.w, b.w));
    }


    //@―---------------------------------------------------------------------------
    //! @brief 二つのベクトルの各要素の小さいほうからベクトルを生成
    //@―---------------------------------------------------------------------------
    inline IntVec4 IntVec4::Min(const IntVec4& a, const IntVec4& b) noexcept {
        return IntVec4(get_min(a.x, b.x), get_min(a.y, b.y), get_min(a.z, b.z), get_min(a.w, b.w));
    }

}// namespace ob
