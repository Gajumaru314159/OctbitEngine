//***********************************************************
//! @file
//! @brief 整数三次元ベクトル
//! @author Gajumaru
//***********************************************************
#pragma once
#include <Core/Math/Mathf.h>


/*
namespace ob
{

    struct Vec3;

    //@―---------------------------------------------------------------------------
    //! @brief 二次元ベクトル
    //@―---------------------------------------------------------------------------
    struct OB_API IntVec3
    {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================
        IntVec3();
        IntVec3(s32 _x, s32 _y, s32 _z);


        //===============================================================
        //  オペレータ
        //===============================================================
        IntVec3& operator = (const IntVec3& v);
        bool operator == (const IntVec3& v) const;
        bool operator != (const IntVec3& v) const;
        IntVec3 operator + (const IntVec3& v) const;
        IntVec3 operator - (const IntVec3& v) const;
        IntVec3 operator * (s32 f) const;
        IntVec3 operator * (const IntVec3& v) const;
        IntVec3 operator / (s32 f) const;
        IntVec3 operator / (const IntVec3& v) const;
        IntVec3 operator - () const;
        friend IntVec3 operator * (s32 f, const IntVec3& v);
        friend IntVec3 operator / (s32 f, const IntVec3& v);
        IntVec3& operator += (const IntVec3& v);
        IntVec3& operator -= (const IntVec3& v);
        IntVec3& operator *= (s32 f);
        IntVec3& operator /= (s32 f);
        operator Vec3 ()const;


        //===============================================================
        //  セッター
        //===============================================================
        void Set(s32 x, s32 y, s32 z);
        void SetZero();


        //===============================================================
        //  判定
        //===============================================================
        B32 IsZero();

    public:

        union
        {
            struct
            {
                s32 x;      //!< ベクトルのx成分
                s32 y;      //!< ベクトルのy成分
                s32 z;      //!< ベクトルのz成分
            };
            s32 data[3];    //!< ベクトルの成分
        };

    };






    //===============================================================
    // インライン関数
    //===============================================================

    //@―---------------------------------------------------------------------------
    //! @brief デフォルトコンストラクタ
    //! @details 0ベクトルで初期化する。
    //@―---------------------------------------------------------------------------
    inline IntVec3::IntVec3() :IntVec3(0, 0, 0) {}

    //@―---------------------------------------------------------------------------
    //! @brief コンストラクタ
    //@―---------------------------------------------------------------------------
    inline IntVec3::IntVec3(s32 _x, s32 _y, s32 _z) : x(_x), y(_y), z(_z) {}

    //@―---------------------------------------------------------------------------
    //! @brief 代入演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3& IntVec3::operator = (const IntVec3& v)
    {
        x = v.x;
        y = v.y;
        z = v.z;
        return *this;
    }

    //@―---------------------------------------------------------------------------
    //! @brief 等価演算子
    //@―---------------------------------------------------------------------------
    inline bool IntVec3::operator == (const IntVec3& v) const
    {
        return x == v.x && y == v.y && z == v.z;
    }

    //@―---------------------------------------------------------------------------
    //! @brief 否等価演算子
    //@―---------------------------------------------------------------------------
    inline bool IntVec3::operator != (const IntVec3& v) const
    {
        return !(operator==(v));
    }

    //@―---------------------------------------------------------------------------
    //! @brief 加算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator + (const IntVec3& v) const
    {
        return IntVec3(*this) += v;
    }

    //@―---------------------------------------------------------------------------
    //! @brief 減算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator - (const IntVec3& v) const
    {
        return IntVec3(*this) -= v;
    }

    //@―---------------------------------------------------------------------------
    //! @brief 乗算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator * (s32 f) const
    {
        return IntVec3(*this) *= f;
    }

    //@―---------------------------------------------------------------------------
    //! @brief 乗算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator * (const IntVec3& v) const
    {
        return IntVec3(*this) * v;
    }

    //@―---------------------------------------------------------------------------
    //! @brief 除算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator / (s32 f) const
    {
        return IntVec3(*this) / f;
    }

    //@―---------------------------------------------------------------------------
    //! @brief 除算演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator / (const IntVec3& v) const
    {
        return IntVec3(*this) / v;
    }

    //@―---------------------------------------------------------------------------
    //! @brief 単項マイナス演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3 IntVec3::operator - () const
    {
        return IntVec3(-x, -y, -z);
    }

    //@―---------------------------------------------------------------------------
    //! @brief 加算代入演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3& IntVec3::operator += (const IntVec3& v)
    {
        x += v.x;
        y += v.y;
        z += v.z;
        return *this;
    }

    //@―---------------------------------------------------------------------------
    //! @brief 減算代入演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3& IntVec3::operator -= (const IntVec3& v)
    {
        x -= v.x;
        y -= v.y;
        z -= v.z;
        return *this;
    }

    //@―---------------------------------------------------------------------------
    //! @brief 乗算代入演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3& IntVec3::operator *= (s32 f)
    {
        x *= f;
        y *= f;
        z *= f;
        return *this;
    }

    //@―---------------------------------------------------------------------------
    //! @brief 除算代入演算子
    //@―---------------------------------------------------------------------------
    inline IntVec3& IntVec3::operator /= (s32 f)
    {
        x /= f;
        y /= f;
        z /= f;
        return *this;
    }

    //@―---------------------------------------------------------------------------
    //! @brief 要素の設定
    //@―---------------------------------------------------------------------------
    inline void IntVec3::Set(s32 x, s32 y, s32 z)
    {
        this->x = x;
        this->y = y;
        this->z = z;
    }

    //@―---------------------------------------------------------------------------
    //! @brief 要素をすべて0に設定
    //@―---------------------------------------------------------------------------
    inline void IntVec3::SetZero()
    {
        Set(0, 0, 0);
    }

    //@―---------------------------------------------------------------------------
    //! @brief 要素をすべて0に設定
    //@―---------------------------------------------------------------------------
    inline B32 IntVec3::IsZero()
    {
        return x == 0 && y == 0 && z == 0;
    }
}
*/