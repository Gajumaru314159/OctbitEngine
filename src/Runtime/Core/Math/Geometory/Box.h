//***********************************************************
//! @file
//! @brief		ボックス構造体
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Core/Math/Vector/include.h>

namespace ob {

    //-----------------------------------------------------------------------------
    //! @brief      ボックス構造体(Axis-Alined Box)
    //! 
    //! @details    ボックスは内部的に中心座標とサイズで管理される。
    //! @note       size が負の数の時は未定義動作です。
    //-----------------------------------------------------------------------------
    struct OB_API Box {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================
        Box()noexcept;                                                      // デフォルトコンストラクタ
        Box(EForceInit)noexcept;                                            // コンストラクタ(初期化あり)
        Box(const Vec3& size, const Vec3& center = Vec3::zero)noexcept;     // コンストラクタ(サイズ/中心指定)
        Box(const gsl::span<Vec3>& points)noexcept;                         // コンストラクタ(点群指定)


        //===============================================================
        //  オペレータ
        //===============================================================
        bool operator==(const Box& other)const noexcept;                    // 比較演算子
        Box  operator+(const Vec3& point)const noexcept;                    // 加算演算子(合成)
        Box& operator+=(const Vec3& point)noexcept;                         // 加算代入演算子(合成)


        //===============================================================
        //  セッター
        //===============================================================
        void Set(const Vec3& center, const Vec3& size = Vec3::zero)noexcept;// 中心とサイズから Box を設定
        void Set(const gsl::span<Vec3>& points)noexcept;                    // 点群から Box を設定
        void Reset()noexcept;                                               // 構造体の初期化
        void Normalize()noexcept;                                           // size を絶対値に更新
        void SetStartEnd(const Vec3& start, const Vec3& end)noexcept;       // 2点を指定して Box を設定


        //===============================================================
        //  ゲッター
        //===============================================================
        Vec3 GetStart()const noexcept;                                      // ボックスの起点となる頂点を取得
        Vec3 GetEnd()const noexcept;                                        // GetStart() と対角となる頂点を取得


        //===============================================================
        //  判定
        //===============================================================
        bool IsEmpty()const noexcept;                                       // サイズが0

    public:

        Vec3    center;     //!< ボックスの中心座標
        Vec3    size;       //!< ボックスのサイズ

    };






    //===============================================================
    // インライン関数
    //===============================================================

    //-----------------------------------------------------------------------------
    //! @brief      デフォルトコンストラクタ
    //-----------------------------------------------------------------------------
    inline Box::Box()noexcept {}


    //-----------------------------------------------------------------------------
    //! @brief      コンストラクタ(初期化あり)
    //-----------------------------------------------------------------------------
    inline Box::Box(EForceInit)noexcept {
        Reset();
    }


    //-----------------------------------------------------------------------------
    //! @brief      コンストラクタ(サイズ/中心指定)
    //-----------------------------------------------------------------------------
    inline Box::Box(const Vec3& size, const Vec3& center)noexcept {
        Set(size, center);
    }


    //-----------------------------------------------------------------------------
    //! @brief      比較演算子
    //-----------------------------------------------------------------------------
    inline bool Box::operator==(const Box& other)const noexcept {
        return (center == other.center) && (size == other.size);
    }


    //-----------------------------------------------------------------------------
    //! @brief          加算演算子
    //! 
    //! @details        ポイントを含むようにボックスを拡大する
    //! @param point    ポイント
    //-----------------------------------------------------------------------------
    inline Box Box::operator+(const Vec3& point)const noexcept {
        return Box(*this) += point;
    }


    //-----------------------------------------------------------------------------
    //! @brief          加算演算子
    //! 
    //! @details        ポイントを含むようにボックスを拡大する
    //! @param point    ポイント
    //-----------------------------------------------------------------------------
    inline Box& Box::operator+=(const Vec3& point)noexcept {
        Vec3 min = center - size * 0.5f;
        Vec3 max = center + size * 0.5f;

        min = Vec3::Min(min, point);
        max = Vec3::Max(max, point);

        center = (min + max) * 0.5f;
        size = max - min;

        return *this;
    }


    //-----------------------------------------------------------------------------
    //! @brief      中心とサイズから Box を設定
    //! 
    //! @detail     点群を含む最小の Box に設定する
    //-----------------------------------------------------------------------------
    inline void Box::Set(const Vec3& size, const Vec3& center)noexcept {
        this->size = size;
        this->center = center;
    }


    //-----------------------------------------------------------------------------
    //! @brief      構造体の初期化
    //! 
    //! @detail     center と size を0に初期化する
    //-----------------------------------------------------------------------------
    inline void Box::Reset()noexcept {
        center.SetZero();
        size.SetZero();
    }


    //-----------------------------------------------------------------------------
    //! @brief      size を絶対値に更新
    //-----------------------------------------------------------------------------
    inline void Box::Normalize()noexcept {
        size = Vec3::Abs(size);
    }


    //-----------------------------------------------------------------------------
    //! @brief      2点を指定して Box を設定
    //-----------------------------------------------------------------------------
    inline void Box::SetStartEnd(const Vec3& start, const Vec3& end) noexcept {
        center = (start + end) * 0.5f;
        size = Vec3::Abs(start - end);
    }


    //-----------------------------------------------------------------------------
    //! @brief      ボックスの起点となる頂点を取得
    //! 
    //! @see        GetEnd()
    //-----------------------------------------------------------------------------
    inline Vec3 Box::GetStart()const noexcept {
        return center + size * 0.5f;
    }


    //-----------------------------------------------------------------------------
    //! @brief      GetStart() と対角となる頂点を取得
    //! 
    //! @see        GetStart()
    //-----------------------------------------------------------------------------
    inline Vec3 Box::GetEnd()const noexcept {
        return center - size * 0.5f;
    }


    //-----------------------------------------------------------------------------
    //! @brief      サイズが0
    //-----------------------------------------------------------------------------
    inline bool Box::IsEmpty()const noexcept {
        return size.IsZero();
    }

}// namespcae ob