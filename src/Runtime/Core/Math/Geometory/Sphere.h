//***********************************************************
//! @file
//! @brief		スフィア構造体
//! @author		Gajumaru
//***********************************************************
#pragma once
#include <Core/Math/Vector/include.h>

namespace ob {

    //-----------------------------------------------------------------------------
    //! @brief  スフィア構造体
    //! 
    //! @note   radius が負の数の時は未定義動作です。
    //-----------------------------------------------------------------------------
    struct Sphere {
    public:

        //===============================================================
        //  コンストラクタ / デストラクタ
        //===============================================================
        Sphere() noexcept;                                       // デフォルトコンストラクタ
        Sphere(EForceInit) noexcept;                             // コンストラクタ(初期化あり)
        Sphere(const Vec3& center, f32 radius) noexcept;         // コンストラクタ(引数指定)


        //===============================================================
        //  オペレータ
        //===============================================================
        bool operator==(const Sphere& other)const noexcept;      // 等価演算子
        bool operator!=(const Sphere& other)const noexcept;      // 否等価演算子
        Sphere  operator+(const Vec3& point)const noexcept;      // 加算演算子(合成)
        Sphere& operator+=(const Vec3& point) noexcept;          // 加算代入演算子(合成)


        //===============================================================
        //  セッター
        //===============================================================
        void Reset() noexcept;                                   // 構造体の初期化


    public:

        Vec3    center;
        f32     radius;

    };






    //===============================================================
    // インライン関数
    //===============================================================

    //-----------------------------------------------------------------------------
    //! @brief デフォルトコンストラクタ
    //-----------------------------------------------------------------------------
    inline Sphere::Sphere() noexcept {}


    //-----------------------------------------------------------------------------
    //! @brief コンストラクタ(引数指定)
    //-----------------------------------------------------------------------------
    inline Sphere::Sphere(EForceInit) noexcept{
        Reset();
    }


    //-----------------------------------------------------------------------------
    //! @brief コンストラクタ(引数指定)
    //-----------------------------------------------------------------------------
    inline Sphere::Sphere(const Vec3& center, f32 radius) noexcept :center(center), radius(radius) {}


    //-----------------------------------------------------------------------------
    //! @brief 等価演算子
    //-----------------------------------------------------------------------------
    inline bool Sphere::operator==(const Sphere& other)const noexcept {
        return center == other.center && Mathf::Approximately(radius, other.radius);
    }


    //-----------------------------------------------------------------------------
    //! @brief 否等価演算子
    //-----------------------------------------------------------------------------
    inline bool Sphere::operator!=(const Sphere& other)const noexcept {
        return  !(operator==(other));
    }


    //-----------------------------------------------------------------------------
    //! @brief 構造体の初期化
    //-----------------------------------------------------------------------------
    inline void Sphere::Reset() noexcept {
        center.SetZero();
        radius = 0.5f;
    }

}// namespcae ob